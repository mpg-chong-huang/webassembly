{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/glue/binaryen.js","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/collections.js","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/math.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__20__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonNames","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","anyref","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","returnof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_TABLE_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_MUTABLE_GLOBALS","ASC_FEATURE_NONTRAPPING_F2I","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","ASC_FEATURE_EXCEPTION_HANDLING","ASC_FEATURE_TAIL_CALLS","ASC_FEATURE_REFERENCE_TYPES","ASC_FEATURE_MULTI_VALUE","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","Anyref","String","Array","StaticArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","Error","abort","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocBuffer","allocArray","Feature","featureToString","Target","Typeinfo","TypeinfoFlags","DiagnosticCategory","diagnosticCategoryToString","category","PEDANTIC","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_MAGENTA","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","showContext","diagnostics","seen","has","seenInSource","seenCodesAtPos","includes","set","withRange","emitDiagnostic","NodeKind","DecoratorKind","LiteralKind","SourceKind","Node","node","TypeName","kind","TYPENAME","identifier","next","createTypeName","createIdentifierExpression","typeArguments","isNullable","NamedTypeNode","NAMEDTYPE","parameters","returnType","explicitThisType","FunctionTypeNode","FUNCTIONTYPE","createNamedType","createSimpleTypeName","extendsType","defaultType","TypeParameterNode","TYPEPARAMETER","type","initializer","ParameterNode","PARAMETER","parameterKind","args","DecoratorNode","DECORATOR","arguments","decoratorKind","fromNode","CommentNode","COMMENT","commentKind","isQuoted","IdentifierExpression","IDENTIFIER","elements","ArrayLiteralExpression","LITERAL","literalKind","ARRAY","elementExpressions","assertionKind","expression","toType","AssertionExpression","ASSERTION","operator","left","right","BinaryExpression","BINARY","typeArgs","CallExpression","CALL","declaration","ClassExpression","CLASS","expressions","CommaExpression","COMMA","ConstructorExpression","CONSTRUCTOR","element","ElementAccessExpression","ELEMENTACCESS","elementExpression","FalseExpression","FALSE","FloatLiteralExpression","FLOAT","FunctionExpression","FUNCTION","isType","InstanceOfExpression","INSTANCEOF","IntegerLiteralExpression","INTEGER","typeName","NewExpression","NEW","NullExpression","NULL","names","values","ObjectLiteralExpression","OBJECT","ParenthesizedExpression","PARENTHESIZED","PropertyAccessExpression","PROPERTYACCESS","pattern","flags","RegexpLiteralExpression","REGEXP","patternFlags","condition","ifThen","ifElse","TernaryExpression","TERNARY","StringLiteralExpression","STRING","SuperExpression","SUPER","ThisExpression","THIS","TrueExpression","TRUE","operand","UnaryPostfixExpression","UNARYPOSTFIX","UnaryPrefixExpression","UNARYPREFIX","statements","BlockStatement","BLOCK","label","BreakStatement","BREAK","typeParameters","implementsTypes","members","decorators","ClassDeclaration","CLASSDECLARATION","ContinueStatement","CONTINUE","statement","DoStatement","DO","EmptyStatement","EnumDeclaration","ENUMDECLARATION","EnumValueDeclaration","ENUMVALUEDECLARATION","path","isDeclare","ExportStatement","EXPORT","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","ExportDefaultStatement","EXPORTDEFAULT","externalName","ExportImportStatement","EXPORTIMPORT","ExportMember","EXPORTMEMBER","localName","exportedName","ExpressionStatement","EXPRESSION","ifTrue","ifFalse","IfStatement","IF","decls","ImportStatement","IMPORT","declarations","namespaceName","foreignName","ImportDeclaration","IMPORTDECLARATION","InterfaceDeclaration","INTERFACEDECLARATION","FieldDeclaration","FIELDDECLARATION","incrementor","ForStatement","FOR","variable","iterable","ForOfStatement","FOROF","signature","body","arrowKind","FunctionDeclaration","FUNCTIONDECLARATION","keyType","valueType","IndexSignatureDeclaration","INDEXSIGNATUREDECLARATION","MethodDeclaration","METHODDECLARATION","NamespaceDeclaration","NAMESPACEDECLARATION","ReturnStatement","RETURN","cases","SwitchStatement","SWITCH","SwitchCase","SWITCHCASE","ThrowStatement","THROW","catchVariable","catchStatements","finallyStatements","TryStatement","TRY","alias","TypeDeclaration","TYPEDECLARATION","VariableStatement","VARIABLE","VariableDeclaration","VARIABLEDECLARATION","VoidStatement","VOID","WhileStatement","WHILE","changetype","TypeNode","typeParameterNodes","namedTypeNode","typeArgumentNodes","k","hasGenericComponent","functionTypeNode","parameterNodes","ParameterKind","implicitFieldDeclaration","NONE","flag","nameNode","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","LAZY","OPERATOR","SEALED","UNMANAGED","UNSAFE","propertyAccessNode","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","CommentKind","Expression","LiteralExpression","AssertionKind","numTypeArguments","Range","numArguments","UnaryExpression","Statement","super","debugInfoIndex","exportPaths","SOURCE","sourceKind","pos","lastIndexOf","simplePath","LIBRARY","LIBRARY_ENTRY","DeclarationStatement","VariableLikeDeclarationStatement","parameterIndex","ArrowKind","createFunctionDeclaration","endsWith","decorator","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","OperatorKind","ElementKind","DecoratorFlags","fromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","fromBinaryToken","token","Token","PLUS_EQUALS","MINUS_EQUALS","ASTERISK","ASTERISK_EQUALS","SLASH","SLASH_EQUALS","PERCENT","PERCENT_EQUALS","ASTERISK_ASTERISK","ASTERISK_ASTERISK_EQUALS","AMPERSAND","AMPERSAND_EQUALS","BAR","BAR_EQUALS","CARET","CARET_EQUALS","LESSTHAN_LESSTHAN","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","GREATERTHAN","GREATERTHAN_EQUALS","LESSTHAN","LESSTHAN_EQUALS","fromUnaryPrefixToken","EXCLAMATION","TILDE","PLUS_PLUS","MINUS_MINUS","fromUnaryPostfixToken","Program","DiagnosticEmitter","options","sources","diagnosticsOffset","filesByName","elementsByName","elementsByDeclaration","instancesByName","wrapperClasses","managedClasses","uniqueSignatures","nextClassId","nextSignatureId","initialized","nativeDummySignature","nativeSource","Source","nativeFile","File","internalName","parser","Parser","resolver","Resolver","buffer","offset","id","payloadSize","writeI32","createVariableDeclaration","createTypeDeclaration","createOmittedType","createFunctionType","createNamespaceDeclaration","parent","decoratorFlags","Function","FunctionPrototype","makeNativeFunctionDeclaration","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","makeNativeTypeDeclaration","GENERIC","hasFeature","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","tableBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","j","initializeExports","initializeExportDefault","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","_keys","Map_keys","starExports","exportStar","unchecked","foreignFile","lookupForeignFile","ensureExportStar","error","File_0_not_found","queuedImport","lookupForeign","Module_0_has_no_exported_member_1","asImportedNamespace","exportNames","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","isDeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerWrapperClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","Class_0_is_sealed_and_cannot_be_extended","identifierNode","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","globalAliases","firstChar","parseInt","arrayPrototype","staticArrayPrototype","setPrototype","mapPrototype","abortInstance","lookupFunction","allocInstance","requireFunction","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocBufferInstance","allocArrayInstance","_values","Map_values","USER_ENTRY","markModuleExports","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","markModuleExport","exportsStar","MODULE_EXPORT","instanceMembers","member","PROPERTY_PROTOTYPE","propertyPrototype","getterPrototype","setterPrototype","PROPERTY","FIELD","staticMembers","setType","className","classReference","classElement","wrappedType","is","global","Global","makeNativeVariableDeclaration","CONST","setConstantIntegerValue","setConstantFloatValue","existing","merged","tryMerge","errorRelated","Duplicate_identifier_0","lookupExport","fileQueuedExports","queuedExportForeignPath","acceptedFlags","fromKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","checkDecorators","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","warning","Not_implemented","memberDeclarations","memberDeclaration","initializeField","methodDeclaration","isAny","GET","SET","initializeProperty","initializeMethod","AMBIENT","STATIC","INTERFACE_PROTOTYPE","READONLY","ABSTRACT","FieldPrototype","addInstance","isStatic","checkOperatorOverloads","classPrototype","numArgs","firstArg","isLiteralKind","_0_is_not_a_valid_operator","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","parentMembers","PropertyPrototype","Duplicate_property_0","ensureProperty","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","queued","Export_declaration_conflicts_with_exported_declaration_of_0","initializeImport","validDecorators","INSTANCE","InterfacePrototype","original","Namespace","copyMembers","DECLARE","cyclics","instance","isAcyclic","Element","program","shadowType","FILE","current","localIdentifierIfImport","originalDeclaration","reportedIdentifier","isBound","declaredElements","DeclaredElement","typedElements","TypedElement","RESOLVED","startFunction","makeNativeFunction","Signature","ensureGlobal","makeNativeNamespaceDeclaration","SCOPED","copyExportsToNamespace","memberName","TYPEDEFINITION","mangleInternalName","lookup","NAMESPACE","inSelf","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Local","index","LOCAL","instances","boundPrototypes","classInstance","bound","instanceKey","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","tempAnyrefs","tempExnrefs","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","locals","sourceMap","debugLocation","setDebugLocation","debugInfoRef","AcyclicState","nextFunctionTarget","FUNCTION_TARGET","FIELD_PROTOTYPE","memoryOffset","getterRef","setterRef","firstDeclaration","getterInstance","setterInstance","INDEXSIGNATURE","isUnchecked","lookupOverload","_isInterface","constructorPrototype","extendees","extends","basePtototype","Class","INTERFACE","base","nextMemoryOffset","constructorInstance","indexSignature","_id","_acyclic","rttiFlags","asClass","isBuiltinArray","lengthField","thisInstanceMembers","baseInstanceMembers","VIRTUAL","nextPrototype","inheritedTypeArguments","baseName","baseType","target","uncheckedOverload","overload","fieldName","field","baseOffset","fieldInstance","writeI8","writeI16","writeF32","writeF64","extendedPrototype","abvInstance","getTypeArgumentsTo","acyclic","hasCycle","cyclesTo","other","except","fieldType","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","isInstance","asGlobal","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPE","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","DOT_DOT_DOT","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","MAX_VALUE","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skip","state","reusableState","State","quote","result","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","readHexadecimalEscape","fromCharCode","escaped","Unterminated_regular_expression_literal","Invalid_regular_expression_flags","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readDecimalFloat","parseFloat","remain","value32","i64_low","invalid","i64_high","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","NativeType","FeatureFlags","ExpressionId","SideEffects","UnaryOp","BinaryOp","HostOp","AtomicRMWOp","SIMDExtractOp","SIMDReplaceOp","SIMDShiftOp","SIMDTernaryOp","SIMDLoadOp","MemorySegment","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","binaryen","_BinaryenModuleCreate","lit","_malloc","_BinaryenSizeofLiteral","cArr","allocU8Array","_BinaryenModuleRead","_free","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","__i32_store8","_BinaryenLiteralVec128","_BinaryenRefNull","op","expr","_BinaryenUnary","_BinaryenBinary","operands","cStr","allocStringCached","allocPtrArray","ret","_BinaryenHost","_BinaryenLocalGet","Auto","_BinaryenExpressionGetType","_BinaryenLocalTee","_BinaryenGlobalGet","signed","ptr","align","_BinaryenLoad","_BinaryenStore","_BinaryenAtomicLoad","_BinaryenAtomicStore","_BinaryenAtomicRMW","expected","replacement","_BinaryenAtomicCmpxchg","timeout","expectedType","_BinaryenAtomicWait","notifyCount","_BinaryenAtomicNotify","_BinaryenAtomicFence","_BinaryenLocalSet","_BinaryenGlobalSet","children","None","_BinaryenBlock","stmts","nop","single","getExpressionId","Return","Throw","Unreachable","singleType","getExpressionType","block","_BinaryenBreak","_BinaryenDrop","_BinaryenLoop","_BinaryenIf","_BinaryenNop","_BinaryenReturn","_BinaryenSelect","defaultName","numNames","strs","_BinaryenSwitch","isReturn","_BinaryenReturnCall","_BinaryenCall","params","results","_BinaryenReturnCallIndirect","_BinaryenCallIndirect","call_indirect","_BinaryenUnreachable","size","_BinaryenMemoryCopy","_BinaryenMemoryFill","catchBody","_BinaryenTry","eventName","_BinaryenThrow","exnref","_BinaryenRethrow","cStr1","cStr2","_BinaryenBrOnExn","_BinaryenPush","_BinaryenPop","vec","idx","_BinaryenSIMDExtract","_BinaryenSIMDReplace","vec1","vec2","mask","_BinaryenSIMDShuffle","_BinaryenSIMDTernary","shift","_BinaryenSIMDShift","_BinaryenSIMDLoad","_BinaryenRefIsNull","_BinaryenRefFunc","mutable","_BinaryenAddGlobal","_BinaryenGetGlobal","_BinaryenRemoveGlobal","attribute","_BinaryenAddEvent","_BinaryenGetEvent","_BinaryenRemoveEvent","varTypes","allocI32Array","_BinaryenAddFunction","_BinaryenGetFunction","_BinaryenRemoveFunction","paramTypes","tempName","createType","func","_BinaryenSetStart","_BinaryenAddFunctionExport","_BinaryenAddTableExport","_BinaryenAddMemoryExport","_BinaryenAddGlobalExport","_BinaryenAddEventExport","_BinaryenRemoveExport","externalModuleName","externalBaseName","cStr3","_BinaryenAddFunctionImport","_BinaryenAddTableImport","shared","_BinaryenAddMemoryImport","globalType","_BinaryenAddGlobalImport","_BinaryenAddEventImport","initial","maximum","segments","segs","psvs","offs","sizs","cArr1","cArr2","cArr3","cArr4","u32s","val","__i32_store","allocU32Array","_BinaryenSetMemory","funcs","_BinaryenSetFunctionTable","contents","_BinaryenAddCustomSection","_BinaryenGetOptimizeLevel","level","_BinaryenSetOptimizeLevel","_BinaryenGetShrinkLevel","_BinaryenSetShrinkLevel","_BinaryenGetDebugInfo","on","_BinaryenSetDebugInfo","_BinaryenGetLowMemoryUnused","_BinaryenSetLowMemoryUnused","_BinaryenGetPassArgument","readString","_BinaryenSetPassArgument","_BinaryenClearPassArguments","_BinaryenGetAlwaysInlineMaxSize","_BinaryenSetAlwaysInlineMaxSize","_BinaryenGetFlexibleInlineMaxSize","_BinaryenSetFlexibleInlineMaxSize","_BinaryenGetOneCallerInlineMaxSize","_BinaryenSetOneCallerInlineMaxSize","_BinaryenModuleGetFeatures","featureFlags","_BinaryenModuleSetFeatures","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","addTemporaryFunction","_BinaryenFunctionGetBody","_BinaryenExpressionGetId","_BinaryenReturnGetValue","removeTemporaryFunction","_BinaryenModuleValidate","_BinaryenModuleInterpret","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","__i32_load","binaryLen","BinaryModule","output","__i32_load8_u","readBuffer","str","_BinaryenModuleDispose","Relooper","noSideEffects","maxDepth","nested1","nested2","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","cloneExpression","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","_BinaryenModuleAddDebugInfoFileName","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","types","_BinaryenTypeCreate","UNLIMITED_MEMORY","UNLIMITED_TABLE","arity","_BinaryenTypeArity","_BinaryenTypeExpand","_BinaryenLocalSetGetIndex","_BinaryenLocalSetGetValue","_BinaryenLocalSetIsTee","_BinaryenStoreGetBytes","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","_BinaryenLoopGetName","_BinaryenLoopGetBody","_BinaryenBreakGetName","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","_BinaryenDropGetValue","_BinaryenCallGetTarget","_BinaryenCallGetNumOperands","_BinaryenCallGetOperand","_BinaryenHostGetOp","_BinaryenHostGetNumOperands","_BinaryenHostGetOperand","_BinaryenHostGetNameOperand","_BinaryenFunctionGetName","_BinaryenFunctionGetParams","_BinaryenFunctionGetResults","count","_BinaryenFunctionGetNumVars","_BinaryenFunctionGetVar","_BinaryenGlobalGetName","_BinaryenGlobalGetType","_BinaryenGlobalIsMutable","_BinaryenGlobalGetInitExpr","event","_BinaryenEventGetName","_BinaryenEventGetAttribute","_BinaryenEventGetParams","_BinaryenEventGetResults","relooper","_RelooperCreate","_RelooperAddBlock","from","to","_RelooperAddBranch","_RelooperAddBlockWithSwitch","indexes","_RelooperAddBranchForSwitch","entry","labelHelper","_RelooperRenderAndDispose","getSideEffects","features","All","_BinaryenExpressionGetSideEffects","u8s","numValues","i32s","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","ch","fromCharCodes","needsExplicitUnreachable","Break","Block","numChildren","data","If","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","Select","Drop","Host","Nop","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","AtomicFence","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDTernary","_BinaryenSIMDTernaryGetA","_BinaryenSIMDTernaryGetB","_BinaryenSIMDTernaryGetC","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","SIMDLoad","_BinaryenSIMDLoadGetPtr","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Push","_BinaryenPushGetValue","Pop","RefNull","RefIsNull","_BinaryenRefIsNullGetValue","RefFunc","Try","_BinaryenTryGetBody","_BinaryenTryGetCatchBody","_BinaryenThrowGetNumOperands","_BinaryenThrowGetOperand","Rethrow","_BinaryenRethrowGetExnref","BrOnExn","_BinaryenBrOnExnGetExnref","TypeKind","TypeFlags","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","auto","isize64","isize32","usize64","usize32","clz","targetType","classType","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isAssignableTo","signednessIsImportant","typesToNativeTypes","numTypes","toNativeType","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","signatureTypes","compare","equals","numParameterTypes","nativeTypes","FunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","optionalStart","restIndex","cachedDefaultParameterNames","g","e","window","ReportMode","currentThisExpression","currentElementExpression","resolveClassPending","ctxElement","ctxTypes","reportMode","REPORT","resolveNamedType","resolveFunctionType","isSimpleType","simpleName","Type_0_is_not_generic","asNullable","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","typeDefinition","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveBuiltinReturnTypeType","resolveTypeArguments","resolveType","typeNode","Cannot_find_name_0","parameterNode","REST","parameterTypeNode","isTypeOmitted","Type_expected","returnTypeNode","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","Type_0_has_no_call_signatures","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","ctxFlow","resolveFunctionInclTypeArguments","actualFunction","numTypeParameters","typeParameterNames","argumentNodes","argumentExpression","resolveExpression","SWALLOW","propagateInferredGenericTypes","resolvedTypeArguments","inferredType","Type_argument_expected","atEnd","currentType","ensureResolvedLazyGlobal","isTypedElement","asFunctionTarget","ctxType","lookupAssertionExpression","lookupBinaryExpression","lookupCallExpression","lookupCommaExpression","lookupElementAccessExpression","lookupFunctionExpression","lookupIdentifierExpression","lookupThisExpression","lookupSuperExpression","lookupInstanceOfExpression","lookupLiteralExpression","lookupNewExpression","lookupPropertyAccessExpression","lookupTernaryExpression","lookupUnaryPostfixExpression","lookupUnaryPrefixExpression","resolveAssertionExpression","resolveBinaryExpression","resolveCallExpression","resolveCommaExpression","resolveElementAccessExpression","resolveFunctionExpression","resolveIdentifierExpression","resolveThisExpression","resolveSuperExpression","resolveInstanceOfExpression","resolveLiteralExpression","resolveNewExpression","resolvePropertyAccessExpression","resolveTernaryExpression","resolveUnaryPostfixExpression","resolveUnaryPrefixExpression","getElementOfType","getTypeOfElement","Expression_cannot_be_represented_by_a_type","initializerNode","targetNode","lookupExpression","propertyName","variableLikeElement","indexedGet","resolvedType","baseInstance","targetExpression","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","PREFIX","Type_0_is_illegal_in_this_context","NONNULL","The_0_operator_cannot_be_applied_to_type_1","operatorTokenToString","determineIntegerLiteralType","i64_sub","i64_zero","intType","leftType","rightType","commonType","commonDenominator","Operator_0_cannot_be_applied_to_types_1_and_2","isInline","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","fltType","elementType","numNullLiterals","The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly","functionPrototype","BuiltinNames","maybeInferCall","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","thenType","elseType","This_expression_is_not_constructable","actualParent","typesToString","resolvedInstance","getResolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","setResolvedInstance","reportNode","nameInclTypeParamters","pendingClasses","_0_is_referenced_directly_or_indirectly_in_its_own_base_expression","setBase","finishResolveClass","baseMembers","baseMemberName","baseMember","instanceMemberPrototypes","fieldPrototype","fieldTypeNode","baseField","Field","isPowerOf2","boundPrototype","toBound","propertyInstance","Property","ctorPrototype","ctorInstance","operatorInstance","overloadKind","overloadPrototype","Type_0_is_not_assignable_to_type_1","IndexSignature","pendingIndex","indexOf","splice","derivedPendingClasses","pending","LocalFlags","FlowFlags","ConditionKind","scopedLocals","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","resetBreakContext","branch","slice","temps","Exnref","unsetLocalFlag","addLocal","pop","getTempLocal","setLocalFlag","RETAINED","scopedLocal","existingLocal","isNative","scopedAlias","freeTempLocal","scope","defaultIfInlined","stack","otherFlags","conditionKind","inherit","thisFlags","newFlags","thisLocalFlags","numThisLocalFlags","otherLocalFlags","numOtherLocalFlags","maxLocalFlags","max","CONSTANT","WRAPPED","INITIALIZED","CONDITIONALLY_RETAINED","leftFlags","rightFlags","rightLocalFlags","leftLocalFlags","numLeftLocalFlags","numRightLocalFlags","before","after","min","isLocalFlag","isAnyLocalFlag","ANY_RETAINED","isLocalTee","getLocalSetIndex","getLocalGetIndex","iff","inheritNonnullIfTrue","getLocalSetValue","getIfFalse","getConstValueI32","getConstValueI64Low","getConstValueI64High","getIfCondition","getIfTrue","getUnaryOp","EqzI32","EqzI64","inheritNonnullIfFalse","getUnaryValue","getBinaryOp","EqI32","getBinaryLeft","getBinaryRight","EqI64","NeI32","NeI64","getCallTarget","getCallOperand","exprType","canConversionOverflow","canOverflow","getGlobalGetName","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","computeSmallIntegerMask","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","getConstValueF32","getConstValueF64","MIN_VALUE","fromType","isLoadSigned","getLoadBytes","getBlockName","getBlockChildCount","last","getBlockChild","getSelectThen","getSelectElse","instanceName","functionInstance","levels","findUsedLocalsVisit","used","traverse","Binaryen","toText","wrapModule","emitStackIR","toAsmjs","emitAsmjs","ExportNames","importMemory","sharedMemory","importTable","exportTable","explicitStart","noUnsafe","pedantic","feature","Constraints","RuntimeFeatures","argumentsLength","setArgumentsLength","memory","table","Compiler","currentParent","memorySegments","stringSegments","functionTable","builtinArgumentsLength","runtimeFeatures","skippedAutoreleases","inlineStack","lazyLibraryFunctions","pendingClassInstanceOf","virtualCalls","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","SignExt","MutableGloabls","NontrappingFPToInt","BulkMemory","SIMD128","Atomics","ExceptionHandling","TailCall","ReferenceTypes","MultiValue","setFeatures","compile","initialize","initializeProgram","startFunctionInstance","startFunctionBody","currentFlow","currentBody","addGlobal","heap_base","rtti_base","files","compileFile","compileExports","startIsEmpty","started","unshift","if","global_get","return","global_set","funcRef","addFunction","nativeParams","nativeResults","flatten","finalize","addFunctionExport","setStart","cyclicClasses","findCyclicClasses","Set_values","Type_0_is_cyclic_Module_will_include_deferred_garbage_collection","functionsToCompile","clear","compileFunction","compileClassInstanceOf","setupVirtualLookupTables","removeGlobal","compileRTTI","compileVisitGlobals","compileVisitMembers","i64_align","isSharedMemory","setMemory","i64_shr_u","addMemoryImport","setFunctionTable","addTableImport","willOptimize","Importing_the_table_disables_some_indirect_call_optimizations","addTableExport","Exporting_the_table_disables_some_indirect_call_optimizations","ensureModuleExports","Function_0_is_possibly_called_virtually_which_is_not_yet_supported","elementName","ensureModuleExport","prefix","functionInstances","fullName","classInstances","addGlobalExport","Cannot_export_a_mutable_global","enumValue","ensureTrampoline","ensureBuiltinArgumentsLength","COMPILED","setter","internalGetterName","internalSetterName","isUnmanaged","subPrefix","implicitExport","compileMembers","compileGlobal","compileEnum","compileClass","compileElement","normalizedPathWithoutExtension","pathWithIndex","startSignature","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","compileExpression","nativeType","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","addGlobalImport","mangleImportName_moduleName","mangleImportName_elementName","Feature_0_is_not_enabled","initializeInStart","origInitExpr","precomputeExpression","fromName","isGlobalMutable","getGlobal","Mutable_value_cannot_be_inlined","compileInlineConstant","makeZero","findDecorator","decoratorNodes","isManaged","makeRetain","previousParent","previousValue","previousValueIsMut","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","binary","AddI32","makeGlobalAssignment","forceStdAlternative","previousType","bodyNode","An_implementation_cannot_be_declared_in_ambient_contexts","local_set","local_get","compileFunctionBody","performAutoreleases","addFunctionImport","getFunction","unreachable","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileStatements","compileReturnedExpression","indexBefore","nonNull","isNonnull","temp","nativeSizeType","unary","makeAllocation","makeFieldInitializationInConstructor","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","ensureConstructor","compileField","compileProperty","compileFieldGetter","compileFieldSetter","nativeThisType","nativeValueType","valueExpr","load","local_tee","drop","makeRelease","store","compilePropertyGetter","compilePropertySetter","alignment","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","writeRuntimeHeader","addMemorySegment","byteLength","buf","writeI64","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","writeField","TRAMPOLINE","memberStatements","getElementByDeclaration","exportStatement","compileFileByPath","importStatement","stmt","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileForOfStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","fork","freeScopedLocals","labelNode","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","br","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","doCompileDoStatement","flowAfter","pushBreakLabel","unifyLocalFlags","flowBefore","bodyFlow","bodyStmts","condFlow","condExpr","makeIsTrueish","condKind","evaluateConditionKind","hasSideEffects","tcond","hasIncompatibleLocalStates","popBreakLabel","hasScopedLocals","loop","doCompileForStatement","loopLabel","loopStmts","inheritBranch","ifStmts","incrFlow","thenStmts","thenFlow","thenTerminates","elseStmts","elseFlow","elseTerminates","inheritMutual","valueExpression","constraints","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","terminates","unset","newArgs","makeAbort","numDeclarations","initializers","initAutoreleaseSkipped","isConst","_const_declarations_must_be_initialized","getScopedLocal","addScopedLocal","doCompileWhileStatement","contextualType","computeSmallIntegerShift","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","convertExpression","ensureSmallIntegerWrap","tryUndoAutorelease","explicit","makeRuntimeNonNullCheck","makeRuntimeUpcastCheck","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit","inheritedConstraints","exceptVoid","info","Expression_is_never_null","leftExpr","rightExpr","compound","compileBinaryOverload","AllTrueI8x16","EqI8x16","AnyTrueI8x16","NeI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","ShlI64","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","delayAutorelease","rightStmts","retainLeftInThen","isStrictlyAssignableTo","makeAssignment","thisExpression","checkUnsafe","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","indexedSet","Index_signature_in_type_0_only_permits_reading","Indexed_access_may_involve_bounds_checking","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr","elementExpr","tempTarget","tempElement","alreadyRetained","makeReplace","nativeFieldType","tempThis","findUsedLocals","tempValue","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","theCall","compileCallDirect","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","functionTarget","compileCallIndirect","ctx","BuiltinContext","compiler","contextIsExact","builtins","fn","hasThis","The_this_types_of_each_signature_are_incompatible","minimum","Expected_at_least_0_arguments_but_got_1","Operation_is_unsafe","argumentExpressions","thisArg","checkCallSignature","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","createInline","usedLocals","paramExpr","paramType","argumentLocal","addScopedAlias","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","switch","Optional_parameter_must_have_an_initializer","newExpr","oldExpr","temp1","temp2","getAutoreleaseLocal","lengthBefore","maybeFinishAutorelease","skipAutorelease","theOperands","numOperands","isCallImport","allOptionalsAreConstant","compilesToConst","makeCallIndirect","numExpressions","exprs","contextualSignature","clone","numPresentParameters","thisTypeNode","ensureFunctionTableEntry","ref_null","Expression_resolves_to_unusual_type_0","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","maybeCompileEnclosingSource","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","ref_func","namedType","hasTypeArguments","makeInstanceofClass","makeInstanceofType","actualType","Expression_compiles_to_a_dynamic_check_at_runtime","implicitlyNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","compileStaticArrayLiteral","arrayType","tempDataStart","nativeElementType","addStaticBuffer","bufferAddress","arraySegment","addStaticArrayHeader","arrayAddress","alignLog2","nativeArrayType","dataStartMember","bufferSize","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","compileInstantiate","baseClass","baseCtor","allocExpr","parentEnum","Object_is_possibly_null","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","ifThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","compileUnaryOverload","makeOne","setValue","isNumericLiteral","NegF32","NegF64","makeNegOne","compileTypeof","typeString","ExtendI8ToI32","ExtendI16ToI32","addDebugInfoFile","v128_zero","ref_is_null","thisLocalIndex","codeLocation","messageArg","filenameArg","isInteger","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","isConstant","isVoid","ctz","popcnt","rotl","rotr","abs","floor","copysign","nearest","reinterpret","sqrt","trunc","atomic_load","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","atomic_cmpxchg","atomic_wait","atomic_notify","atomic_fence","sizeof","alignof","offsetof","nameof","lengthof","select","instantiate","idof","i32_clz","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_xor_u","i32_atomic_rmw16_xor_u","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_splat","v128_extract_lane","v128_replace_lane","v128_shuffle","v128_swizzle","v128_load_splat","v128_load_ext","v128_load","v128_store","v128_add","v128_sub","v128_mul","v128_div","v128_neg","v128_add_saturate","v128_sub_saturate","v128_shl","v128_shr","v128_and","v128_or","v128_xor","v128_andnot","v128_not","v128_bitselect","v128_any_true","v128_all_true","v128_min","v128_max","v128_dot","v128_avgr","v128_abs","v128_sqrt","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","v128_convert","v128_trunc_sat","v128_narrow","v128_widen_low","v128_widen_high","v128_qfma","v128_qfms","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_min_s","i8x16_min_u","i8x16_max_s","i8x16_max_u","i8x16_avgr_u","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i8x16_narrow_i16x8_s","i8x16_narrow_i16x8_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_min_s","i16x8_min_u","i16x8_max_s","i16x8_max_u","i16x8_avgr_u","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i16x8_narrow_i32x4_s","i16x8_narrow_i32x4_u","i16x8_widen_low_i8x16_s","i16x8_widen_low_i8x16_u","i16x8_widen_high_i8x16_s","i16x8_widen_high_i8x16_u","i16x8_load8x8_s","i16x8_load8x8_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_min_s","i32x4_min_u","i32x4_max_s","i32x4_max_u","i32x4_dot_i16x8_s","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_sat_f32x4_s","i32x4_trunc_sat_f32x4_u","i32x4_widen_low_i16x8_s","i32x4_widen_low_i16x8_u","i32x4_widen_high_i16x8_s","i32x4_widen_high_i16x8_u","i32x4_load16x4_s","i32x4_load16x4_u","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_sat_f64x2_s","i64x2_trunc_sat_f64x2_u","i64x2_load32x2_s","i64x2_load32x2_u","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_i32x4_s","f32x4_convert_i32x4_u","f32x4_qfma","f32x4_qfms","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_i64x2_s","f64x2_convert_i64x2_u","f64x2_qfma","f64x2_qfms","v8x16_shuffle","v8x16_swizzle","v8x16_load_splat","v16x8_load_splat","v32x4_load_splat","v64x2_load_splat","visit_globals","visit_members","isNaN","isFinite","memory_size","memory_grow","memory_copy","memory_fill","builtin_clz","checkTypeOptional","checkArgsRequired","ClzI64","Operation_0_cannot_be_applied_to_type_1","typeArgumentsRange","builtin_ctz","CtzI64","builtin_popcnt","PopcntI64","builtin_rotl","RotlI32","RotlI64","builtin_rotr","RotrI32","RotrI64","builtin_abs","AbsF32","AbsF64","builtin_max","MaxF32","MaxF64","builtin_min","MinF32","MinF64","builtin_ceil","CeilF32","CeilF64","builtin_floor","FloorF32","FloorF64","builtin_copysign","CopysignF32","CopysignF64","builtin_nearest","NearestF32","NearestF64","builtin_reinterpret","checkTypeRequired","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","builtin_sqrt","SqrtF32","SqrtF64","builtin_trunc","TruncF32","TruncF64","builtin_load","checkArgsOptional","immAlign","outType","immOffset","evaluateImmediateOffset","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","builtin_store","inType","builtin_atomic_load","checkFeatureEnabled","builtin_atomic_store","builtin_atomic_binary","opName","atomic_rmw","builtin_atomic_add","Add","builtin_atomic_sub","Sub","builtin_atomic_and","And","builtin_atomic_or","Or","builtin_atomic_xor","Xor","builtin_atomic_xchg","Xchg","builtin_atomic_cmpxchg","builtin_atomic_wait","builtin_diagnostic","checkTypeAbsent","User_defined_0","builtin_conversion","builtin_i8x16","Expression_must_be_a_compile_time_constant","builtin_v128_splat","SplatI8x16","SplatI16x8","SplatI32x4","SplatI64x2","SplatF32x4","SplatF64x2","builtin_v128_extract_lane","maxIdx","simd_extract","ExtractLaneI8x16","ExtractLaneU8x16","ExtractLaneI16x8","ExtractLaneU16x8","ExtractLaneI32x4","ExtractLaneI64x2","ExtractLaneF32x4","ExtractLaneF64x2","builtin_v128_replace_lane","simd_replace","ReplaceLaneI8x16","ReplaceLaneI16x8","ReplaceLaneI32x4","ReplaceLaneI64x2","ReplaceLaneF32x4","ReplaceLaneF64x2","builtin_v128_shuffle","laneWidth","laneCount","argN","off8","idx8","simd_shuffle","builtin_v128_swizzle","SwizzleV8x16","builtin_v128_load_splat","simd_load","LoadSplatV8x16","LoadSplatV16x8","LoadSplatV32x4","LoadSplatV64x2","builtin_v128_load_ext","LoadI8ToI16x8","LoadU8ToU16x8","LoadI16ToI32x4","LoadU16ToU32x4","LoadI32ToI64x2","LoadU32ToU64x2","builtin_v128_add","AddI8x16","AddI16x8","AddI32x4","AddI64x2","AddF32x4","AddF64x2","builtin_v128_sub","SubI8x16","SubI16x8","SubI32x4","SubI64x2","SubF32x4","SubF64x2","builtin_v128_mul","MulI8x16","MulI16x8","MulI32x4","MulF32x4","MulF64x2","builtin_v128_div","DivF32x4","DivF64x2","builtin_v128_add_saturate","AddSatI8x16","AddSatU8x16","AddSatI16x8","AddSatU16x8","builtin_v128_sub_saturate","SubSatI8x16","SubSatU8x16","SubSatI16x8","SubSatU16x8","builtin_v128_min","MinI8x16","MinU8x16","MinI16x8","MinU16x8","MinI32x4","MinU32x4","MinF32x4","MinF64x2","builtin_v128_max","MaxI8x16","MaxU8x16","MaxI16x8","MaxU16x8","MaxI32x4","MaxU32x4","MaxF32x4","MaxF64x2","builtin_v128_dot","DotI16x8","builtin_v128_avgr","AvgrU8x16","AvgrU16x8","builtin_v128_eq","EqI16x8","EqI32x4","EqF32x4","EqF64x2","builtin_v128_ne","NeI16x8","NeI32x4","NeF32x4","NeF64x2","builtin_v128_lt","LtI8x16","LtU8x16","LtI16x8","LtU16x8","LtI32x4","LtU32x4","LtF32x4","LtF64x2","builtin_v128_le","LeI8x16","LeU8x16","LeI16x8","LeU16x8","LeI32x4","LeU32x4","LeF32x4","LeF64x2","builtin_v128_gt","GtI8x16","GtU8x16","GtI16x8","GtU16x8","GtI32x4","GtU32x4","GtF32x4","GtF64x2","builtin_v128_ge","GeI8x16","GeU8x16","GeI16x8","GeU16x8","GeI32x4","GeU32x4","GeF32x4","GeF64x2","builtin_v128_narrow","NarrowI16x8ToI8x16","NarrowU16x8ToU8x16","NarrowI32x4ToI16x8","NarrowU32x4ToU16x8","builtin_v128_neg","NegI8x16","NegI16x8","NegI32x4","NegI64x2","NegF32x4","NegF64x2","builtin_v128_abs","AbsF32x4","AbsF64x2","builtin_v128_sqrt","SqrtF32x4","SqrtF64x2","builtin_v128_convert","ConvertI32x4ToF32x4","ConvertU32x4ToF32x4","ConvertI64x2ToF64x2","ConvertU64x2ToF64x2","builtin_v128_trunc_sat","TruncSatF32x4ToI32x4","TruncSatF32x4ToU32x4","TruncSatF64x2ToI64x2","TruncSatF64x2ToU64x2","builtin_v128_widen_low","WidenLowI8x16ToI16x8","WidenLowU8x16ToU16x8","WidenLowI16x8ToI32x4","WidenLowU16x8ToU32x4","builtin_v128_widen_high","WidenHighI8x16ToI16x8","WidenHighU8x16ToU16x8","WidenHighI16x8ToI32x4","WidenHighU16x8ToU32x4","builtin_v128_shl","simd_shift","ShlI8x16","ShlI16x8","ShlI32x4","ShlI64x2","builtin_v128_shr","ShrI8x16","ShrU8x16","ShrI16x8","ShrU16x8","ShrI32x4","ShrU32x4","ShrI64x2","ShrU64x2","builtin_v128_bitwise_binary","builtin_v128_any_true","AnyTrueI16x8","AnyTrueI32x4","AnyTrueI64x2","builtin_v128_all_true","AllTrueI16x8","AllTrueI32x4","AllTrueI64x2","builtin_v128_qfma","simd_ternary","QFMAF32x4","QFMAF64x2","builtin_v128_qfms","QFMSF32x4","QFMSF64x2","typeToRuntimeFlags","evaluateConstantType","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","contextualUsize","firstOperand","classMembers","Type_0_has_no_property_1","resultType","host","MemorySize","MemoryGrow","isChangeableTo","Type_0_cannot_be_changed_to_type_1","alreadyUnchecked","off","AndV128","OrV128","XorV128","AndNotV128","builtin_v128_bitwise_unary","NotV128","builtin_v128_bitwise_ternary","Bitselect","nativeSizeSize","blocks","outer","addBlockWithSwitch","lastId","visitImpl","instanceId","isDeclaredInLibrary","visitFunc","visitSig","visitThisType","fieldOffset","addBlock","addBranchForSwitch","addBranch","renderAndDispose","abvPrototype","getArrayValueType","backlog","seenlog","donelog","dependees","tryParseSignatureIsSignature","parseParametersThis","isEntry","USER","currentSource","tn","parseTopLevelStatement","finish","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","peek","parseEnum","parseVariable","parseFunction","mark","reset","parseStatement","discard","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","skipIdentifier","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","createExportDefaultStatement","dependent","readIdentifier","Identifier_expected","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","parseType","parseTypeName","nullable","parameter","bracketStart","bracketRange","isSignature","firstParamNameNoType","firstParamKind","A_rest_parameter_cannot_be_optional","OPTIONAL","param","createPropertyAccessExpression","createDecorator","parseArguments","isFor","parseVariableDeclaration","createVariableStatement","parentFlags","parentDecorators","isIllegalVariableIdentifier","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","createEnumDeclaration","createEnumValueDeclaration","createReturnStatement","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","createTypeParameter","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","createParameter","signatureStart","parseTypeParameters","parseParameters","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","createEmptyIdentifierExpression","parseFunctionExpressionCommon","bodyExpression","createExpressionStatement","createFunctionExpression","isInterface","Interface_declaration_cannot_have_implements_clause","createInterfaceDeclaration","createClassDeclaration","parseClassMember","createClassExpression","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","createConstructorExpression","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","createFieldDeclaration","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","createMethodDeclaration","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","createIndexSignatureDeclaration","parseExportMember","createStringLiteralExpression","createExportStatement","asIdentifier","createExportMember","skipFrom","parseImportDeclaration","createImportDeclaration","createImportStatementWithWildcard","createImportStatement","createExportImportStatement","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseReturn","createEmptyStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","createBlockStatement","createBreakStatement","createContinueStatement","createDoStatement","parseForOfStatement","The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer","createForStatement","createForOfStatement","elseStatement","createIfStatement","switchCases","switchCase","parseSwitchCase","createSwitchStatement","createSwitchCase","_case_or_default_expected","createThrowStatement","createTryStatement","createVoidStatement","createWhileStatement","createUnaryPrefixExpression","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","arguments_","tryParseTypeArgumentsBeforeArguments","createNewExpression","createNullExpression","createTrueExpression","createFalseExpression","createThisExpression","again","parseFunctionExpression","inner","createParenthesizedExpression","maybeParseCallExpression","createArrayLiteralExpression","createObjectLiteralExpression","createAssertionExpression","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","createSuperExpression","createIntegerLiteralExpression","readInteger","createFloatLiteralExpression","readFloat","regexpPattern","readRegexpPattern","createRegexpLiteralExpression","readRegexpFlags","parseClassExpression","Expression_expected","Type_argument_list_cannot_be_empty","precedence","parseExpressionStart","nextPrecedence","determinePrecedence","createInstanceOfExpression","createElementAccessExpression","createUnaryPostfixExpression","createTernaryExpression","commaExprs","createCommaExpression","joinPropertyCall","createBinaryExpression","callee","potentiallyGeneric","createCallExpression","skipBlock","depth","Precedence","ExportsWalker","includePrivate","visitFile","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","visitFunction","hasCompiledMember","visitNamespace","visitAlias","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","i64_to_string","walk","TSDBuilder","remainingMembers","globalScope","ASC_FEATURE_MUTABLE_GLOBAL","UnreachableError","captureStackTrace","AssertionError","defaultComparator","nanA","nanB","defineProperties","writable","fround","clz32","round","x","y","sign","isTrueish","apply","fromCodePoint","replaceAll","search","replacment","res","split","arraySort","sort","comparator","Number","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","exp2","unmanaged","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","map","keys","formatDiagnostic","formatDiagnosticMessage","Options","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBALS","FEATURE_NONTRAPPING_F2I","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","FEATURE_EXCEPTION_HANDLING","FEATURE_TAIL_CALLS","FEATURE_REFERENCE_TYPES","FEATURE_MULTI_VALUE","optimizeLevel","shrinkLevel","getSource","parseFile","nextFile","getDependee","cls","util","readI32","readI64","valueI64","cloned","v","overrides","ipos","dirname","origin","CharCode","c0","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal"],"mappings":"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,KACjC,MAEF,KAAK,IACH,GAAY,SAAR1yB,EAAiB,OAAO8V,EAAM6c,MAItC,OAAO7c,EAAMH,QAGf,SAAgBid,EAAsB/c,GACpC,OAAQA,GACN,KAAKC,EAAMsP,SACX,KAAKtP,EAAMkb,GACX,KAAKlb,EAAMlQ,YACX,KAAKkQ,EAAMwR,QACX,KAAKxR,EAAMyb,OACX,KAAKzb,EAAM6b,KACX,KAAK7b,EAAMlJ,IACX,KAAKkJ,EAAM8O,IACX,KAAK9O,EAAMrP,WACX,KAAKqP,EAAMgc,GACX,KAAKhc,EAAMic,MACX,KAAKjc,EAAMmc,OACX,KAAKnc,EAAMqT,UACX,KAAKrT,EAAM9O,KACX,KAAK8O,EAAMqP,SACX,KAAKrP,EAAM+O,IACX,KAAK/O,EAAMyc,KACX,KAAKzc,EAAM1G,KAAM,OAAO,EACxB,QAAS,OAAO,IAlSpB,SAAY0G,GAKV,2BACA,eACA,qBACA,qBACA,qBACA,mBACA,qBACA,qBACA,qBACA,2BACA,kCACA,4BACA,0BACA,0BACA,wBACA,gBACA,oBACA,oBACA,wBACA,0BACA,sBACA,0BACA,kBACA,oBACA,4BACA,kBACA,gBACA,gCACA,wBACA,gBACA,gCACA,8BACA,gBACA,sBACA,kBACA,wBACA,8BACA,kBACA,oBACA,gBACA,0BACA,0BACA,8BACA,wBACA,4BACA,wBACA,kBACA,wBACA,sBACA,wBACA,oBACA,sBACA,oBACA,kBACA,oBACA,wBACA,kBACA,oBACA,sBACA,oBACA,sBAIA,8BACA,gCACA,8BACA,gCACA,kCACA,oCACA,kBACA,kCACA,8BACA,sBACA,4BACA,kCACA,0CACA,gDACA,sCACA,gDACA,oDACA,8DACA,gDACA,oBACA,sBACA,8CACA,4BACA,sBACA,0BACA,8BACA,kCACA,8CACA,0DACA,kFACA,8BACA,kBACA,sBACA,kCACA,sBACA,kDACA,0BACA,4BACA,sBACA,yBACA,mCACA,qCACA,2CACA,6DACA,qCACA,yCACA,6DACA,yEACA,iGACA,6CACA,iCACA,qCACA,iBAIA,iCACA,uCACA,yCACA,qCAIA,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EAAOjM,KAAK2L,OAAOM,KAiBvB,OAhBIjM,KAAKoe,KAAO/R,GACdrM,KAAKupB,MACH,EAAAze,eAAe+3B,uBACf7iC,KAAKoL,MAAMgB,EAAOC,IAEpBy4B,GAAU,GAC4B,KAA7B74B,EAAKM,WAAWvM,KAAKoe,OAC5Bpe,KAAKoe,KAEPpe,KAAKupB,MACH,EAAAze,eAAem6B,qCACfjlC,KAAKoL,MAAMgB,EAAOpM,KAAKoe,MAEzB0mB,GAAU,GAGRA,EAAgB,GACbF,EAAU,MACbn9B,OAAOw7B,aAAa2B,GACpBn9B,OAAOw7B,aACL2B,EAAU,QAAa,GAAM,MAC7BA,EAAU,MAAW,KAAQ,OAIrC,WArmCF,cA0mCA,MAAapC,GAAb,UAUA,IAAID,EAA8B,M,8ECvjDlC,aACA,QAmBA,IAAY2C,EAeAC,EAeAC,EA21DAC,GAz3DZ,SAAYH,GACV,mBACA,iCACA,iBACA,iBACA,iBACA,iBACA,mBACA,yBACA,uBACA,yBACA,wBACA,oBAZF,CAAYA,EAAA,EAAAA,aAAA,EAAAA,WAAU,KAetB,SAAYC,GACV,iBACA,yBACA,uCACA,+CACA,yBACA,gCACA,0BACA,8CACA,6BACA,yCACA,iCACA,oBAZF,CAAYA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KAexB,SAAYC,GACV,yBACA,qBACA,eACA,mBACA,qBACA,uBACA,mBACA,mCACA,2BACA,2BACA,8BACA,8BACA,oBACA,sBACA,sBACA,sBACA,wBACA,wBACA,oBACA,wBACA,oBACA,kBACA,kCACA,sCACA,8BACA,gCACA,oCACA,kCACA,kCACA,kCACA,kCACA,kCACA,8BACA,4BACA,gCACA,4BACA,gCACA,gCACA,oBACA,kBACA,0BACA,8BACA,0BACA,kBACA,sBACA,0BACA,0BA/CF,CAAYA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KAkDxB,SAAYE,GACV,uBACA,uBACA,uBACA,uBACA,6BACA,6BACA,uBACA,uBACA,uBACA,uBACA,0BACA,0BACA,4BACA,4BACA,4BACA,4BACA,gCACA,gCACA,0BACA,0BACA,wBACA,wBACA,8BACA,8BACA,0BACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,wCACA,wCACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,gCACA,8BACA,wCACA,wCAGA,sCACA,wCACA,sCACA,wCACA,wCAGA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CAGA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,0BACA,4BACA,oCACA,oCACA,4BACA,oCACA,oCACA,4BACA,oCACA,oCACA,4BACA,oCACA,oCACA,4BACA,4BACA,8BACA,4BACA,4BACA,8BACA,oDACA,oDACA,oDACA,oDACA,kDACA,kDACA,kDACA,kDACA,oDACA,sDACA,oDACA,sDACA,oDACA,sDACA,oDACA,uDA3GF,CAAY,EAAAA,UAAA,EAAAA,QAAO,KA8GnB,SAAYC,GACV,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,qBACA,uBACA,wBACA,wBACA,wBACA,0BACA,0BACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,sBACA,wBACA,wBACA,wBACA,wBACA,0BACA,0BACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,kCACA,wBACA,wBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,kCACA,wBACA,wBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBAGA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,yBACA,2BACA,iCACA,6BACA,mCACA,mCACA,6BACA,mCACA,mCACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,6BACA,mCACA,mCACA,6BACA,mCACA,mCACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,iDACA,iDACA,iDACA,iDACA,qCA/KF,CAAY,EAAAA,WAAA,EAAAA,SAAQ,KAkLpB,SAAYC,GACV,+BACA,+BAFF,CAAY,EAAAA,SAAA,EAAAA,OAAM,KAKlB,SAAYC,GACV,iBACA,iBACA,iBACA,eACA,iBACA,mBANF,CAAY,EAAAA,cAAA,EAAAA,YAAW,KASvB,SAAYC,GACV,2CACA,2CACA,2CACA,2CACA,2CACA,2CACA,2CACA,2CARF,CAAY,EAAAA,gBAAA,EAAAA,cAAa,KAWzB,SAAYC,GACV,2CACA,2CACA,2CACA,2CACA,2CACA,2CANF,CAAY,EAAAA,gBAAA,EAAAA,cAAa,KASzB,SAAYC,GACV,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,4BACA,4BAZF,CAAY,EAAAA,cAAA,EAAAA,YAAW,KAevB,SAAYC,GACV,6BACA,6BACA,6BACA,6BACA,6BALF,CAAY,EAAAA,gBAAA,EAAAA,cAAa,KAQzB,SAAYC,GACV,uCACA,uCACA,uCACA,uCACA,qCACA,qCACA,uCACA,uCACA,uCACA,uCAVF,CAAY,EAAAA,aAAA,EAAAA,WAAU,KAatB,MAAaC,EAKX,cAAcpgB,EAAoBC,GAChC,IAAIogB,EAAU,IAAID,EAGlB,OAFAC,EAAQrgB,OAASA,EACjBqgB,EAAQpgB,OAASA,EACVogB,GATX,kBAaA,MAAaC,EAsBX,cA4jBQ,KAAAC,sBAA6B,EAmU7B,KAAAC,sBAA+B,EAsE/B,KAAAC,cAAmC,IAAIv+B,IAr9B/C,gB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MjB,IAAI8yB,EAAYj0B,EAAUi0B,UAC1B,GAAkB,OAAdA,GAAsBA,EAAU2V,KAAO,EAEzC,IAAK,IAAIxe,EAAUC,WAAW4I,GAAY71B,EAAI,EAAGwb,EAAIwR,EAAQlhB,OAAQ9L,EAAIwb,IAAKxb,EAAG,CAC/E,IAAIozB,EAAWtK,UAAUkE,EAAQhtB,IACjC0pC,EAAMr9B,KACJ/M,EAAO48D,GACL58D,EAAOa,KAAKysB,EAAmB3H,aAAc,CAC3C3lB,EAAOwjE,UAAU,EAAGa,GACpBrkE,EAAOyD,IAAIqwB,EAAS5N,KACnB,EAAAqf,WAAWt+B,KACdjH,EAAO88D,OACL98D,EAAOyD,IAAI,MAQrB2mC,EAAMr9B,KACJ/M,EAAO88D,OACL98D,EAAOyD,IAAI,KAIfzD,EAAOi9D,YAAY36D,EAAUqjB,aAAe,cAAe0+C,EAAgB,EAAA9+B,WAAWt+B,IAAK,KAAMjH,EAAOo9D,QAAQhzB,M,8ECxyPlH,SAAYj/B,GACV,2CACA,mDACA,yCACA,6DACA,iJACA,uHACA,iMACA,iFACA,2FACA,2EACA,yEACA,2EACA,yIACA,uGACA,6EACA,6DACA,6FACA,uEACA,mDACA,+EACA,mGACA,uHACA,6FACA,2JACA,uFACA,iGACA,qHACA,qGACA,+DACA,iEACA,iGACA,uFACA,6IACA,uIACA,uIACA,+GACA,iGACA,oEACA,oDACA,oCACA,8FACA,kEACA,8CACA,gHACA,oHACA,8HACA,0GACA,8GACA,4EACA,oFACA,oGACA,0GACA,oHACA,wFACA,gFACA,kIACA,kIACA,4FACA,oHACA,oFACA,kFACA,wKACA,sLACA,kIACA,oDACA,wCACA,oJACA,gDACA,kGACA,wGACA,0CACA,kEACA,0DACA,gDACA,gEACA,sIACA,4IACA,0DACA,4DACA,wEACA,sDACA,4FACA,4FACA,oHACA,wDACA,sDACA,8HACA,gKACA,oKACA,sFACA,wEACA,sKACA,sJACA,8IACA,wFACA,0IACA,0DACA,kDACA,gFACA,gGACA,wDACA,kFACA,sFACA,0GACA,8GACA,wMACA,oFACA,0NACA,sFACA,0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,EAAM,GACb,GA7Gc,IA6GVxS,EAAeW,WAAW6R,GAC5B,OAAOxS,EAAea,UAAU,EAAG2R,GAGvC,MAAO,IA3GT,kBAoFA,uBAA4BxS,EAAwB49G,GAClD,OAAI59G,EAAegL,WAAW,QACrBhL,EAEF+K,EACL4yG,EAAQC,GAAU,EAAAlnH,eAAiBsJ,IAKvC,a,8EC3GA,SAAkB69G,GAEhB,mBACA,4BACA,wCACA,wCACA,kDACA,6BAEA,sBACA,6CACA,0BACA,0BACA,4BACA,4BACA,4CACA,0CACA,wCACA,oCACA,8CACA,gCACA,gCACA,0CACA,kDACA,+CACA,gDACA,wBAEA,cAEA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBAEA,cACA,cACA,cACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eAEA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cAEA,8BACA,4BACA,gBACA,8BACA,4BACA,mBACA,sBACA,iCACA,oCACA,gCACA,sBACA,sBACA,wBACA,kBACA,kCACA,wBACA,kCACA,kCACA,oBACA,4BACA,sBACA,+BACA,kCACA,8BACA,0BACA,oBACA,4BACA,8BACA,kCACA,sBACA,uBAEA,6BACA,4BACA,yCACA,iBACA,kCAnIF,CAAkB,EAAAA,WAAA,EAAAA,SAAQ,KAuI1B,uBAA4B/oH,GAC1B,OAAQA,GACN,KAAK,GACL,KAAK,GACL,KAAK,KACL,KAAK,KACH,OAAO,EAET,QACE,OAAO,IAMb,wBAA6BA,GAC3B,OAAQA,GACN,KAAK,GACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,IACL,KAAK,IACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,MACL,KAAK,MACH,OAAO,EAET,QACE,OAAOA,GAAK,MAAmBA,GAAK,OAM1C,0BAA+BA,GAC7B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,wBAA6BA,GAC3B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,6BAAkCA,GAChC,MAAMgpH,EAAS,GAAJhpH,EACX,OAAOgpH,GAAM,IAAcA,GAAM,KACrB,IAALhpH,GACK,IAALA,GACAA,EAAI,SAmLqBwK,EAnLYxK,GAoL9B,KAAOwK,EAAO,QACrBy+G,EAAmBz+G,EAAa0+G,IAFzC,IAAkC1+G,GA/KlC,8BAAmCxK,GACjC,OAAOA,GAAK,IAAcA,GAAK,KAIjC,4BAAiCA,GAC/B,MAAMgpH,EAAS,GAAJhpH,EACX,OAAOgpH,GAAM,IAAcA,GAAM,KAC1BhpH,GAAK,IAAeA,GAAK,IACpB,IAALA,GACK,IAALA,GACAA,EAAI,SAyKoBwK,EAzKYxK,GA0K7B,KAAOwK,EAAO,QACrBy+G,EAAmBz+G,EAAa2+G,IAFzC,IAAiC3+G,GArKjC,MAAM0+G,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAG1D,SAASF,EAAmBz+G,EAAWu8G,GACrC,GAAIv8G,EAAOu8G,EAAI,GAAI,OAAO,EAO1B,IALA,IAEIqC,EACAC,EAHA3L,EAAK,EACLC,EAAKoJ,EAAIt7G,OAINiyG,EAAK,EAAIC,GAAI,CAIlB,GAHAyL,EAAM1L,GAAOC,EAAKD,GAAO,IAEzB2L,EAAStC,EADTqC,GAAc,EAANA,KAEM5+G,GAAQA,GAAQu8G,EAAIqC,EAAM,GACtC,OAAO,EAEL5+G,EAAO6+G,EACT1L,EAAKyL,EAEL1L,EAAK0L,EAAM,EAGf,OAAO,EAkBT,kBAAuBt9G,EAAcwkC,GACnC,KAAOA,GAAS,GACdxkC,EAAGE,KALU,YAMbskC,GAAS,EAEPA,GAAS,IACXxkC,EAAGE,KAVU,QAWbskC,GAAS,GAEPA,GACFxkC,EAAGE,KAfU","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__20__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","/**\n * @fileoverview Common constants used by various parts of the compiler.\n * @license Apache-2.0\n */\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is (part of) a closure. */\n  CLOSURE = 1 << 27,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common names. */\nexport namespace CommonNames {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const anyref = \"anyref\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  export const returnof = \"returnof\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_TABLE_BASE = \"ASC_TABLE_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\n  export const ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  export const ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\n  export const ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\n  export const ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\n  export const ASC_FEATURE_MULTI_VALUE = \"ASC_FEATURE_MULTI_VALUE\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const Anyref = \"Anyref\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const StaticArray = \"StaticArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  export const Error = \"Error\";\n  // runtime\n  export const abort = \"abort\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const allocBuffer = \"__allocBuffer\";\n  export const allocArray = \"__allocArray\";\n}\n\n// shared\nexport { Feature, featureToString } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * @fileoverview Various utility.\n * @license Apache-2.0\n */\n\nexport * from \"./binary\";\nexport * from \"./collections\";\nexport * from \"./math\";\nexport * from \"./path\";\nexport * from \"./text\";\n","/**\n * @fileoverview Shared diagnostic handling.\n * @license Apache-2.0\n */\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  Source\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Overly pedantic message. */\n  PEDANTIC,\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return \"PEDANTIC\";\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence for magenta foreground. */\nexport const COLOR_MAGENTA: string = \"\\u001b[95m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return COLOR_MAGENTA;\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 !== null) message = message.replace(\"{0}\", arg0);\n    if (arg1 !== null) message = message.replace(\"{1}\", arg1);\n    if (arg2 !== null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    var range = this.range;\n    if (range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString() +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        range.source.normalizedPath +\n        \":\" +\n        range.line.toString() +\n        \":\" +\n        range.column.toString()\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString() +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString());\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  var range = message.range;\n  if (range) {\n\n    // include context information if requested\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString());\n    sb.push(\",\");\n    sb.push(range.column.toString());\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(relatedRange.source.normalizedPath);\n      sb.push(\"(\");\n      sb.push(relatedRange.line.toString());\n      sb.push(\",\");\n      sb.push(relatedRange.column.toString());\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n  /** Diagnostic messages already seen, by range. */\n  private seen: Map<Source,Map<i32,i32[]>> = new Map();\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range | null,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    // It is possible that the same diagnostic is emitted twice, for example\n    // when compiling generics with different types or when recompiling a loop\n    // because our initial assumptions didn't hold. It is even possible to get\n    // multiple instances of the same range during parsing. Deduplicate these.\n    if (range) {\n      let seen = this.seen;\n      if (seen.has(range.source)) {\n        let seenInSource = assert(seen.get(range.source));\n        if (seenInSource.has(range.start)) {\n          let seenCodesAtPos = assert(seenInSource.get(range.start));\n          if (seenCodesAtPos.includes(code)) return;\n          seenCodesAtPos.push(code);\n        } else {\n          seenInSource.set(range.start, [ code ]);\n        }\n      } else {\n        let seenInSource = new Map<i32,i32[]>();\n        seenInSource.set(range.start, [ code ]);\n        seen.set(range.source, seenInSource);\n      }\n    }\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2);\n    if (range) message = message.withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an overly pedantic diagnostic message. */\n  pedantic(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an overly pedantic diagnostic message with a related range. */\n  pedanticRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * @fileoverview Abstract syntax tree representing a source file once parsed.\n *\n * Each node in the AST is represented by an instance of a subclass of `Node`,\n * with its `Node#kind` represented by one of the `NodeKind` constants, which\n * dependent code typically switches over. The intended way to create a node\n * is to use the respective `Node.createX` method instead of its constructor.\n *\n * Note that the AST does not contain any type information except type names.\n *\n * @license Apache-2.0\n */\n\n// TODO: Make the AST more easily serializable by refactoring `Node#range` so\n// it doesn't reference the non-serializable `Source` object.\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX,\n  LIBRARY_SUBST\n} from \"./common\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  FOROF,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var node = new TypeName();\n    node.kind = NodeKind.TYPENAME;\n    node.range = range;\n    node.identifier = name;\n    node.next = null;\n    return node;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    var node = new NamedTypeNode();\n    node.kind = NodeKind.NAMEDTYPE;\n    node.range = range;\n    node.name = name;\n    node.typeArguments = typeArguments;\n    node.isNullable = isNullable;\n    return node;\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    var node = new FunctionTypeNode();\n    node.kind = NodeKind.FUNCTIONTYPE;\n    node.range = range;\n    node.parameters = parameters;\n    node.returnType = returnType;\n    node.explicitThisType = explicitThisType;\n    node.isNullable = isNullable;\n    return node;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return Node.createNamedType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var node = new TypeParameterNode();\n    node.kind = NodeKind.TYPEPARAMETER;\n    node.range = range;\n    node.name = name;\n    node.extendsType = extendsType;\n    node.defaultType = defaultType;\n    return node;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var node = new ParameterNode();\n    node.kind = NodeKind.PARAMETER;\n    node.range = range;\n    node.name = name;\n    node.type = type;\n    node.initializer = initializer;\n    node.parameterKind = kind;\n    return node;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var node = new DecoratorNode();\n    node.kind = NodeKind.DECORATOR;\n    node.range = range;\n    node.name = name;\n    node.arguments = args;\n    node.decoratorKind = DecoratorKind.fromNode(name);\n    return node;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.kind = NodeKind.COMMENT;\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var node = new IdentifierExpression();\n    node.kind = NodeKind.IDENTIFIER;\n    node.range = range;\n    node.text = name;\n    node.isQuoted = isQuoted;\n    return node;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var node = new IdentifierExpression();\n    node.kind = NodeKind.IDENTIFIER;\n    node.range = range;\n    node.text = \"\";\n    return node;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var node = new ArrayLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.range = range;\n    node.literalKind = LiteralKind.ARRAY;\n    node.elementExpressions = elements;\n    return node;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var node = new AssertionExpression();\n    node.kind = NodeKind.ASSERTION;\n    node.range = range;\n    node.assertionKind = assertionKind;\n    node.expression = expression;\n    node.toType = toType;\n    return node;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var node = new BinaryExpression();\n    node.kind = NodeKind.BINARY;\n    node.range = range;\n    node.operator = operator;\n    node.left = left;\n    node.right = right;\n    return node;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var node = new CallExpression();\n    node.kind = NodeKind.CALL;\n    node.range = range;\n    node.expression = expression;\n    node.typeArguments = typeArgs;\n    node.arguments = args;\n    return node;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var node = new ClassExpression();\n    node.kind = NodeKind.CLASS;\n    node.range = declaration.range;\n    node.declaration = declaration;\n    return node;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var node = new CommaExpression();\n    node.kind = NodeKind.COMMA;\n    node.range = range;\n    node.expressions = expressions;\n    return node;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var node = new ConstructorExpression();\n    node.kind = NodeKind.CONSTRUCTOR;\n    node.range = range;\n    node.text = \"constructor\";\n    return node;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var node = new ElementAccessExpression();\n    node.kind = NodeKind.ELEMENTACCESS;\n    node.range = range;\n    node.expression = expression;\n    node.elementExpression = element;\n    return node;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var node = new FalseExpression();\n    node.kind = NodeKind.FALSE;\n    node.range = range;\n    node.text = \"false\";\n    return node;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var node = new FloatLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.literalKind = LiteralKind.FLOAT;\n    node.range = range;\n    node.value = value;\n    return node;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var node = new FunctionExpression();\n    node.kind = NodeKind.FUNCTION;\n    node.range = declaration.range;\n    node.declaration = declaration;\n    return node;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var node = new InstanceOfExpression();\n    node.kind = NodeKind.INSTANCEOF;\n    node.range = range;\n    node.expression = expression;\n    node.isType = isType;\n    return node;\n  }\n\n  static createIntegerLiteralExpression(\n    value: i64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var node = new IntegerLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.literalKind = LiteralKind.INTEGER;\n    node.range = range;\n    node.value = value;\n    return node;\n  }\n\n  static createNewExpression(\n    typeName: TypeName,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var node = new NewExpression();\n    node.kind = NodeKind.NEW;\n    node.range = range;\n    node.typeName = typeName;\n    node.typeArguments = typeArgs;\n    node.arguments = args;\n    return node;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var node = new NullExpression();\n    node.kind = NodeKind.NULL;\n    node.range = range;\n    node.text = \"null\";\n    return node;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var node = new ObjectLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.literalKind = LiteralKind.OBJECT;\n    node.range = range;\n    node.names = names;\n    node.values = values;\n    return node;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var node = new ParenthesizedExpression();\n    node.kind = NodeKind.PARENTHESIZED;\n    node.range = range;\n    node.expression = expression;\n    return node;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var node = new PropertyAccessExpression();\n    node.kind = NodeKind.PROPERTYACCESS;\n    node.range = range;\n    node.expression = expression;\n    node.property = property;\n    return node;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var node = new RegexpLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.literalKind = LiteralKind.REGEXP;\n    node.range = range;\n    node.pattern = pattern;\n    node.patternFlags = flags;\n    return node;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var node = new TernaryExpression();\n    node.kind = NodeKind.TERNARY;\n    node.range = range;\n    node.condition = condition;\n    node.ifThen = ifThen;\n    node.ifElse = ifElse;\n    return node;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var node = new StringLiteralExpression();\n    node.kind = NodeKind.LITERAL;\n    node.literalKind = LiteralKind.STRING;\n    node.range = range;\n    node.value = value;\n    return node;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var node = new SuperExpression();\n    node.kind = NodeKind.SUPER;\n    node.range = range;\n    node.text = \"super\";\n    return node;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var node = new ThisExpression();\n    node.kind = NodeKind.THIS;\n    node.range = range;\n    node.text = \"this\";\n    return node;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var node = new TrueExpression();\n    node.kind = NodeKind.TRUE;\n    node.range = range;\n    node.text = \"true\";\n    return node;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var node = new UnaryPostfixExpression();\n    node.kind = NodeKind.UNARYPOSTFIX;\n    node.range = range;\n    node.operator = operator;\n    node.operand = operand;\n    return node;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var node = new UnaryPrefixExpression();\n    node.kind = NodeKind.UNARYPREFIX;\n    node.range = range;\n    node.operator = operator;\n    node.operand = operand;\n    return node;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var node = new BlockStatement();\n    node.kind = NodeKind.BLOCK;\n    node.range = range;\n    node.statements = statements;\n    return node;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var node = new BreakStatement();\n    node.kind = NodeKind.BREAK;\n    node.range = range;\n    node.label = label;\n    return node;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var node = new ClassDeclaration();\n    node.kind = NodeKind.CLASSDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = identifier;\n    node.typeParameters = typeParameters;\n    node.extendsType = extendsType;\n    node.implementsTypes = implementsTypes;\n    node.members = members;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var node = new ContinueStatement();\n    node.kind = NodeKind.CONTINUE;\n    node.range = range;\n    node.label = label;\n    return node;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var node = new DoStatement();\n    node.kind = NodeKind.DO;\n    node.range = range;\n    node.statement = statement;\n    node.condition = condition;\n    return node;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var node = new EmptyStatement();\n    node.kind = NodeKind.EMPTY;\n    node.range = range;\n    return node;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var node = new EnumDeclaration();\n    node.kind = NodeKind.ENUMDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.values = members;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var node = new EnumValueDeclaration();\n    node.kind = NodeKind.ENUMVALUEDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.value = value;\n    return node;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var node = new ExportStatement();\n    node.kind = NodeKind.EXPORT;\n    node.range = range;\n    node.members = members;\n    node.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      node.internalPath = mangleInternalPath(normalizedPath);\n    } else {\n      node.internalPath = null;\n    }\n    node.isDeclare = isDeclare;\n    return node;\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    var node = new ExportDefaultStatement();\n    node.kind = NodeKind.EXPORTDEFAULT;\n    node.declaration = declaration;\n    node.range = range;\n    return node;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var node = new ExportImportStatement();\n    node.kind = NodeKind.EXPORTIMPORT;\n    node.range = range;\n    node.name = name;\n    node.externalName = externalName;\n    return node;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var node = new ExportMember();\n    node.kind = NodeKind.EXPORTMEMBER;\n    node.range = range;\n    node.localName = name;\n    if (!externalName) externalName = name;\n    node.exportedName = externalName;\n    return node;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var node = new ExpressionStatement();\n    node.kind = NodeKind.EXPRESSION;\n    node.range = expression.range;\n    node.expression = expression;\n    return node;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var node = new IfStatement();\n    node.kind = NodeKind.IF;\n    node.range = range;\n    node.condition = condition;\n    node.ifTrue = ifTrue;\n    node.ifFalse = ifFalse;\n    return node;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var node = new ImportStatement();\n    node.kind = NodeKind.IMPORT;\n    node.range = range;\n    node.declarations = decls;\n    node.namespaceName = null;\n    node.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    node.internalPath = mangleInternalPath(normalizedPath);\n    return node;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var node = new ImportStatement();\n    node.kind = NodeKind.IMPORT;\n    node.range = range;\n    node.declarations = null;\n    node.namespaceName = identifier;\n    node.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) {\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else {\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    node.internalPath = mangleInternalPath(normalizedPath);\n    return node;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var node = new ImportDeclaration();\n    node.kind = NodeKind.IMPORTDECLARATION;\n    node.range = range;\n    node.foreignName = foreignName;\n    if (!name) name = foreignName;\n    node.name = name;\n    return node;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var node = new InterfaceDeclaration();\n    node.kind = NodeKind.INTERFACEDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.typeParameters = typeParameters;\n    node.extendsType = extendsType;\n    node.members = members;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var node = new FieldDeclaration();\n    node.kind = NodeKind.FIELDDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.type = type;\n    node.initializer = initializer;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var node = new ForStatement();\n    node.kind = NodeKind.FOR;\n    node.range = range;\n    node.initializer = initializer;\n    node.condition = condition;\n    node.incrementor = incrementor;\n    node.statement = statement;\n    return node;\n  }\n\n  static createForOfStatement(\n    variable: Statement,\n    iterable: Expression,\n    statement: Statement,\n    range: Range\n  ): ForOfStatement {\n    var node = new ForOfStatement();\n    node.kind = NodeKind.FOROF;\n    node.range = range;\n    node.variable = variable;\n    node.iterable = iterable;\n    node.statement = statement;\n    return node;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var node = new FunctionDeclaration();\n    node.kind = NodeKind.FUNCTIONDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.typeParameters = typeParameters;\n    node.signature = signature;\n    node.body = body;\n    node.decorators = decorators;\n    node.arrowKind = arrowKind;\n    return node;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    flags: CommonFlags,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var node = new IndexSignatureDeclaration();\n    node.kind = NodeKind.INDEXSIGNATUREDECLARATION;\n    node.range = range;\n    node.keyType = keyType;\n    node.valueType = valueType;\n    node.flags = flags;\n    return node;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var node = new MethodDeclaration();\n    node.kind = NodeKind.METHODDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.typeParameters = typeParameters;\n    node.signature = signature;\n    node.body = body;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var node = new NamespaceDeclaration();\n    node.kind = NodeKind.NAMESPACEDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.members = members;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var node = new ReturnStatement();\n    node.kind = NodeKind.RETURN;\n    node.range = range;\n    node.value = value;\n    return node;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var node = new SwitchStatement();\n    node.kind = NodeKind.SWITCH;\n    node.range = range;\n    node.condition = condition;\n    node.cases = cases;\n    return node;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var node = new SwitchCase();\n    node.kind = NodeKind.SWITCHCASE;\n    node.range = range;\n    node.label = label;\n    node.statements = statements;\n    return node;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var node = new ThrowStatement();\n    node.kind = NodeKind.THROW;\n    node.range = range;\n    node.value = value;\n    return node;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var node = new TryStatement();\n    node.kind = NodeKind.TRY;\n    node.range = range;\n    node.statements = statements;\n    node.catchVariable = catchVariable;\n    node.catchStatements = catchStatements;\n    node.finallyStatements = finallyStatements;\n    return node;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: TypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var node = new TypeDeclaration();\n    node.kind = NodeKind.TYPEDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.typeParameters = typeParameters;\n    node.type = alias;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var node = new VariableStatement();\n    node.kind = NodeKind.VARIABLE;\n    node.range = range;\n    node.declarations = declarations;\n    node.decorators = decorators;\n    return node;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var node = new VariableDeclaration();\n    node.kind = NodeKind.VARIABLEDECLARATION;\n    node.range = range;\n    node.flags = flags;\n    node.name = name;\n    node.type = type;\n    node.initializer = initializer;\n    node.decorators = decorators; // inherited\n    return node;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var node = new VoidStatement();\n    node.kind = NodeKind.VOID;\n    node.range = range;\n    node.expression = expression;\n    return node;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var node = new WhileStatement();\n    node.kind = NodeKind.WHILE;\n    node.range = range;\n    node.condition = condition;\n    node.statement = statement;\n    return node;\n  }\n\n  /** Tests if this node is a literal of the specified kind. */\n  isLiteralKind(literalKind: LiteralKind): bool {\n    return this.kind == NodeKind.LITERAL\n        && (<LiteralExpression>changetype<Node>(this)).literalKind == literalKind; // TS\n  }\n\n  /** Tests if this node is a literal of a numeric kind (float or integer). */\n  get isNumericLiteral(): bool {\n    if (this.kind == NodeKind.LITERAL) {\n      switch ((<LiteralExpression>changetype<Node>(this)).literalKind) { // TS\n        case LiteralKind.FLOAT:\n        case LiteralKind.INTEGER: return true;\n      }\n    }\n    return false;\n  }\n\n  /** Tests whether this node is guaranteed to compile to a constant value. */\n  get compilesToConst(): bool {\n    switch (this.kind) {\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>changetype<Node>(this)).literalKind) { // TS\n          case LiteralKind.FLOAT:\n          case LiteralKind.INTEGER:\n          case LiteralKind.STRING: return true;\n        }\n        break;\n      }\n      case NodeKind.NULL:\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return true;\n    }\n    return false;\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n\n  /** Tests if this type has a generic component matching one of the given type parameters. */\n  hasGenericComponent(typeParameterNodes: TypeParameterNode[]): bool {\n    if (this.kind == NodeKind.NAMEDTYPE) {\n      let namedTypeNode = <NamedTypeNode>changetype<TypeNode>(this); // TS\n      if (!namedTypeNode.name.next) {\n        let typeArgumentNodes = namedTypeNode.typeArguments;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          for (let i = 0, k = typeArgumentNodes.length; i < k; ++i) {\n            if (typeArgumentNodes[i].hasGenericComponent(typeParameterNodes)) return true;\n          }\n        } else {\n          let name = namedTypeNode.name.identifier.text;\n          for (let i = 0, k = typeParameterNodes.length; i < k; ++i) {\n            if (typeParameterNodes[i].name.text == name) return true;\n          }\n        }\n      }\n    } else if (this.kind == NodeKind.FUNCTIONTYPE) {\n      let functionTypeNode = <FunctionTypeNode>changetype<TypeNode>(this); // TS\n      let parameterNodes = functionTypeNode.parameters;\n      for (let i = 0, k = parameterNodes.length; i < k; ++i) {\n        if (parameterNodes[i].type.hasGenericComponent(typeParameterNodes)) return true;\n      }\n      if (functionTypeNode.returnType.hasGenericComponent(typeParameterNodes)) return true;\n      let explicitThisType = functionTypeNode.explicitThisType;\n      if (explicitThisType !== null && explicitThisType.hasGenericComponent(typeParameterNodes)) return true;\n    } else {\n      assert(false);\n    }\n    return false;\n  }\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: TypeNode[] | null;\n\n  get hasTypeArguments(): bool {\n    var typeArguments = this.typeArguments;\n    return typeArguments !== null && typeArguments.length > 0;\n  }\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: TypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: TypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\nexport namespace DecoratorKind {\n\n  /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\n  export function fromNode(nameNode: Expression): DecoratorKind {\n    // @global, @inline, @operator, @sealed, @unmanaged\n    if (nameNode.kind == NodeKind.IDENTIFIER) {\n      let nameStr = (<IdentifierExpression>nameNode).text;\n      assert(nameStr.length);\n      switch (nameStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n          break;\n        }\n        case CharCode.e: {\n          if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n          break;\n        }\n        case CharCode.g: {\n          if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n          break;\n        }\n        case CharCode.i: {\n          if (nameStr == \"inline\") return DecoratorKind.INLINE;\n          break;\n        }\n        case CharCode.l: {\n          if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n          break;\n        }\n        case CharCode.o: {\n          if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n          break;\n        }\n        case CharCode.s: {\n          if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n          break;\n        }\n        case CharCode.u: {\n          if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n          if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n          break;\n        }\n      }\n    } else if (nameNode.kind == NodeKind.PROPERTYACCESS) {\n      let propertyAccessNode = <PropertyAccessExpression>nameNode;\n      let expression = propertyAccessNode.expression;\n      if (expression.kind == NodeKind.IDENTIFIER) {\n        let nameStr = (<IdentifierExpression>expression).text;\n        assert(nameStr.length);\n        let propStr = propertyAccessNode.property.text;\n        assert(propStr.length);\n        // @operator.binary, @operator.prefix, @operator.postfix\n        if (nameStr == \"operator\") {\n          switch (propStr.charCodeAt(0)) {\n            case CharCode.b: {\n              if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n              break;\n            }\n            case CharCode.p: {\n              if (propStr == \"prefix\") return DecoratorKind.OPERATOR_PREFIX;\n              if (propStr == \"postfix\") return DecoratorKind.OPERATOR_POSTFIX;\n              break;\n            }\n          }\n        }\n      }\n    }\n    return DecoratorKind.CUSTOM;\n  }\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  /** Textual name. */\n  text: string;\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL,\n  CONST\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: TypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments) {\n      if (numTypeArguments = typeArguments.length) {\n        return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n      }\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: TypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  /** Integer value. */\n  value: i64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends Expression {\n  /** Type being constructed. */\n  typeName: TypeName;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments !== null && (numTypeArguments = typeArguments.length) > 0) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** User-provided file. */\n  USER = 0,\n  /** User-provided entry file. */\n  USER_ENTRY = 1,\n  /** Library-provided file. */\n  LIBRARY = 2,\n  /** Library-provided entry file. */\n  LIBRARY_ENTRY = 3\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path with file extension. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: string[] | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.kind = NodeKind.SOURCE;\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Checks if this source represents native code. */\n  get isNative(): bool {\n    return this.internalPath == LIBRARY_SUBST;\n  }\n\n  /** Checks if this source is part of the (standard) library. */\n  get isLibrary(): bool {\n    var kind = this.sourceKind;\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\n  }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  /** Key type. */\n  keyType: NamedTypeNode;\n  /** Value type. */\n  valueType: TypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n  /** Variable type. */\n  type: TypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: NamedTypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Statement {\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  /** Declaration being exported as default. */\n  declaration: DeclarationStatement;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  /** Initializer statement, if present. Either a `VariableStatement` or `ExpressionStatement`. */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Represents a `for..of` statement. */\nexport class ForOfStatement extends Statement {\n  /** Variable statement. Either a `VariableStatement` or `ExpressionStatement` of `IdentifierExpression`. */\n  variable: Statement;\n  /** Iterable expression being iterated. */\n  iterable: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: FunctionTypeNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: TypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next !== null || name.identifier.text.length > 0);\n  }\n  return false;\n}\n","/**\n * @fileoverview AssemblyScript's intermediate representation.\n *\n * The compiler uses Binaryen IR, which is fairly low level, as its\n * primary intermediate representation, with the following structures\n * holding any higher level information that cannot be represented by\n * Binaryen IR alone, for example higher level types.\n *\n * Similar to the AST being composed of `Node`s in `Source`s, the IR is\n * composed of `Element`s in a `Program`. Each class or function is\n * represented by a \"prototype\" holding all the relevant information,\n * including each's concrete instances. If a class or function is not\n * generic, there is exactly one instance, otherwise there is one for\n * each concrete set of type arguments.\n *\n * @license Apache-2.0\n */\n\n// Element                    Base class of all elements\n// ├─DeclaredElement          Base class of elements with a declaration\n// │ ├─TypedElement           Base class of elements resolving to a type\n// │ │ ├─TypeDefinition       Type alias declaration\n// │ │ ├─VariableLikeElement  Base class of all variable-like elements\n// │ │ │ ├─EnumValue          Enum value\n// │ │ │ ├─Global             File global\n// │ │ │ ├─Local              Function local\n// │ │ │ ├─Field              Class field (instance only)\n// │ │ │ └─Property           Class property\n// │ │ ├─IndexSignature       Class index signature\n// │ │ ├─Function             Concrete function instance\n// │ │ └─Class                Concrete class instance\n// │ ├─Namespace              Namespace with static members\n// │ ├─FunctionPrototype      Prototype of concrete function instances\n// │ ├─FieldPrototype         Prototype of concrete field instances\n// │ ├─PropertyPrototype      Prototype of concrete property instances\n// │ └─ClassPrototype         Prototype of concrete classe instances\n// ├─File                     File, analogous to Source in the AST\n// └─FunctionTarget           Indirectly called function helper (typed)\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonNames,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportDefaultStatement,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Parser\n} from \"./parser\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\nexport namespace OperatorKind {\n\n  /** Returns the operator kind represented by the specified decorator and string argument. */\n  export function fromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n    assert(arg.length);\n    switch (decoratorKind) {\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.OPENBRACKET: {\n            if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n            if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n            break;\n          }\n          case CharCode.OPENBRACE: {\n            if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n            if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n            break;\n          }\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.ADD;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.SUB;\n            break;\n          }\n          case CharCode.ASTERISK: {\n            if (arg == \"*\") return OperatorKind.MUL;\n            if (arg == \"**\") return OperatorKind.POW;\n            break;\n          }\n          case CharCode.SLASH: {\n            if (arg == \"/\") return OperatorKind.DIV;\n            break;\n          }\n          case CharCode.PERCENT: {\n            if (arg == \"%\") return OperatorKind.REM;\n            break;\n          }\n          case CharCode.AMPERSAND: {\n            if (arg == \"&\") return OperatorKind.BITWISE_AND;\n            break;\n          }\n          case CharCode.BAR: {\n            if (arg == \"|\") return OperatorKind.BITWISE_OR;\n            break;\n          }\n          case CharCode.CARET: {\n            if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n            break;\n          }\n          case CharCode.EQUALS: {\n            if (arg == \"==\") return OperatorKind.EQ;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!=\") return OperatorKind.NE;\n            break;\n          }\n          case CharCode.GREATERTHAN: {\n            if (arg == \">\") return OperatorKind.GT;\n            if (arg == \">=\") return OperatorKind.GE;\n            if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n            if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n            break;\n          }\n          case CharCode.LESSTHAN: {\n            if (arg == \"<\") return OperatorKind.LT;\n            if (arg == \"<=\") return OperatorKind.LE;\n            if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_PREFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.PLUS;\n            if (arg == \"++\") return OperatorKind.PREFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.MINUS;\n            if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!\") return OperatorKind.NOT;\n            break;\n          }\n          case CharCode.TILDE: {\n            if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_POSTFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n            break;\n          }\n        }\n        break;\n      }\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a binary operator token to the respective operator kind. */\n  export function fromBinaryToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS:\n      case Token.PLUS_EQUALS: return OperatorKind.ADD;\n      case Token.MINUS:\n      case Token.MINUS_EQUALS: return OperatorKind.SUB;\n      case Token.ASTERISK:\n      case Token.ASTERISK_EQUALS: return OperatorKind.MUL;\n      case Token.SLASH:\n      case Token.SLASH_EQUALS: return OperatorKind.DIV;\n      case Token.PERCENT:\n      case Token.PERCENT_EQUALS: return OperatorKind.REM;\n      case Token.ASTERISK_ASTERISK:\n      case Token.ASTERISK_ASTERISK_EQUALS: return OperatorKind.POW;\n      case Token.AMPERSAND:\n      case Token.AMPERSAND_EQUALS: return OperatorKind.BITWISE_AND;\n      case Token.BAR:\n      case Token.BAR_EQUALS: return OperatorKind.BITWISE_OR;\n      case Token.CARET:\n      case Token.CARET_EQUALS: return OperatorKind.BITWISE_XOR;\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.LESSTHAN_LESSTHAN_EQUALS: return OperatorKind.BITWISE_SHL;\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR_U;\n      case Token.EQUALS_EQUALS: return OperatorKind.EQ;\n      case Token.EXCLAMATION_EQUALS: return OperatorKind.NE;\n      case Token.GREATERTHAN: return OperatorKind.GT;\n      case Token.GREATERTHAN_EQUALS: return OperatorKind.GE;\n      case Token.LESSTHAN: return OperatorKind.LT;\n      case Token.LESSTHAN_EQUALS: return OperatorKind.LE;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary prefix operator token to the respective operator kind. */\n  export function fromUnaryPrefixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS: return OperatorKind.PLUS;\n      case Token.MINUS: return OperatorKind.MINUS;\n      case Token.EXCLAMATION: return OperatorKind.NOT;\n      case Token.TILDE: return OperatorKind.BITWISE_NOT;\n      case Token.PLUS_PLUS: return OperatorKind.PREFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.PREFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary postfix operator token to the respective operator kind. */\n  export function fromUnaryPostfixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS_PLUS: return OperatorKind.POSTFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.POSTFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Parser instance. */\n  parser: Parser;\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes wrapping basic types like `i32`. */\n  wrapperClasses: Map<Type,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n  /** A set of unique function signatures contained in the program, by id. */\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\n\n  // standard references\n\n  /** ArrayBufferView reference. */\n  arrayBufferViewInstance: Class;\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype;\n  /** Static array prototype reference. */\n  staticArrayPrototype: ClassPrototype;\n  /** Set prototype reference. */\n  setPrototype: ClassPrototype;\n  /** Map prototype reference. */\n  mapPrototype: ClassPrototype;\n  /** Int8Array prototype. */\n  i8ArrayPrototype: ClassPrototype;\n  /** Int16Array prototype. */\n  i16ArrayPrototype: ClassPrototype;\n  /** Int32Array prototype. */\n  i32ArrayPrototype: ClassPrototype;\n  /** Int64Array prototype. */\n  i64ArrayPrototype: ClassPrototype;\n  /** Uint8Array prototype. */\n  u8ArrayPrototype: ClassPrototype;\n  /** Uint8ClampedArray prototype. */\n  u8ClampedArrayPrototype: ClassPrototype;\n  /** Uint16Array prototype. */\n  u16ArrayPrototype: ClassPrototype;\n  /** Uint32Array prototype. */\n  u32ArrayPrototype: ClassPrototype;\n  /** Uint64Array prototype. */\n  u64ArrayPrototype: ClassPrototype;\n  /** Float32Array prototype. */\n  f32ArrayPrototype: ClassPrototype;\n  /** Float64Array prototype. */\n  f64ArrayPrototype: ClassPrototype;\n  /** String instance reference. */\n  stringInstance: Class;\n  /** Abort function reference, if not explicitly disabled. */\n  abortInstance: Function | null;\n\n  // runtime references\n\n  /** RT `__alloc(size: usize, id: u32): usize` */\n  allocInstance: Function;\n  /** RT `__realloc(ptr: usize, newSize: usize): usize` */\n  reallocInstance: Function;\n  /** RT `__free(ptr: usize): void` */\n  freeInstance: Function;\n  /** RT `__retain(ptr: usize): usize` */\n  retainInstance: Function;\n  /** RT `__release(ptr: usize): void` */\n  releaseInstance: Function;\n  /** RT `__collect(): void` */\n  collectInstance: Function;\n  /** RT `__visit(ptr: usize, cookie: u32): void` */\n  visitInstance: Function;\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\n  typeinfoInstance: Function;\n  /** RT `__instanceof(ptr: usize, superId: u32): bool` */\n  instanceofInstance: Function;\n  /** RT `__allocBuffer(size: usize, id: u32, data: usize = 0): usize` */\n  allocBufferInstance: Function;\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\n  allocArrayInstance: Function;\n\n  /** Next class id. */\n  nextClassId: u32 = 0;\n  /** Next signature id. */\n  nextSignatureId: i32 = 0;\n  /** An indicator if the program has been initialized. */\n  initialized: bool = false;\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Compiler options. */\n    options: Options,\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    this.options = options;\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY_ENTRY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.parser = new Parser(this);\n    this.resolver = new Resolver(this);\n  }\n\n  /** Obtains the source matching the specified internal path. */\n  getSource(internalPath: string): string | null {\n    var sources = this.sources;\n    for (let i = 0; i < sources.length; ++i) {\n      let source = sources[i];\n      if (source.internalPath == internalPath) return source.text;\n    }\n    return null;\n  }\n\n  /** Writes a common runtime header to the specified buffer. */\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, id: u32, payloadSize: u32): void {\n    // BLOCK {\n    //   mmInfo: usize // WASM64 TODO\n    //   gcInfo: u32\n    //   rtId: u32\n    //   rtSize: u32\n    // }\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\n    writeI32(payloadSize, buffer, offset);\n    writeI32(1, buffer, offset + 4); // RC=1\n    writeI32(id, buffer, offset + 8);\n    writeI32(payloadSize, buffer, offset + 12);\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    return 16;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    var signature = this.nativeDummySignature;\n    if (!signature) {\n      this.nativeDummySignature = signature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonNames.void_, range),\n          null, false, range\n        ),\n        null, false, range\n      );\n    }\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, signature, null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement | null {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    return elementsByDeclaration.has(declaration)\n      ? assert(elementsByDeclaration.get(declaration))\n      : null;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    // Initialize only once\n    if (this.initialized) return;\n\n    this.initialized = true;\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonNames.i8, Type.i8);\n    this.registerNativeType(CommonNames.i16, Type.i16);\n    this.registerNativeType(CommonNames.i32, Type.i32);\n    this.registerNativeType(CommonNames.i64, Type.i64);\n    this.registerNativeType(CommonNames.isize, options.isizeType);\n    this.registerNativeType(CommonNames.u8, Type.u8);\n    this.registerNativeType(CommonNames.u16, Type.u16);\n    this.registerNativeType(CommonNames.u32, Type.u32);\n    this.registerNativeType(CommonNames.u64, Type.u64);\n    this.registerNativeType(CommonNames.usize, options.usizeType);\n    this.registerNativeType(CommonNames.bool, Type.bool);\n    this.registerNativeType(CommonNames.f32, Type.f32);\n    this.registerNativeType(CommonNames.f64, Type.f64);\n    this.registerNativeType(CommonNames.void_, Type.void);\n    this.registerNativeType(CommonNames.number, Type.f64); // alias\n    this.registerNativeType(CommonNames.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonNames.native, new TypeDefinition(\n      CommonNames.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.indexof, new TypeDefinition(\n      CommonNames.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.valueof, new TypeDefinition(\n      CommonNames.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.returnof, new TypeDefinition(\n      CommonNames.returnof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonNames.v128, Type.v128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerNativeType(CommonNames.anyref, Type.anyref);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonNames.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonNames.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_TABLE_BASE, Type.i32,\n      i64_new(options.tableBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonNames.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n\n    // register feature hints\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MUTABLE_GLOBALS, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBALS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_NONTRAPPING_F2I, Type.bool,\n      i64_new(options.hasFeature(Feature.NONTRAPPING_F2I) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_EXCEPTION_HANDLING, Type.bool,\n      i64_new(options.hasFeature(Feature.EXCEPTION_HANDLING) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_TAIL_CALLS, Type.bool,\n      i64_new(options.hasFeature(Feature.TAIL_CALLS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_REFERENCE_TYPES, Type.bool,\n      i64_new(options.hasFeature(Feature.REFERENCE_TYPES) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MULTI_VALUE, Type.bool,\n      i64_new(options.hasFeature(Feature.MULTI_VALUE) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    // TODO: for (let [file, starExports] of queuedExportsStar) {\n    for (let _keys = Map_keys(queuedExportsStar), i = 0, k = _keys.length; i < k; ++i) {\n      let file = _keys[i];\n      let starExports = assert(queuedExportsStar.get(file));\n      for (let j = 0, l = starExports.length; j < l; ++j) {\n        let exportStar = unchecked(starExports[j]);\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let localIdentifier = queuedImport.localIdentifier;\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            localIdentifier.text,\n            element,\n            localIdentifier // isImport\n          );\n        } else {\n          // FIXME: file not found is not reported if this happens?\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile,\n              localIdentifier\n            ),\n            localIdentifier // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    // TODO: for (let [file, exports] of queuedExports) {\n    for (let _keys = Map_keys(queuedExports), i = 0, k = _keys.length; i < k; ++i) {\n      let file = unchecked(_keys[i]);\n      let exports = assert(queuedExports.get(file));\n      // TODO: for (let [exportName, queuedExport] of exports) {\n      for (let exportNames = Map_keys(exports), j = 0, l = exportNames.length; j < l; ++j) {\n        let exportName = unchecked(exportNames[j]);\n        let queuedExport = assert(exports.get(exportName));\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement !== null && isDeclaredElement(globalElement.kind)) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.nextClassId == 0);\n    this.arrayBufferInstance = this.requireClass(CommonNames.ArrayBuffer);\n    assert(this.arrayBufferInstance.id == 0);\n    this.stringInstance = this.requireClass(CommonNames.String);\n    assert(this.stringInstance.id == 1);\n    this.arrayBufferViewInstance = this.requireClass(CommonNames.ArrayBufferView);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerWrapperClass(Type.i8, CommonNames.I8);\n    this.registerWrapperClass(Type.i16, CommonNames.I16);\n    this.registerWrapperClass(Type.i32, CommonNames.I32);\n    this.registerWrapperClass(Type.i64, CommonNames.I64);\n    this.registerWrapperClass(options.isizeType, CommonNames.Isize);\n    this.registerWrapperClass(Type.u8, CommonNames.U8);\n    this.registerWrapperClass(Type.u16, CommonNames.U16);\n    this.registerWrapperClass(Type.u32, CommonNames.U32);\n    this.registerWrapperClass(Type.u64, CommonNames.U64);\n    this.registerWrapperClass(options.usizeType, CommonNames.Usize);\n    this.registerWrapperClass(Type.bool, CommonNames.Bool);\n    this.registerWrapperClass(Type.f32, CommonNames.F32);\n    this.registerWrapperClass(Type.f64, CommonNames.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerWrapperClass(Type.v128, CommonNames.V128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerWrapperClass(Type.anyref, CommonNames.Anyref);\n\n    // register views but don't instantiate them yet\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonNames.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonNames.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonNames.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonNames.Float64Array, ElementKind.CLASS_PROTOTYPE);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, basePrototype.identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        // TODO: for (let [alias, name] of globalAliases) {\n        for (let _keys = Map_keys(globalAliases), i = 0, k = _keys.length; i < k; ++i) {\n          let alias = unchecked(_keys[i]);\n          let name = assert(globalAliases.get(alias));\n          if (!name.length) continue; // explicitly disabled\n          let firstChar = name.charCodeAt(0);\n          if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n            this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n          } else {\n            let elementsByName = this.elementsByName;\n            let element = elementsByName.get(name);\n            if (element) {\n              if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\n              elementsByName.set(alias, element);\n            }\n            else throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // register stdlib components\n    this.arrayPrototype = <ClassPrototype>this.require(CommonNames.Array, ElementKind.CLASS_PROTOTYPE);\n    this.staticArrayPrototype = <ClassPrototype>this.require(CommonNames.StaticArray, ElementKind.CLASS_PROTOTYPE);\n    this.setPrototype = <ClassPrototype>this.require(CommonNames.Set, ElementKind.CLASS_PROTOTYPE);\n    this.mapPrototype = <ClassPrototype>this.require(CommonNames.Map, ElementKind.CLASS_PROTOTYPE);\n    this.abortInstance = this.lookupFunction(CommonNames.abort); // can be disabled\n    this.allocInstance = this.requireFunction(CommonNames.alloc);\n    this.reallocInstance = this.requireFunction(CommonNames.realloc);\n    this.freeInstance = this.requireFunction(CommonNames.free);\n    this.retainInstance = this.requireFunction(CommonNames.retain);\n    this.releaseInstance = this.requireFunction(CommonNames.release);\n    this.collectInstance = this.requireFunction(CommonNames.collect);\n    this.typeinfoInstance = this.requireFunction(CommonNames.typeinfo);\n    this.instanceofInstance = this.requireFunction(CommonNames.instanceof_);\n    this.visitInstance = this.requireFunction(CommonNames.visit);\n    this.allocBufferInstance = this.requireFunction(CommonNames.allocBuffer);\n    this.allocArrayInstance = this.requireFunction(CommonNames.allocArray);\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    // TODO: for (let file of this.filesByName.values()) {\n    for (let _values = Map_values(this.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.markModuleExports(file);\n      }\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"missing \" + name);\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\n  private lookupFunction(name: string): Function | null {\n    var prototype = this.lookupGlobal(name);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  /** Requires that a global function is present and returns it. */\n  private requireFunction(name: string, typeArguments: Type[] | null = null): Function {\n    var prototype = <FunctionPrototype>this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(prototype, typeArguments);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Marks all exports of the specified file as module exports. */\n  private markModuleExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let element of exports.values()) {\n      for (let _values = Map_values(exports), j = 0, l = _values.length; j < l; ++j) {\n        let element = unchecked(_values[j]);\n        this.markModuleExport(element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        this.markModuleExports(exportsStar[i]);\n      }\n    }\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) {\n          // TODO: for (let member of instanceMembers.values()) {\n          for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n            let member = unchecked(_values[i]);\n            this.markModuleExport(member);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>element;\n        let getterPrototype = propertyPrototype.getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    var staticMembers = element.members;\n    if (staticMembers) {\n      // TODO: for (let member of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.markModuleExport(member);\n      }\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerWrapperClass(type: Type, className: string): void {\n    var wrapperClasses = this.wrapperClasses;\n    assert(!type.classReference && !wrapperClasses.has(type));\n    var element = this.lookupGlobal(className);\n    if (!element) return;\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    var classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n    if (!classElement) return;\n    classElement.wrappedType = type;\n    wrapperClasses.set(type, classElement);\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  registerConstantInteger(name: string, type: Type, value: i64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let existing = assert(elementsByName.get(name));\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (existing !== element) {\n        let merged = tryMerge(existing, element);\n        if (!merged) {\n          if (isDeclaredElement(existing.kind)) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              name\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, name\n            );\n          }\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return assert(elements.get(name));\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return assert(elements.get(name));\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? assert(filesByName.get(foreignPath))\n         : filesByName.has(foreignPathAlt)\n         ? assert(filesByName.get(foreignPathAlt))\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = assert(queuedExports.get(foreignFile));\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = assert(fileQueuedExports.get(foreignName));\n          let queuedExportForeignPath = queuedExport.foreignPath;\n          if (queuedExportForeignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExportForeignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = DecoratorKind.fromNode(decorator.name);\n        let flag = DecoratorFlags.fromKind(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning(\n            DiagnosticCode.Not_implemented,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          let methodDeclaration = <MethodDeclaration>memberDeclaration;\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(methodDeclaration, element);\n          } else {\n            this.initializeMethod(methodDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    var acceptedFlags: DecoratorFlags = DecoratorFlags.UNSAFE;\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      acceptedFlags |= DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.READONLY)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, acceptedFlags)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator: DecoratorNode = decorators[i]; // FIXME: why does tsc want a type here?\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let args = decorator.arguments;\n            let numArgs = args ? args.length : 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (firstArg.isLiteralKind(LiteralKind.STRING)) {\n                let text = (<StringLiteralExpression>firstArg).value;\n                let kind = OperatorKind.fromDecorator(decorator.decoratorKind, text);\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode._0_is_not_a_valid_operator,\n                    firstArg.range, text\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString()\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers !== null && parentMembers.has(name)) {\n        let element = assert(parentMembers.get(name));\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers !== null && parentMembers.has(name)) {\n        let element = assert(parentMembers.get(name));\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = assert(queuedExportsStar.get(parent));\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = statement.internalPath!; // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = assert(queuedExports.get(localFile));\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = assert(queuedExports.get(localFile));\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else {\n        if (exports.has(\"default\")) {\n          let existing = assert(exports.get(\"default\"));\n          this.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range,\n            existing.declaration.name.range,\n            \"default\"\n          );\n          return;\n        }\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else {\n      let namespaceName = statement.namespaceName;\n      if (namespaceName) { // import * as foo from \"./bar\"\n        queuedImports.push(new QueuedImport(\n          parent,\n          namespaceName,\n          null, // indicates import *\n          statement.internalPath,\n          statement.internalPath + INDEX_SUFFIX\n        ));\n      } else {\n        // import \"./foo\"\n      }\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, declaration.name /* isImport */);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n      if (declaration.range.source.isLibrary) {\n        validDecorators |= DecoratorFlags.LAZY;\n      }\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          let methodDeclaration = <MethodDeclaration>memberDeclaration;\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(methodDeclaration, element);\n          } else {\n            this.initializeMethod(methodDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): DeclaredElement | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n\n  /** Finds all cyclic classes. */\n  findCyclicClasses(): Set<Class> {\n    var cyclics = new Set<Class>();\n    // TODO: for (let instance of this.managedClasses.values()) {\n    for (let _values = Map_values(this.managedClasses), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      if (!instance.isAcyclic) cyclics.add(instance);\n    }\n    return cyclics;\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n  /** An {@link IndexSignature}. */\n  INDEXSIGNATURE\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10\n}\n\nexport namespace DecoratorFlags {\n\n  /** Translates a decorator kind to the respective decorator flag. */\n  export function fromKind(kind: DecoratorKind): DecoratorFlags {\n    switch (kind) {\n      case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n      case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n      case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n      case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n      case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n      case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n      case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n      case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n      case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n      case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n      default: return DecoratorFlags.NONE;\n    }\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do {\n      current = current.parent;\n      if (current.kind == ElementKind.FILE) return <File>current;\n    } while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members !== null && members.has(name)) return assert(members.get(name));\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let existing = assert(members.get(name));\n      if (existing.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(existing, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          let reportedIdentifier = localIdentifierIfImport\n            ? localIdentifierIfImport\n            : element.identifierNode;\n          if (isDeclaredElement(existing.kind)) {\n            this.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range,\n              (<DeclaredElement>existing).identifierNode.range,\n              reportedIdentifier.text\n            );\n          } else {\n            this.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range, reportedIdentifier.text\n            );\n          }\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return this.internalName + \", kind=\" + this.kind.toString();\n  }\n}\n\n// Kinds of all declared elements\nvar declaredElements = new Set<ElementKind>();\n\n/** Tests if the specified element kind indicates a declared element. */\nexport function isDeclaredElement(kind: ElementKind): bool {\n  return declaredElements.has(kind);\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    declaredElements.add(kind);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n// Kinds of all typed elements\nvar typedElements = new Set<ElementKind>();\n\n/** Checks if the specified element kind indicates a typed element. */\nexport function isTypedElement(kind: ElementKind): bool {\n  return typedElements.has(kind);\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent, declaration);\n    typedElements.add(kind);\n  }\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(program, null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element, localIdentifierIfImport)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !localIdentifierIfImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports !== null && exports.has(name)) return assert(exports.get(name));\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element, localIdentifier: IdentifierExpression): Namespace {\n    var declaration = this.program.makeNativeNamespaceDeclaration(name);\n    declaration.name = localIdentifier;\n    var ns = new Namespace(name, parent, declaration);\n    ns.set(CommonFlags.SCOPED);\n    this.copyExportsToNamespace(ns);\n    return ns;\n  }\n\n  /** Recursively copies the exports of this file to the specified namespace. */\n  private copyExportsToNamespace(ns: Namespace): void {\n    var exports = this.exports;\n    if (exports) {\n      // TODO: for (let [memberName, member] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(exports.get(memberName));\n        ns.add(memberName, member);\n      }\n    }\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        exportsStar[i].copyExportsToNamespace(ns);\n      }\n    }\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var inSelf = this.lookupInSelf(name);\n    if (inSelf) return inSelf;\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var inSelf = this.lookupInSelf(name);\n    if (inSelf) return inSelf;\n    return this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: i64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: i64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).value;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return assert(boundPrototypes.get(classInstance));\n    var declaration = this.declaration;\n    assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances !== null && instances.has(instanceKey)) return assert(instances.get(instanceKey));\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    var program = prototype.program;\n    this.type = program.options.usizeType.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonNames.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonNames.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    if (!declaration) declaration = this.program.makeNativeVariableDeclaration(localName);\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return assert(locals.get(name));\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n  tempAnyrefs: Local[] | null = null;\n  tempExnrefs: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n}\n\nvar nextFunctionTarget = 0;\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      \"~sig\" + nextFunctionTarget.toString(),\n      \"~sig\" + nextFunctionTarget.toString(),\n      program,\n      program.nativeFile\n    );\n    ++nextFunctionTarget;\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = program.options.usizeType.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n  /** Getter function reference, if compiled. */\n  getterRef: FunctionRef = 0;\n  /** Setter function reference, if compiled. */\n  setterRef: FunctionRef = 0;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Gets the internal name of the respective getter function. */\n  get internalGetterName(): string {\n    return this.parent.internalName + INSTANCE_DELIMITER + GETTER_PREFIX + this.name;\n  }\n\n  /** Gets the internal name of the respective setter function. */\n  get internalSetterName(): string {\n    return this.parent.internalName + INSTANCE_DELIMITER + SETTER_PREFIX + this.name;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved index signature. */\nexport class IndexSignature extends TypedElement {\n\n  /** Constructs a new index prototype. */\n  constructor(\n    /** Parent class. */\n    parent: Class\n  ) {\n    super(\n      ElementKind.INDEXSIGNATURE,\n      \"[]\",\n      parent.internalName + \"[]\",\n      parent.program,\n      parent,\n      parent.program.makeNativeVariableDeclaration(\"[]\") // is fine\n    );\n  }\n\n  /** Obtains the getter instance. */\n  getGetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n  }\n\n  /** Obtains the setter instance. */\n  getSetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n  /** Classes extending this class. */\n  extendees: Set<ClassPrototype> = new Set();\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    var seen = new Set<ClassPrototype>();\n    do {\n      // cannot directly or indirectly extend itself\n      if (seen.has(current)) break;\n      seen.add(current);\n      if (current === basePtototype) return true;\n      current = current.basePrototype;\n    } while (current);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let existing = assert(instanceMembers.get(name));\n      let merged = tryMerge(existing, element);\n      if (!merged) {\n        if (isDeclaredElement(existing.kind)) {\n          this.program.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range,\n            (<DeclaredElement>existing).declaration.name.range,\n            element.identifierNode.text\n          );\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n        }\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances !== null && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null = null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  nextMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Index signature, if present. */\n  indexSignature: IndexSignature | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n  /** Wrapped type, if a wrapper for a basic type. */\n  wrappedType: Type | null = null;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY &&\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(program.options.usizeType.asClass(this));\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters !== null && typeParameters.length > 0) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Sets the base class. */\n  setBase(base: Class): void {\n    assert(!this.base);\n    this.base = base;\n\n    // Remember extendees and mark overloaded methods virtual\n    var basePrototype: ClassPrototype  = base.prototype;\n    var thisPrototype = this.prototype;\n    assert(basePrototype != thisPrototype);\n    basePrototype.extendees.add(thisPrototype);\n    var thisInstanceMembers = thisPrototype.instanceMembers;\n    if (thisInstanceMembers) {\n      do {\n        let baseInstanceMembers = basePrototype.instanceMembers;\n        if (baseInstanceMembers) {\n          for (let _keys = Map_keys(baseInstanceMembers), i = 0, k = _keys.length; i < k; ++i) {\n            let memberName = _keys[i];\n            let member = assert(baseInstanceMembers.get(memberName));\n            if (thisInstanceMembers.has(memberName)) {\n              member.set(CommonFlags.VIRTUAL);\n            }\n          }\n        }\n        let nextPrototype = basePrototype.basePrototype;\n        if (!nextPrototype) break;\n        basePrototype = nextPrototype;\n      } while (true);\n    }\n\n    // Inherit contextual type arguments from base class\n    var inheritedTypeArguments = base.contextualTypeArguments;\n    if (inheritedTypeArguments) {\n      let contextualTypeArguments = this.contextualTypeArguments;\n      // TODO: for (let [baseName, baseType] of inheritedTypeArguments) {\n      for (let _keys = Map_keys(inheritedTypeArguments), i = 0, k = _keys.length; i < k; ++i) {\n        let baseName = unchecked(_keys[i]);\n        let baseType = assert(inheritedTypeArguments.get(baseName));\n        if (!contextualTypeArguments) {\n          this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        } else if (!contextualTypeArguments.has(baseName)) {\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do {\n      if (current == target) return true;\n      current = current.base;\n    } while (current);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n      instance = instance.base;\n    } while (instance);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\n    var element = this.lookupInSelf(name);\n    if (element !== null && element.kind == ElementKind.FIELD) {\n      let fieldInstance = <Field>element;\n      let offset = baseOffset + fieldInstance.memoryOffset;\n      switch (fieldInstance.type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          assert(!this.program.options.isWasm64); // TODO\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F32: {\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do {\n      if (current.prototype === extendedPrototype) return current.typeArguments;\n      current = current.base;\n    } while (current);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    var prototype = current.prototype;\n    if (prototype == program.arrayPrototype) {\n      return this.getTypeArgumentsTo(program.arrayPrototype)![0];\n    }\n    if (prototype == program.i8ArrayPrototype) return Type.i8;\n    if (prototype == program.i16ArrayPrototype) return Type.i16;\n    if (prototype == program.i32ArrayPrototype) return Type.i32;\n    if (prototype == program.i64ArrayPrototype) return Type.i64;\n    if (prototype == program.u8ArrayPrototype) return Type.u8;\n    if (prototype == program.u8ClampedArrayPrototype) return Type.u8;\n    if (prototype == program.u16ArrayPrototype) return Type.u16;\n    if (prototype == program.u32ArrayPrototype) return Type.u32;\n    if (prototype == program.u64ArrayPrototype) return Type.u64;\n    if (prototype == program.f32ArrayPrototype) return Type.f32;\n    if (prototype == program.f64ArrayPrototype) return Type.f64;\n    assert(false);\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var instanceMembers = this.members;\n    if (instanceMembers) {\n      // TODO: for (let member of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind == ElementKind.FIELD) {\n          let fieldType = (<Field>member).type;\n          if (fieldType.is(TypeFlags.REFERENCE)) {\n            if ((current = fieldType.classReference) !== null && (\n              current === other ||\n              current.cyclesTo(other, except)\n            )) return true;\n          }\n        }\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = []\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  if (newer.members) return null;\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    // TODO: for (let [memberName, member] of srcMembers) {\n    for (let _keys = Map_keys(srcMembers), i = 0, k = _keys.length; i < k; ++i) {\n      let memberName = unchecked(_keys[i]);\n      let member = assert(srcMembers.get(memberName));\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * @fileoverview A TypeScript tokenizer modified for AssemblyScript.\n *\n * The `Tokenizer` scans over a source file and returns one syntactic token\n * at a time that the parser will combine to an abstract syntax tree.\n *\n * It skips over trivia like comments and whitespace and provides a general\n * mark/reset mechanism for the parser to utilize on ambiguous tokens, with\n * one token of lookahead otherwise.\n *\n * @license Apache-2.0\n */\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      if (text == \"abstract\") return Token.ABSTRACT;\n      if (text == \"as\") return Token.AS;\n      if (text == \"async\") return Token.ASYNC;\n      if (text == \"await\") return Token.AWAIT;\n      break;\n    }\n    case CharCode.b: {\n      if (text == \"break\") return Token.BREAK;\n      break;\n    }\n    case CharCode.c: {\n      if (text == \"case\") return Token.CASE;\n      if (text == \"catch\") return Token.CATCH;\n      if (text == \"class\") return Token.CLASS;\n      if (text == \"continue\") return Token.CONTINUE;\n      if (text == \"const\") return Token.CONST;\n      if (text == \"constructor\") return Token.CONSTRUCTOR;\n      break;\n    }\n    case CharCode.d: {\n      if (text == \"debugger\") return Token.DEBUGGER;\n      if (text == \"declare\") return Token.DECLARE;\n      if (text == \"default\") return Token.DEFAULT;\n      if (text == \"delete\") return Token.DELETE;\n      if (text == \"do\") return Token.DO;\n      break;\n    }\n    case CharCode.e: {\n      if (text == \"else\") return Token.ELSE;\n      if (text == \"enum\") return Token.ENUM;\n      if (text == \"export\") return Token.EXPORT;\n      if (text == \"extends\") return Token.EXTENDS;\n      break;\n    }\n    case CharCode.f: {\n      if (text == \"false\") return Token.FALSE;\n      if (text == \"finally\") return Token.FINALLY;\n      if (text == \"for\") return Token.FOR;\n      if (text == \"from\") return Token.FROM;\n      if (text == \"function\") return Token.FUNCTION;\n      break;\n    }\n    case CharCode.g: {\n      if (text == \"get\") return Token.GET;\n      break;\n    }\n    case CharCode.i: {\n      if (text == \"if\") return Token.IF;\n      if (text == \"implements\") return Token.IMPLEMENTS;\n      if (text == \"import\") return Token.IMPORT;\n      if (text == \"in\") return Token.IN;\n      if (text == \"instanceof\") return Token.INSTANCEOF;\n      if (text == \"interface\") return Token.INTERFACE;\n      if (text == \"is\") return Token.IS;\n      break;\n    }\n    case CharCode.k: {\n      if (text == \"keyof\") return Token.KEYOF;\n      break;\n    }\n    case CharCode.l: {\n      if (text == \"let\") return Token.LET;\n      break;\n    }\n    case CharCode.m: {\n      if (text == \"module\") return Token.MODULE;\n      break;\n    }\n    case CharCode.n: {\n      if (text == \"namespace\") return Token.NAMESPACE;\n      if (text == \"new\") return Token.NEW;\n      if (text == \"null\") return Token.NULL;\n      break;\n    }\n    case CharCode.o: {\n      if (text == \"of\") return Token.OF;\n      break;\n    }\n    case CharCode.p: {\n      if (text == \"package\") return Token.PACKAGE;\n      if (text == \"private\") return Token.PRIVATE;\n      if (text == \"protected\") return Token.PROTECTED;\n      if (text == \"public\") return Token.PUBLIC;\n      break;\n    }\n    case CharCode.r: {\n      if (text == \"readonly\") return Token.READONLY;\n      if (text == \"return\") return Token.RETURN;\n      break;\n    }\n    case CharCode.s: {\n      if (text == \"set\") return Token.SET;\n      if (text == \"static\") return Token.STATIC;\n      if (text == \"super\") return Token.SUPER;\n      if (text == \"switch\") return Token.SWITCH;\n      break;\n    }\n    case CharCode.t: {\n      if (text == \"this\") return Token.THIS;\n      if (text == \"throw\") return Token.THROW;\n      if (text == \"true\") return Token.TRUE;\n      if (text == \"try\") return Token.TRY;\n      if (text == \"type\") return Token.TYPE;\n      if (text == \"typeof\") return Token.TYPEOF;\n      break;\n    }\n    case CharCode.v: {\n      if (text == \"var\") return Token.VAR;\n      if (text == \"void\") return Token.VOID;\n      break;\n    }\n    case CharCode.w: {\n      if (text == \"while\") return Token.WHILE;\n      if (text == \"with\") return Token.WITH;\n      break;\n    }\n    case CharCode.y: {\n      if (text == \"yield\") return Token.YIELD;\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    if (!diagnostics) diagnostics = [];\n    this.diagnostics = diagnostics;\n\n    var end = this.end;\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    var token: Token;\n    do token = this.unsafeNext(identifierHandling);\n    while (token == Token.INVALID);\n    this.token = token;\n    return token;\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          let start = this.pos++;\n          if ( // surrogate pair?\n            (c & 0xFC00) == 0xD800 && this.pos < this.end &&\n            ((text.charCodeAt(this.pos)) & 0xFC00) == 0xDC00\n          ) ++this.pos;\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(start, this.pos)\n          );\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      let nextToken: Token;\n      do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      while (nextToken == Token.INVALID);\n      this.nextToken = nextToken;\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    var nextToken: Token;\n    do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n    while (nextToken == Token.INVALID);\n    if (nextToken == token) {\n      this.token = token;\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state = reusableState;\n    if (state) reusableState = null;\n    else state = new State();\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    while (\n      ++this.pos < end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var end = this.end;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.x: {\n        return this.readHexadecimalEscape(); // \\xDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var end = this.end;\n    var text = this.source.text;\n    var pos = this.pos;\n    if (pos + 1 < end && text.charCodeAt(pos) == CharCode._0) {\n      switch (text.charCodeAt(pos + 2) | 32) {\n        case CharCode.x:\n        case CharCode.b:\n        case CharCode.o: return true;\n      }\n    }\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || (c | 32) == CharCode.e) return false;\n      if (c != CharCode._ && (c < CharCode._0 || c > CharCode._9)) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): i64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1) | 32) {\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): i64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): i64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): i64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): i64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if ((c | 32) == CharCode.e) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readHexadecimalEscape(remain: i32 = 2): string {\n    var value = 0;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  readUnicodeEscape(): string {\n    return this.readHexadecimalEscape(4);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 0x10000\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 0x10000) >>> 10) | 0xD800,\n        ((value32 - 0x10000) & 1023) | 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * @fileoverview A thin wrapper around Binaryen's C-API.\n *\n * The AssemblyScript compiler utilizes Binaryen's C-API directly. Even\n * though it currently imports binaryen.js, none of the JS APIs it\n * provides are used.\n *\n * @license Apache-2.0\n */\n\nimport { Target } from \"./common\";\nimport * as binaryen from \"./glue/binaryen\";\n\nexport type ModuleRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type EventRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\n// The following constants must be updated by running scripts/update-constants.\n// This is necessary because the functions are not yet callable with Binaryen\n// compiled to WebAssembly, requiring awaiting the ready promise first. Note\n// that this essentially fixes the compiler to specific versions of Binaryen\n// sometimes, because these constants can differ between Binaryen versions.\n\nexport enum NativeType {\n  None = 0 /* _BinaryenTypeNone */,\n  Unreachable = 1 /* _BinaryenTypeUnreachable */,\n  I32 = 2 /* _BinaryenTypeInt32 */,\n  I64 = 3 /* _BinaryenTypeInt64 */,\n  F32 = 4 /* _BinaryenTypeFloat32 */,\n  F64 = 5 /* _BinaryenTypeFloat64 */,\n  V128 = 6 /* _BinaryenTypeVec128 */,\n  Funcref = 7 /* _BinaryenTypeFuncref */,\n  Anyref = 8 /* _BinaryenTypeAnyref */,\n  Nullref = 9 /* _BinaryenTypeNullref */,\n  Exnref = 10 /* _BinaryenTypeExnref */,\n  Auto = -1 /* _BinaryenTypeAuto */\n}\n\nexport enum FeatureFlags {\n  MVP = 0 /* _BinaryenFeatureMVP */,\n  Atomics = 1 /* _BinaryenFeatureAtomics */,\n  MutableGloabls = 2 /* _BinaryenFeatureMutableGlobals */,\n  NontrappingFPToInt = 4 /* _BinaryenFeatureNontrappingFPToInt */,\n  SIMD128 = 8 /* _BinaryenFeatureSIMD128 */,\n  BulkMemory = 16 /* _BinaryenFeatureBulkMemory */,\n  SignExt = 32 /* _BinaryenFeatureSignExt */,\n  ExceptionHandling = 64 /* _BinaryenFeatureExceptionHandling */,\n  TailCall = 128 /* _BinaryenFeatureTailCall */,\n  ReferenceTypes = 256 /* _BinaryenFeatureReferenceTypes */,\n  MultiValue = 512 /* _BinaryenFeatureMultivalue */,\n  All = 1023 /* _BinaryenFeatureAll */\n}\n\nexport enum ExpressionId {\n  Invalid = 0 /* _BinaryenInvalidId */,\n  Block = 1 /* _BinaryenBlockId */,\n  If = 2 /* _BinaryenIfId */,\n  Loop = 3 /* _BinaryenLoopId */,\n  Break = 4 /* _BinaryenBreakId */,\n  Switch = 5 /* _BinaryenSwitchId */,\n  Call = 6 /* _BinaryenCallId */,\n  CallIndirect = 7 /* _BinaryenCallIndirectId */,\n  LocalGet = 8 /* _BinaryenLocalGetId */,\n  LocalSet = 9 /* _BinaryenLocalSetId */,\n  GlobalGet = 10 /* _BinaryenGlobalGetId */,\n  GlobalSet = 11 /* _BinaryenGlobalSetId */,\n  Load = 12 /* _BinaryenLoadId */,\n  Store = 13 /* _BinaryenStoreId */,\n  Const = 14 /* _BinaryenConstId */,\n  Unary = 15 /* _BinaryenUnaryId */,\n  Binary = 16 /* _BinaryenBinaryId */,\n  Select = 17 /* _BinaryenSelectId */,\n  Drop = 18 /* _BinaryenDropId */,\n  Return = 19 /* _BinaryenReturnId */,\n  Host = 20 /* _BinaryenHostId */,\n  Nop = 21 /* _BinaryenNopId */,\n  Unreachable = 22 /* _BinaryenUnreachableId */,\n  AtomicCmpxchg = 24 /* _BinaryenAtomicCmpxchgId */,\n  AtomicRMW = 23 /* _BinaryenAtomicRMWId */,\n  AtomicWait = 25 /* _BinaryenAtomicWaitId */,\n  AtomicNotify = 26 /* _BinaryenAtomicNotifyId */,\n  AtomicFence = 27 /* _BinaryenAtomicFenceId */,\n  SIMDExtract = 28 /* _BinaryenSIMDExtractId */,\n  SIMDReplace = 29 /* _BinaryenSIMDReplaceId */,\n  SIMDShuffle = 30 /* _BinaryenSIMDShuffleId */,\n  SIMDTernary = 31 /* _BinaryenSIMDTernaryId */,\n  SIMDShift = 32 /* _BinaryenSIMDShiftId */,\n  SIMDLoad = 33 /* _BinaryenSIMDLoadId */,\n  MemoryInit = 34 /* _BinaryenMemoryInitId */,\n  DataDrop = 35 /* _BinaryenDataDropId */,\n  MemoryCopy = 36 /* _BinaryenMemoryCopyId */,\n  MemoryFill = 37 /* _BinaryenMemoryFillId */,\n  Push = 38 /* _BinaryenPushId */,\n  Pop = 39 /* _BinaryenPopId */,\n  RefNull = 40 /* _BinaryenRefNullId */,\n  RefIsNull = 41 /* _BinaryenRefIsNullId */,\n  RefFunc = 42 /* _BinaryenRefFuncId */,\n  Try = 43 /* _BinaryenTryId */,\n  Throw = 44 /* _BinaryenThrowId */,\n  Rethrow = 45 /* _BinaryenRethrowId */,\n  BrOnExn = 46 /* _BinaryenBrOnExnId */\n}\n\nexport enum UnaryOp {\n  ClzI32 = 0 /* _BinaryenClzInt32 */,\n  ClzI64 = 1 /* _BinaryenClzInt64 */,\n  CtzI32 = 2 /* _BinaryenCtzInt32 */,\n  CtzI64 = 3 /* _BinaryenCtzInt64 */,\n  PopcntI32 = 4 /* _BinaryenPopcntInt32 */,\n  PopcntI64 = 5 /* _BinaryenPopcntInt64 */,\n  NegF32 = 6 /* _BinaryenNegFloat32 */,\n  NegF64 = 7 /* _BinaryenNegFloat64 */,\n  AbsF32 = 8 /* _BinaryenAbsFloat32 */,\n  AbsF64 = 9 /* _BinaryenAbsFloat64 */,\n  CeilF32 = 10 /* _BinaryenCeilFloat32 */,\n  CeilF64 = 11 /* _BinaryenCeilFloat64 */,\n  FloorF32 = 12 /* _BinaryenFloorFloat32 */,\n  FloorF64 = 13 /* _BinaryenFloorFloat64 */,\n  TruncF32 = 14 /* _BinaryenTruncFloat32 */,\n  TruncF64 = 15 /* _BinaryenTruncFloat64 */,\n  NearestF32 = 16 /* _BinaryenNearestFloat32 */,\n  NearestF64 = 17 /* _BinaryenNearestFloat64 */,\n  SqrtF32 = 18 /* _BinaryenSqrtFloat32 */,\n  SqrtF64 = 19 /* _BinaryenSqrtFloat64 */,\n  EqzI32 = 20 /* _BinaryenEqZInt32 */,\n  EqzI64 = 21 /* _BinaryenEqZInt64 */,\n  ExtendI32 = 22 /* _BinaryenExtendSInt32 */,\n  ExtendU32 = 23 /* _BinaryenExtendUInt32 */,\n  WrapI64 = 24 /* _BinaryenWrapInt64 */,\n  TruncF32ToI32 = 25 /* _BinaryenTruncSFloat32ToInt32 */,\n  TruncF32ToI64 = 26 /* _BinaryenTruncSFloat32ToInt64 */,\n  TruncF32ToU32 = 27 /* _BinaryenTruncUFloat32ToInt32 */,\n  TruncF32ToU64 = 28 /* _BinaryenTruncUFloat32ToInt64 */,\n  TruncF64ToI32 = 29 /* _BinaryenTruncSFloat64ToInt32 */,\n  TruncF64ToI64 = 30 /* _BinaryenTruncSFloat64ToInt64 */,\n  TruncF64ToU32 = 31 /* _BinaryenTruncUFloat64ToInt32 */,\n  TruncF64ToU64 = 32 /* _BinaryenTruncUFloat64ToInt64 */,\n  ReinterpretF32 = 33 /* _BinaryenReinterpretFloat32 */,\n  ReinterpretF64 = 34 /* _BinaryenReinterpretFloat64 */,\n  ConvertI32ToF32 = 35 /* _BinaryenConvertSInt32ToFloat32 */,\n  ConvertI32ToF64 = 36 /* _BinaryenConvertSInt32ToFloat64 */,\n  ConvertU32ToF32 = 37 /* _BinaryenConvertUInt32ToFloat32 */,\n  ConvertU32ToF64 = 38 /* _BinaryenConvertUInt32ToFloat64 */,\n  ConvertI64ToF32 = 39 /* _BinaryenConvertSInt64ToFloat32 */,\n  ConvertI64ToF64 = 40 /* _BinaryenConvertSInt64ToFloat64 */,\n  ConvertU64ToF32 = 41 /* _BinaryenConvertUInt64ToFloat32 */,\n  ConvertU64ToF64 = 42 /* _BinaryenConvertUInt64ToFloat64 */,\n  PromoteF32 = 43 /* _BinaryenPromoteFloat32 */,\n  DemoteF64 = 44 /* _BinaryenDemoteFloat64 */,\n  ReinterpretI32 = 45 /* _BinaryenReinterpretInt32 */,\n  ReinterpretI64 = 46 /* _BinaryenReinterpretInt64 */,\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = 47 /* _BinaryenExtendS8Int32 */,\n  ExtendI16ToI32 = 48 /* _BinaryenExtendS16Int32 */,\n  ExtendI8ToI64 = 49 /* _BinaryenExtendS8Int64 */,\n  ExtendI16ToI64 = 50 /* _BinaryenExtendS16Int64 */,\n  ExtendI32ToI64 = 51 /* _BinaryenExtendS32Int64 */,\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  TruncF32ToI32Sat = 52 /* _BinaryenTruncSatSFloat32ToInt32 */,\n  TruncF32ToU32Sat = 53 /* _BinaryenTruncSatUFloat32ToInt32 */,\n  TruncF64ToI32Sat = 54 /* _BinaryenTruncSatSFloat64ToInt32 */,\n  TruncF64ToU32Sat = 55 /* _BinaryenTruncSatUFloat64ToInt32 */,\n  TruncF32ToI64Sat = 56 /* _BinaryenTruncSatSFloat32ToInt64 */,\n  TruncF32ToU64Sat = 57 /* _BinaryenTruncSatUFloat32ToInt64 */,\n  TruncF64ToI64Sat = 58 /* _BinaryenTruncSatSFloat64ToInt64 */,\n  TruncF64ToU64Sat = 59 /* _BinaryenTruncSatUFloat64ToInt64 */,\n\n  // see: https://github.com/WebAssembly/simd\n  SplatI8x16 = 60 /* _BinaryenSplatVecI8x16 */,\n  SplatI16x8 = 61 /* _BinaryenSplatVecI16x8 */,\n  SplatI32x4 = 62 /* _BinaryenSplatVecI32x4 */,\n  SplatI64x2 = 63 /* _BinaryenSplatVecI64x2 */,\n  SplatF32x4 = 64 /* _BinaryenSplatVecF32x4 */,\n  SplatF64x2 = 65 /* _BinaryenSplatVecF64x2 */,\n  NotV128 = 66 /* _BinaryenNotVec128 */,\n  NegI8x16 = 67 /* _BinaryenNegVecI8x16 */,\n  AnyTrueI8x16 = 68 /* _BinaryenAnyTrueVecI8x16 */,\n  AllTrueI8x16 = 69 /* _BinaryenAllTrueVecI8x16 */,\n  NegI16x8 = 70 /* _BinaryenNegVecI16x8 */,\n  AnyTrueI16x8 = 71 /* _BinaryenAnyTrueVecI16x8 */,\n  AllTrueI16x8 = 72 /* _BinaryenAllTrueVecI16x8 */,\n  NegI32x4 = 73 /* _BinaryenNegVecI32x4 */,\n  AnyTrueI32x4 = 74 /* _BinaryenAnyTrueVecI32x4 */,\n  AllTrueI32x4 = 75 /* _BinaryenAllTrueVecI32x4 */,\n  NegI64x2 = 76 /* _BinaryenNegVecI64x2 */,\n  AnyTrueI64x2 = 77 /* _BinaryenAnyTrueVecI64x2 */,\n  AllTrueI64x2 = 78 /* _BinaryenAllTrueVecI64x2 */,\n  AbsF32x4 = 79 /* _BinaryenAbsVecF32x4 */,\n  NegF32x4 = 80 /* _BinaryenNegVecF32x4 */,\n  SqrtF32x4 = 81 /* _BinaryenSqrtVecF32x4 */,\n  AbsF64x2 = 82 /* _BinaryenAbsVecF64x2 */,\n  NegF64x2 = 83 /* _BinaryenNegVecF64x2 */,\n  SqrtF64x2 = 84 /* _BinaryenSqrtVecF64x2 */,\n  TruncSatF32x4ToI32x4 = 85 /* _BinaryenTruncSatSVecF32x4ToVecI32x4 */,\n  TruncSatF32x4ToU32x4 = 86 /* _BinaryenTruncSatUVecF32x4ToVecI32x4 */,\n  TruncSatF64x2ToI64x2 = 87 /* _BinaryenTruncSatSVecF64x2ToVecI64x2 */,\n  TruncSatF64x2ToU64x2 = 88 /* _BinaryenTruncSatUVecF64x2ToVecI64x2 */,\n  ConvertI32x4ToF32x4 = 89 /* _BinaryenConvertSVecI32x4ToVecF32x4 */,\n  ConvertU32x4ToF32x4 = 90 /* _BinaryenConvertUVecI32x4ToVecF32x4 */,\n  ConvertI64x2ToF64x2 = 91 /* _BinaryenConvertSVecI64x2ToVecF64x2 */,\n  ConvertU64x2ToF64x2 = 92 /* _BinaryenConvertUVecI64x2ToVecF64x2 */,\n  WidenLowI8x16ToI16x8 = 93 /* _BinaryenWidenLowSVecI8x16ToVecI16x8 */,\n  WidenHighI8x16ToI16x8 = 94 /* _BinaryenWidenHighSVecI8x16ToVecI16x8 */,\n  WidenLowU8x16ToU16x8 = 95 /* _BinaryenWidenLowUVecI8x16ToVecI16x8 */,\n  WidenHighU8x16ToU16x8 = 96 /* _BinaryenWidenHighUVecI8x16ToVecI16x8 */,\n  WidenLowI16x8ToI32x4 = 97 /* _BinaryenWidenLowSVecI16x8ToVecI32x4 */,\n  WidenHighI16x8ToI32x4 = 98 /* _BinaryenWidenHighSVecI16x8ToVecI32x4 */,\n  WidenLowU16x8ToU32x4 = 99 /* _BinaryenWidenLowUVecI16x8ToVecI32x4 */,\n  WidenHighU16x8ToU32x4 = 100 /* _BinaryenWidenHighUVecI16x8ToVecI32x4 */\n}\n\nexport enum BinaryOp {\n  AddI32 = 0 /* _BinaryenAddInt32 */,\n  SubI32 = 1 /* _BinaryenSubInt32 */,\n  MulI32 = 2 /* _BinaryenMulInt32 */,\n  DivI32 = 3 /* _BinaryenDivSInt32 */,\n  DivU32 = 4 /* _BinaryenDivUInt32 */,\n  RemI32 = 5 /* _BinaryenRemSInt32 */,\n  RemU32 = 6 /* _BinaryenRemUInt32 */,\n  AndI32 = 7 /* _BinaryenAndInt32 */,\n  OrI32 = 8 /* _BinaryenOrInt32 */,\n  XorI32 = 9 /* _BinaryenXorInt32 */,\n  ShlI32 = 10 /* _BinaryenShlInt32 */,\n  ShrU32 = 11 /* _BinaryenShrUInt32 */,\n  ShrI32 = 12 /* _BinaryenShrSInt32 */,\n  RotlI32 = 13 /* _BinaryenRotLInt32 */,\n  RotrI32 = 14 /* _BinaryenRotRInt32 */,\n  EqI32 = 15 /* _BinaryenEqInt32 */,\n  NeI32 = 16 /* _BinaryenNeInt32 */,\n  LtI32 = 17 /* _BinaryenLtSInt32 */,\n  LtU32 = 18 /* _BinaryenLtUInt32 */,\n  LeI32 = 19 /* _BinaryenLeSInt32 */,\n  LeU32 = 20 /* _BinaryenLeUInt32 */,\n  GtI32 = 21 /* _BinaryenGtSInt32 */,\n  GtU32 = 22 /* _BinaryenGtUInt32 */,\n  GeI32 = 23 /* _BinaryenGeSInt32 */,\n  GeU32 = 24 /* _BinaryenGeUInt32 */,\n  AddI64 = 25 /* _BinaryenAddInt64 */,\n  SubI64 = 26 /* _BinaryenSubInt64 */,\n  MulI64 = 27 /* _BinaryenMulInt64 */,\n  DivI64 = 28 /* _BinaryenDivSInt64 */,\n  DivU64 = 29 /* _BinaryenDivUInt64 */,\n  RemI64 = 30 /* _BinaryenRemSInt64 */,\n  RemU64 = 31 /* _BinaryenRemUInt64 */,\n  AndI64 = 32 /* _BinaryenAndInt64 */,\n  OrI64 = 33 /* _BinaryenOrInt64 */,\n  XorI64 = 34 /* _BinaryenXorInt64 */,\n  ShlI64 = 35 /* _BinaryenShlInt64 */,\n  ShrU64 = 36 /* _BinaryenShrUInt64 */,\n  ShrI64 = 37 /* _BinaryenShrSInt64 */,\n  RotlI64 = 38 /* _BinaryenRotLInt64 */,\n  RotrI64 = 39 /* _BinaryenRotRInt64 */,\n  EqI64 = 40 /* _BinaryenEqInt64 */,\n  NeI64 = 41 /* _BinaryenNeInt64 */,\n  LtI64 = 42 /* _BinaryenLtSInt64 */,\n  LtU64 = 43 /* _BinaryenLtUInt64 */,\n  LeI64 = 44 /* _BinaryenLeSInt64 */,\n  LeU64 = 45 /* _BinaryenLeUInt64 */,\n  GtI64 = 46 /* _BinaryenGtSInt64 */,\n  GtU64 = 47 /* _BinaryenGtUInt64 */,\n  GeI64 = 48 /* _BinaryenGeSInt64 */,\n  GeU64 = 49 /* _BinaryenGeUInt64 */,\n  AddF32 = 50 /* _BinaryenAddFloat32 */,\n  SubF32 = 51 /* _BinaryenSubFloat32 */,\n  MulF32 = 52 /* _BinaryenMulFloat32 */,\n  DivF32 = 53 /* _BinaryenDivFloat32 */,\n  CopysignF32 = 54 /* _BinaryenCopySignFloat32 */,\n  MinF32 = 55 /* _BinaryenMinFloat32 */,\n  MaxF32 = 56 /* _BinaryenMaxFloat32 */,\n  EqF32 = 57 /* _BinaryenEqFloat32 */,\n  NeF32 = 58 /* _BinaryenNeFloat32 */,\n  LtF32 = 59 /* _BinaryenLtFloat32 */,\n  LeF32 = 60 /* _BinaryenLeFloat32 */,\n  GtF32 = 61 /* _BinaryenGtFloat32 */,\n  GeF32 = 62 /* _BinaryenGeFloat32 */,\n  AddF64 = 63 /* _BinaryenAddFloat64 */,\n  SubF64 = 64 /* _BinaryenSubFloat64 */,\n  MulF64 = 65 /* _BinaryenMulFloat64 */,\n  DivF64 = 66 /* _BinaryenDivFloat64 */,\n  CopysignF64 = 67 /* _BinaryenCopySignFloat64 */,\n  MinF64 = 68 /* _BinaryenMinFloat64 */,\n  MaxF64 = 69 /* _BinaryenMaxFloat64 */,\n  EqF64 = 70 /* _BinaryenEqFloat64 */,\n  NeF64 = 71 /* _BinaryenNeFloat64 */,\n  LtF64 = 72 /* _BinaryenLtFloat64 */,\n  LeF64 = 73 /* _BinaryenLeFloat64 */,\n  GtF64 = 74 /* _BinaryenGtFloat64 */,\n  GeF64 = 75 /* _BinaryenGeFloat64 */,\n\n  // see: https://github.com/WebAssembly/simd\n  EqI8x16 = 76 /* _BinaryenEqVecI8x16 */,\n  NeI8x16 = 77 /* _BinaryenNeVecI8x16 */,\n  LtI8x16 = 78 /* _BinaryenLtSVecI8x16 */,\n  LtU8x16 = 79 /* _BinaryenLtUVecI8x16 */,\n  GtI8x16 = 80 /* _BinaryenGtSVecI8x16 */,\n  GtU8x16 = 81 /* _BinaryenGtUVecI8x16 */,\n  LeI8x16 = 82 /* _BinaryenLeSVecI8x16 */,\n  LeU8x16 = 83 /* _BinaryenLeUVecI8x16 */,\n  GeI8x16 = 84 /* _BinaryenGeSVecI8x16 */,\n  GeU8x16 = 85 /* _BinaryenGeUVecI8x16 */,\n  EqI16x8 = 86 /* _BinaryenEqVecI16x8 */,\n  NeI16x8 = 87 /* _BinaryenNeVecI16x8 */,\n  LtI16x8 = 88 /* _BinaryenLtSVecI16x8 */,\n  LtU16x8 = 89 /* _BinaryenLtUVecI16x8 */,\n  GtI16x8 = 90 /* _BinaryenGtSVecI16x8 */,\n  GtU16x8 = 91 /* _BinaryenGtUVecI16x8 */,\n  LeI16x8 = 92 /* _BinaryenLeSVecI16x8 */,\n  LeU16x8 = 93 /* _BinaryenLeUVecI16x8 */,\n  GeI16x8 = 94 /* _BinaryenGeSVecI16x8 */,\n  GeU16x8 = 95 /* _BinaryenGeUVecI16x8 */,\n  EqI32x4 = 96 /* _BinaryenEqVecI32x4 */,\n  NeI32x4 = 97 /* _BinaryenNeVecI32x4 */,\n  LtI32x4 = 98 /* _BinaryenLtSVecI32x4 */,\n  LtU32x4 = 99 /* _BinaryenLtUVecI32x4 */,\n  GtI32x4 = 100 /* _BinaryenGtSVecI32x4 */,\n  GtU32x4 = 101 /* _BinaryenGtUVecI32x4 */,\n  LeI32x4 = 102 /* _BinaryenLeSVecI32x4 */,\n  LeU32x4 = 103 /* _BinaryenLeUVecI32x4 */,\n  GeI32x4 = 104 /* _BinaryenGeSVecI32x4 */,\n  GeU32x4 = 105 /* _BinaryenGeUVecI32x4 */,\n  EqF32x4 = 106 /* _BinaryenEqVecF32x4 */,\n  NeF32x4 = 107 /* _BinaryenNeVecF32x4 */,\n  LtF32x4 = 108 /* _BinaryenLtVecF32x4 */,\n  GtF32x4 = 109 /* _BinaryenGtVecF32x4 */,\n  LeF32x4 = 110 /* _BinaryenLeVecF32x4 */,\n  GeF32x4 = 111 /* _BinaryenGeVecF32x4 */,\n  EqF64x2 = 112 /* _BinaryenEqVecF64x2 */,\n  NeF64x2 = 113 /* _BinaryenNeVecF64x2 */,\n  LtF64x2 = 114 /* _BinaryenLtVecF64x2 */,\n  GtF64x2 = 115 /* _BinaryenGtVecF64x2 */,\n  LeF64x2 = 116 /* _BinaryenLeVecF64x2 */,\n  GeF64x2 = 117 /* _BinaryenGeVecF64x2 */,\n  AndV128 = 118 /* _BinaryenAndVec128 */,\n  OrV128 = 119 /* _BinaryenOrVec128 */,\n  XorV128 = 120 /* _BinaryenXorVec128 */,\n  AndNotV128 = 121 /* _BinaryenAndNotVec128 */,\n  AddI8x16 = 122 /* _BinaryenAddVecI8x16 */,\n  AddSatI8x16 = 123 /* _BinaryenAddSatSVecI8x16 */,\n  AddSatU8x16 = 124 /* _BinaryenAddSatUVecI8x16 */,\n  SubI8x16 = 125 /* _BinaryenSubVecI8x16 */,\n  SubSatI8x16 = 126 /* _BinaryenSubSatSVecI8x16 */,\n  SubSatU8x16 = 127 /* _BinaryenSubSatUVecI8x16 */,\n  MulI8x16 = 128 /* _BinaryenMulVecI8x16 */,\n  MinI8x16 = 129 /* _BinaryenMinSVecI8x16 */,\n  MinU8x16 = 130 /* _BinaryenMinUVecI8x16 */,\n  MaxI8x16 = 131 /* _BinaryenMaxSVecI8x16 */,\n  MaxU8x16 = 132 /* _BinaryenMaxUVecI8x16 */,\n  AvgrU8x16 = 133 /* _BinaryenAvgrUVecI8x16 */,\n  AddI16x8 = 134 /* _BinaryenAddVecI16x8 */,\n  AddSatI16x8 = 135 /* _BinaryenAddSatSVecI16x8 */,\n  AddSatU16x8 = 136 /* _BinaryenAddSatUVecI16x8 */,\n  SubI16x8 = 137 /* _BinaryenSubVecI16x8 */,\n  SubSatI16x8 = 138 /* _BinaryenSubSatSVecI16x8 */,\n  SubSatU16x8 = 139 /* _BinaryenSubSatUVecI16x8 */,\n  MulI16x8 = 140 /* _BinaryenMulVecI16x8 */,\n  MinI16x8 = 141 /* _BinaryenMinSVecI16x8 */,\n  MinU16x8 = 142 /* _BinaryenMinUVecI16x8 */,\n  MaxI16x8 = 143 /* _BinaryenMaxSVecI16x8 */,\n  MaxU16x8 = 144 /* _BinaryenMaxUVecI16x8 */,\n  AvgrU16x8 = 145 /* _BinaryenAvgrUVecI16x8 */,\n  AddI32x4 = 146 /* _BinaryenAddVecI32x4 */,\n  SubI32x4 = 147 /* _BinaryenSubVecI32x4 */,\n  MulI32x4 = 148 /* _BinaryenMulVecI32x4 */,\n  MinI32x4 = 149 /* _BinaryenMinSVecI32x4 */,\n  MinU32x4 = 150 /* _BinaryenMinUVecI32x4 */,\n  MaxI32x4 = 151 /* _BinaryenMaxSVecI32x4 */,\n  MaxU32x4 = 152 /* _BinaryenMaxUVecI32x4 */,\n  DotI16x8 = 153 /* _BinaryenDotSVecI16x8ToVecI32x4 */,\n  AddI64x2 = 154 /* _BinaryenAddVecI64x2 */,\n  SubI64x2 = 155 /* _BinaryenSubVecI64x2 */,\n  AddF32x4 = 156 /* _BinaryenAddVecF32x4 */,\n  SubF32x4 = 157 /* _BinaryenSubVecF32x4 */,\n  MulF32x4 = 158 /* _BinaryenMulVecF32x4 */,\n  DivF32x4 = 159 /* _BinaryenDivVecF32x4 */,\n  MinF32x4 = 160 /* _BinaryenMinVecF32x4 */,\n  MaxF32x4 = 161 /* _BinaryenMaxVecF32x4 */,\n  AddF64x2 = 162 /* _BinaryenAddVecF64x2 */,\n  SubF64x2 = 163 /* _BinaryenSubVecF64x2 */,\n  MulF64x2 = 164 /* _BinaryenMulVecF64x2 */,\n  DivF64x2 = 165 /* _BinaryenDivVecF64x2 */,\n  MinF64x2 = 166 /* _BinaryenMinVecF64x2 */,\n  MaxF64x2 = 167 /* _BinaryenMaxVecF64x2 */,\n  NarrowI16x8ToI8x16 = 168 /* _BinaryenNarrowSVecI16x8ToVecI8x16 */,\n  NarrowU16x8ToU8x16 = 169 /* _BinaryenNarrowUVecI16x8ToVecI8x16 */,\n  NarrowI32x4ToI16x8 = 170 /* _BinaryenNarrowSVecI32x4ToVecI16x8 */,\n  NarrowU32x4ToU16x8 = 171 /* _BinaryenNarrowUVecI32x4ToVecI16x8 */,\n  SwizzleV8x16 = 172 /* _BinaryenSwizzleVec8x16 */\n}\n\nexport enum HostOp {\n  MemorySize = 0 /* _BinaryenMemorySize */,\n  MemoryGrow = 1 /* _BinaryenMemoryGrow */,\n}\n\nexport enum AtomicRMWOp {\n  Add = 0 /* _BinaryenAtomicRMWAdd */,\n  Sub = 1 /* _BinaryenAtomicRMWSub */,\n  And = 2 /* _BinaryenAtomicRMWAnd */,\n  Or = 3 /* _BinaryenAtomicRMWOr */,\n  Xor = 4 /* _BinaryenAtomicRMWXor */,\n  Xchg = 5 /* _BinaryenAtomicRMWXchg */\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneI8x16 = 0 /* _BinaryenExtractLaneSVecI8x16 */,\n  ExtractLaneU8x16 = 1 /* _BinaryenExtractLaneUVecI8x16 */,\n  ExtractLaneI16x8 = 2 /* _BinaryenExtractLaneSVecI16x8 */,\n  ExtractLaneU16x8 = 3 /* _BinaryenExtractLaneUVecI16x8 */,\n  ExtractLaneI32x4 = 4 /* _BinaryenExtractLaneVecI32x4 */,\n  ExtractLaneI64x2 = 5 /* _BinaryenExtractLaneVecI64x2 */,\n  ExtractLaneF32x4 = 6 /* _BinaryenExtractLaneVecF32x4 */,\n  ExtractLaneF64x2 = 7 /* _BinaryenExtractLaneVecF64x2 */,\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneI8x16 = 0 /* _BinaryenReplaceLaneVecI8x16 */,\n  ReplaceLaneI16x8 = 1 /* _BinaryenReplaceLaneVecI16x8 */,\n  ReplaceLaneI32x4 = 2 /* _BinaryenReplaceLaneVecI32x4 */,\n  ReplaceLaneI64x2 = 3 /* _BinaryenReplaceLaneVecI64x2 */,\n  ReplaceLaneF32x4 = 4 /* _BinaryenReplaceLaneVecF32x4 */,\n  ReplaceLaneF64x2 = 5 /* _BinaryenReplaceLaneVecF64x2 */\n}\n\nexport enum SIMDShiftOp {\n  ShlI8x16 = 0 /* _BinaryenShlVecI8x16 */,\n  ShrI8x16 = 1 /* _BinaryenShrSVecI8x16 */,\n  ShrU8x16 = 2 /* _BinaryenShrUVecI8x16 */,\n  ShlI16x8 = 3 /* _BinaryenShlVecI16x8 */,\n  ShrI16x8 = 4 /* _BinaryenShrSVecI16x8 */,\n  ShrU16x8 = 5 /* _BinaryenShrUVecI16x8 */,\n  ShlI32x4 = 6 /* _BinaryenShlVecI32x4 */,\n  ShrI32x4 = 7 /* _BinaryenShrSVecI32x4 */,\n  ShrU32x4 = 8 /* _BinaryenShrUVecI32x4 */,\n  ShlI64x2 = 9 /* _BinaryenShlVecI64x2 */,\n  ShrI64x2 = 10 /* _BinaryenShrSVecI64x2 */,\n  ShrU64x2 = 11 /* _BinaryenShrUVecI64x2 */\n}\n\nexport enum SIMDTernaryOp {\n  Bitselect = 0 /* _BinaryenBitselectVec128 */,\n  QFMAF32x4 = 1 /* _BinaryenQFMAVecF32x4 */,\n  QFMSF32x4 = 2 /* _BinaryenQFMSVecF32x4 */,\n  QFMAF64x2 = 3 /* _BinaryenQFMAVecF64x2 */,\n  QFMSF64x2 = 4 /* _BinaryenQFMSVecF64x2 */\n}\n\nexport enum SIMDLoadOp {\n  LoadSplatV8x16 = 0 /* _BinaryenLoadSplatVec8x16 */,\n  LoadSplatV16x8 = 1 /* _BinaryenLoadSplatVec16x8 */,\n  LoadSplatV32x4 = 2 /* _BinaryenLoadSplatVec32x4 */,\n  LoadSplatV64x2 = 3 /* _BinaryenLoadSplatVec64x2 */,\n  LoadI8ToI16x8 = 4 /* _BinaryenLoadExtSVec8x8ToVecI16x8 */,\n  LoadU8ToU16x8 = 5 /* _BinaryenLoadExtUVec8x8ToVecI16x8 */,\n  LoadI16ToI32x4 = 6 /* _BinaryenLoadExtSVec16x4ToVecI32x4 */,\n  LoadU16ToU32x4 = 7 /* _BinaryenLoadExtUVec16x4ToVecI32x4 */,\n  LoadI32ToI64x2 = 8 /* _BinaryenLoadExtSVec32x2ToVecI64x2 */,\n  LoadU32ToU64x2 = 9 /* _BinaryenLoadExtUVec32x2ToVecI64x2 */\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: i64;\n\n  static create(buffer: Uint8Array, offset: i64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = binaryen._BinaryenModuleCreate();\n    module.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var module = new Module();\n    var cArr = allocU8Array(buffer);\n    module.ref = binaryen._BinaryenModuleRead(cArr, buffer.length);\n    binaryen._free(changetype<usize>(cArr));\n    module.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n    return module;\n  }\n\n  private constructor() { }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat64(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) binaryen.__i32_store8(out + i, bytes[i]);\n    binaryen._BinaryenLiteralVec128(out, out);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  ref_null(): ExpressionRef {\n    return binaryen._BinaryenRefNull(this.ref);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenBinary(this.ref, op, left, right);\n  }\n\n  host(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef,\n    type: NativeType = NativeType.Auto\n  ): ExpressionRef {\n    if (type == NativeType.Auto) type = binaryen._BinaryenExpressionGetType(value);\n    return binaryen._BinaryenLocalTee(this.ref, index, value, type);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  atomic_fence(): ExpressionRef {\n    return binaryen._BinaryenAtomicFence(this.ref);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    var ret = binaryen._BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  /** Attempts to trivially flatten a series of expressions instead of emitting a block. */\n  flatten(\n    stmts: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var length = stmts.length;\n    if (length == 0) return this.nop(); // usually filtered out again\n    if (length == 1) {\n      let single = stmts[0];\n      switch (getExpressionId(single)) {\n        case ExpressionId.Return:\n        case ExpressionId.Throw:\n        case ExpressionId.Unreachable: {\n          // type does no matter, terminates anyway\n          return single;\n        }\n      }\n      let singleType = getExpressionType(single);\n      assert(singleType == NativeType.Unreachable || singleType == type);\n      return single;\n    }\n    return this.block(null, stmts, type);\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenDrop(this.ref, expression);\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return binaryen._BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef,\n    type: NativeType = NativeType.Auto\n  ): ExpressionRef {\n    if (type == NativeType.Auto) {\n      type = binaryen._BinaryenExpressionGetType(ifTrue);\n      assert(type == binaryen._BinaryenExpressionGetType(ifFalse));\n    }\n    return binaryen._BinaryenSelect(this.ref, condition, ifTrue, ifFalse, type);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocPtrArray(strs);\n    var cStr = this.allocStringCached(defaultName);\n    var ret = binaryen._BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCall(this.ref, cStr, cArr, operands ? operands.length : 0, returnType)\n      : binaryen._BinaryenCall(this.ref, cStr, cArr, operands ? operands.length : 0, returnType);\n      binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    return this.call(target, operands, returnType, true);\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCallIndirect(this.ref, index, cArr, operands ? operands.length : 0, params, results)\n      : binaryen._BinaryenCallIndirect(this.ref, index, cArr, operands ? operands.length : 0, params, results);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType\n  ): ExpressionRef {\n    return this.call_indirect(index, operands, params, results, true);\n  }\n\n  unreachable(): ExpressionRef {\n    return binaryen._BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // exception handling\n\n  try(\n    body: ExpressionRef,\n    catchBody: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenTry(this.ref, body, catchBody);\n  }\n\n  throw(\n    eventName: string,\n    operands: ExpressionRef[]\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(eventName);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenThrow(this.ref, cStr, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  rethrow(\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRethrow(this.ref, exnref);\n  }\n\n  br_on_exn(\n    name: string,\n    eventName: string,\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    var cStr1 = this.allocStringCached(name);\n    var cStr2 = this.allocStringCached(eventName);\n    return binaryen._BinaryenBrOnExn(this.ref, cStr1, cStr2, exnref);\n  }\n\n  // push / pop (multi value?)\n\n  push(\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenPush(this.ref, value);\n  }\n\n  pop(\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenPop(this.ref, type);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    var ret = binaryen._BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  simd_ternary(\n    op: SIMDTernaryOp,\n    a: ExpressionRef,\n    b: ExpressionRef,\n    c: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDTernary(this.ref, op, a, b, c);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  simd_load(\n    op: SIMDLoadOp,\n    ptr: ExpressionRef,\n    offset: u32,\n    align: u32\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDLoad(this.ref, op, offset, align, ptr);\n  }\n\n  // reference types\n\n  ref_is_null(\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRefIsNull(this.ref, expr);\n  }\n\n  ref_func(\n    name: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenRefFunc(this.ref, cStr);\n  }\n\n  // globals\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddGlobal(this.ref, cStr, type, mutable, initializer);\n  }\n\n  getGlobal(\n    name: string\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetGlobal(this.ref, cStr);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  // events\n\n  addEvent(\n    name: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddEvent(this.ref, cStr, attribute, params, results);\n  }\n\n  getEvent(\n    name: string\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetEvent(this.ref, cStr);\n  }\n\n  removeEvent(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveEvent(this.ref, cStr);\n  }\n\n  // functions\n\n  addFunction(\n    name: string,\n    params: NativeType,\n    results: NativeType,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    var ret = binaryen._BinaryenAddFunction(this.ref, cStr, params, results, cArr, varTypes ? varTypes.length : 0, body);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  getFunction(\n    name: string\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetFunction(this.ref, cStr);\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    var ret = binaryen._BinaryenAddFunction(this.ref,\n      tempName,\n      createType(paramTypes),\n      result,\n      0, 0,\n      body\n    );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    binaryen._BinaryenRemoveFunction(this.ref, tempName);\n  }\n\n  setStart(func: FunctionRef): void {\n    binaryen._BinaryenSetStart(this.ref, func);\n  }\n\n  // exports\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  addEventExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddEventExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    binaryen._BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  // imports\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, params, results);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType,\n    mutable: bool = false\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType, mutable);\n  }\n\n  addEventImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddEventImport(this.ref, cStr1, cStr2, cStr3, attribute, params, results);\n  }\n\n  // memory\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Uint8Array(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocPtrArray(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocPtrArray(offs);\n    var cArr4 = allocU32Array(sizs);\n    binaryen._BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\n    binaryen._free(cArr4);\n    binaryen._free(cArr3);\n    binaryen._free(cArr2);\n    binaryen._free(cArr1);\n    for (let i = k - 1; i >= 0; --i) binaryen._free(segs[i]);\n  }\n\n  // table\n\n  /** Unlimited table constant. */\n  static readonly UNLIMITED_TABLE: Index = <Index>-1;\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[],\n    offset: ExpressionRef\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocPtrArray(names);\n    binaryen._BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames, offset);\n    binaryen._free(cArr);\n  }\n\n  // sections\n\n  addCustomSection(name: string, contents: Uint8Array): void {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocU8Array(contents);\n    binaryen._BinaryenAddCustomSection(this.ref, cStr, cArr, contents.length);\n    binaryen._free(cArr);\n  }\n\n  // meta (global)\n\n  getOptimizeLevel(): i32 {\n    return binaryen._BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32): void {\n    binaryen._BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return binaryen._BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32): void {\n    binaryen._BinaryenSetShrinkLevel(level);\n  }\n\n  getDebugInfo(): boolean {\n    return binaryen._BinaryenGetDebugInfo();\n  }\n\n  setDebugInfo(on: bool): void {\n    binaryen._BinaryenSetDebugInfo(on);\n  }\n\n  getLowMemoryUnused(): bool {\n    return binaryen._BinaryenGetLowMemoryUnused();\n  }\n\n  setLowMemoryUnused(on: bool): void {\n    binaryen._BinaryenSetLowMemoryUnused(on);\n  }\n\n  getPassArgument(key: string): string | null {\n    var cStr = this.allocStringCached(key);\n    var ptr = binaryen._BinaryenGetPassArgument(cStr);\n    return ptr ? readString(ptr) : null;\n  }\n\n  setPassArgument(key: string, value: string | null): void {\n    var cStr1 = this.allocStringCached(key);\n    var cStr2 = this.allocStringCached(value);\n    binaryen._BinaryenSetPassArgument(cStr1, cStr2);\n  }\n\n  clearPassArguments(): void {\n    binaryen._BinaryenClearPassArguments();\n  }\n\n  getAlwaysInlineMaxSize(): Index {\n    return binaryen._BinaryenGetAlwaysInlineMaxSize();\n  }\n\n  setAlwaysInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetAlwaysInlineMaxSize(size);\n  }\n\n  getFlexibleInlineMaxSize(): Index {\n    return binaryen._BinaryenGetFlexibleInlineMaxSize();\n  }\n\n  setFlexibleInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetFlexibleInlineMaxSize(size);\n  }\n\n  getOneCallerInlineMaxSize(): Index {\n    return binaryen._BinaryenGetOneCallerInlineMaxSize();\n  }\n\n  setOneCallerInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetOneCallerInlineMaxSize(size);\n  }\n\n  // meta (module)\n\n  getFeatures(): FeatureFlags {\n    return binaryen._BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: FeatureFlags): void {\n    binaryen._BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      binaryen._BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      binaryen._BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocPtrArray(names);\n    if (func) {\n      binaryen._BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n    } else {\n      binaryen._BinaryenModuleRunPasses(this.ref, cArr, numNames);\n    }\n    binaryen._free(cArr);\n    for (let i = numNames; i >= 0; --i) binaryen._free(names[i]);\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = binaryen._BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = binaryen._BinaryenGetShrinkLevel();\n    var previousDebugInfo = binaryen._BinaryenGetDebugInfo();\n    binaryen._BinaryenSetOptimizeLevel(4);\n    binaryen._BinaryenSetShrinkLevel(0);\n    binaryen._BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = binaryen._BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocPtrArray([\n        this.allocStringCached(\"vacuum\"),\n        this.allocStringCached(\"precompute\")\n      ]);\n    }\n    binaryen._BinaryenFunctionRunPasses(func, this.ref, names, 2);\n    expr = binaryen._BinaryenFunctionGetBody(func);\n    if (binaryen._BinaryenExpressionGetId(expr) == ExpressionId.Return) {\n      expr = binaryen._BinaryenReturnGetValue(expr);\n    }\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    binaryen._BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    binaryen._BinaryenSetShrinkLevel(previousShrinkLevel);\n    binaryen._BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return binaryen._BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    binaryen._BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(binaryen._BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    binaryen._BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n    binaryPtr = assert(binaryen.__i32_load(out));\n    var binaryLen = binaryen.__i32_load(out + 4);\n    sourceMapPtr = binaryen.__i32_load(out + 8); // may be NULL\n    var ret = new BinaryModule();\n    ret.output = readBuffer(binaryPtr, binaryLen);\n    ret.sourceMap = readString(sourceMapPtr);\n    binaryen._free(cStr);\n    binaryen._free(binaryPtr);\n    if (sourceMapPtr) binaryen._free(sourceMapPtr);\n    return ret;\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str === null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    // TODO: for (let ptr of this.cachedStrings.values()) {\n    for (let _values = Map_values(this.cachedStrings), i = 0, k = _values.length; i < k; ++i) {\n      let ptr = unchecked(_values[i]);\n      binaryen._free(ptr);\n    }\n    this.cachedStrings = new Map();\n    binaryen._free(this.lit);\n    binaryen._free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    binaryen._BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (binaryen._BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (binaryen._BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.i32(binaryen._BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.i64(\n              binaryen._BinaryenConstGetValueI64Low(expr),\n              binaryen._BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.f32(binaryen._BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.f64(binaryen._BinaryenConstGetValueF64(expr));\n          }\n          case NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          // Not possible to clone an anyref as it is opaque\n          case NativeType.Anyref: {\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return binaryen._BinaryenLocalGet(this.ref,\n          binaryen._BinaryenLocalGetGetIndex(expr),\n          binaryen._BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = binaryen._BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return binaryen._BinaryenGlobalGet(this.ref, globalName, binaryen._BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          binaryen._BinaryenLoadIsAtomic(expr)\n            ? binaryen._BinaryenAtomicLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : binaryen._BinaryenLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadIsSigned(expr) ? 1 : 0,\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenLoadGetAlign(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return binaryen._BinaryenUnary(this.ref, binaryen._BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(binaryen._BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return binaryen._BinaryenBinary(this.ref, binaryen._BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    var ret = binaryen._BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    binaryen._free(cStr);\n    return ret;\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(binaryen._BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    binaryen._BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// types\n\nexport function createType(types: NativeType[] | null): NativeType {\n  if (!types) return NativeType.None;\n  switch (types.length) {\n    case 0: return NativeType.None;\n    case 1: return types[0];\n  }\n  var cArr = allocI32Array(types);\n  var ret = binaryen._BinaryenTypeCreate(cArr, types.length);\n  binaryen._free(cArr);\n  return ret;\n}\n\nexport function expandType(type: NativeType): NativeType[] {\n  var arity = binaryen._BinaryenTypeArity(type);\n  var cArr = binaryen._malloc(<usize>arity << 2);\n  binaryen._BinaryenTypeExpand(type, cArr);\n  var types = new Array<NativeType>(arity);\n  for (let i: u32 = 0; i < arity; ++i) {\n    types[i] = binaryen.__i32_load(cArr + (<usize>i << 2));\n  }\n  binaryen._free(cArr);\n  return types;\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return binaryen._BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return binaryen._BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return binaryen._BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f64 {\n  return binaryen._BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return binaryen._BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return binaryen._BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenCallGetOperand(expr, index);\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return binaryen._BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(binaryen._BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParams(func: FunctionRef): Index {\n  return binaryen._BinaryenFunctionGetParams(func);\n}\n\nexport function getFunctionResults(func: FunctionRef): NativeType {\n  return binaryen._BinaryenFunctionGetResults(func);\n}\n\nexport function getFunctionVars(func: FunctionRef): NativeType {\n  // TODO: unify this on Binaryen's side?\n  var count = binaryen._BinaryenFunctionGetNumVars(func);\n  var types = new Array<NativeType>(count);\n  for (let i: Index = 0; i < count; ++i) {\n    types[i] = binaryen._BinaryenFunctionGetVar(func, i);\n  }\n  return createType(types);\n}\n\n// globals\n\nexport function getGlobalName(global: GlobalRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetName(global));\n}\n\nexport function getGlobalType(global: GlobalRef): NativeType {\n  return binaryen._BinaryenGlobalGetType(global);\n}\n\nexport function isGlobalMutable(global: GlobalRef): bool {\n  return binaryen._BinaryenGlobalIsMutable(global);\n}\n\nexport function getGlobalInit(global: GlobalRef): ExpressionRef {\n  return binaryen._BinaryenGlobalGetInitExpr(global);\n}\n\n// events\n\nexport function getEventName(event: EventRef): string | null {\n  return readString(binaryen._BinaryenEventGetName(event));\n}\n\nexport function getEventAttribute(event: EventRef): u32 {\n  return binaryen._BinaryenEventGetAttribute(event);\n}\n\nexport function getEventParams(event: EventRef): NativeType {\n  return binaryen._BinaryenEventGetParams(event);\n}\n\nexport function getEventResults(event: EventRef): NativeType {\n  return binaryen._BinaryenEventGetResults(event);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = binaryen._RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    binaryen._RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    binaryen._RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    binaryen._free(cArr);\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return binaryen._RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\nexport enum SideEffects {\n  None = 0 /* _BinaryenSideEffectNone */,\n  Branches = 1 /* _BinaryenSideEffectBranches */,\n  Calls = 2 /* _BinaryenSideEffectCalls */,\n  ReadsLocal = 4 /* _BinaryenSideEffectReadsLocal */,\n  WritesLocal = 8 /* _BinaryenSideEffectWritesLocal */,\n  ReadsGlobal = 16 /* _BinaryenSideEffectReadsGlobal */,\n  WritesGlobal = 32 /* _BinaryenSideEffectWritesGlobal */,\n  ReadsMemory = 64 /* _BinaryenSideEffectReadsMemory */,\n  WritesMemory = 128 /* _BinaryenSideEffectWritesMemory */,\n  ImplicitTrap = 256 /* _BinaryenSideEffectImplicitTrap */,\n  IsAtomic = 512 /* _BinaryenSideEffectIsAtomic */,\n  Throws = 1024 /* _BinaryenSideEffectThrows */,\n  Any = 2047 /* _BinaryenSideEffectAny */,\n}\n\nexport function getSideEffects(expr: ExpressionRef, features: FeatureFlags = FeatureFlags.All): SideEffects {\n  return binaryen._BinaryenExpressionGetSideEffects(expr, features);\n}\n\nexport function hasSideEffects(expr: ExpressionRef, features: FeatureFlags = FeatureFlags.All): bool {\n  return getSideEffects(expr, features) != SideEffects.None;\n}\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = binaryen._malloc(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    binaryen.__i32_store8(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = binaryen._malloc(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocU32Array(u32s: u32[] | null): usize {\n  if (!u32s) return 0;\n  var ptr = binaryen._malloc(u32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = u32s.length; i < k; ++i) {\n    let val = u32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  if (!ptrs) return 0;\n  // TODO: WASM64\n  assert(ASC_TARGET != Target.WASM64);\n  var ptr = binaryen._malloc(ptrs.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = ptrs.length; i < k; ++i) {\n    let val = ptrs[i];\n    binaryen.__i32_store(idx, <i32>val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str === null) return 0;\n  var ptr = binaryen._malloc(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      binaryen.__i32_store8(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      binaryen.__i32_store8(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      binaryen.__i32_store8(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      binaryen.__i32_store8(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      binaryen.__i32_store8(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      binaryen.__i32_store8(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  binaryen.__i32_store8(idx, 0);\n  return ptr;\n}\n\nfunction readBuffer(ptr: usize, length: i32): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i = 0; i < length; ++i) {\n    ret[i] = binaryen.__i32_load8_u(ptr + <usize>i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = binaryen.__i32_load8_u(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = binaryen.__i32_load8_u(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = binaryen.__i32_load8_u(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = binaryen.__i32_load8_u(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    if (cp < 0x10000) {\n      arr.push(cp);\n    } else {\n      let ch = cp - 0x10000;\n      arr.push(0xD800 | (ch >> 10));\n      arr.push(0xDC00 | (ch & 0x3FF));\n    }\n  }\n  return String.fromCharCodes(arr);\n  // return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (binaryen._BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\n\n  switch (binaryen._BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return binaryen._BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!binaryen._BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = binaryen._BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(binaryen._BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i: Index = 0, n = binaryen._BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(binaryen._BinaryenBlockGetChild(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(binaryen._BinaryenIfGetCondition(expr), data);\n      visit(binaryen._BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = binaryen._BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(binaryen._BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = binaryen._BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(binaryen._BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i: Index = 0, n = binaryen._BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i: Index = 0, n = binaryen._BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallIndirectGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(binaryen._BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(binaryen._BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(binaryen._BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(binaryen._BinaryenStoreGetPtr(expr), data);\n      visit(binaryen._BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(binaryen._BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(binaryen._BinaryenBinaryGetLeft(expr), data);\n      visit(binaryen._BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(binaryen._BinaryenSelectGetIfTrue(expr), data);\n      visit(binaryen._BinaryenSelectGetIfFalse(expr), data);\n      visit(binaryen._BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(binaryen._BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(binaryen._BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Host: {\n      for (let i: Index = 0, n = binaryen._BinaryenHostGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenHostGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(binaryen._BinaryenAtomicRMWGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(binaryen._BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(binaryen._BinaryenAtomicWaitGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(binaryen._BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicFence: {\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(binaryen._BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(binaryen._BinaryenSIMDReplaceGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(binaryen._BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(binaryen._BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDTernary: {\n      visit(binaryen._BinaryenSIMDTernaryGetA(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetB(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetC(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(binaryen._BinaryenSIMDShiftGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDLoad: {\n      visit(binaryen._BinaryenSIMDLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(binaryen._BinaryenMemoryInitGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetOffset(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(binaryen._BinaryenMemoryCopyGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSource(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(binaryen._BinaryenMemoryFillGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetValue(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Push: {\n      visit(binaryen._BinaryenPushGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Pop: {\n      break;\n    }\n    case ExpressionId.RefNull: {\n      break;\n    }\n    case ExpressionId.RefIsNull: {\n      visit(binaryen._BinaryenRefIsNullGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.RefFunc: {\n      break;\n    }\n    case ExpressionId.Try: {\n      visit(binaryen._BinaryenTryGetBody(expr), data);\n      visit(binaryen._BinaryenTryGetCatchBody(expr), data);\n      break;\n    }\n    case ExpressionId.Throw: {\n      for (let i: Index = 0, n = binaryen._BinaryenThrowGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenThrowGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Rethrow: {\n      visit(binaryen._BinaryenRethrowGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.BrOnExn: {\n      visit(binaryen._BinaryenBrOnExnGetExnref(expr), data);\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * @fileoverview Mappings from AssemblyScript types to WebAssembly types.\n * @license Apache-2.0\n */\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  createType\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // references\n\n  /** Any host reference. */\n  ANYREF,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type (either a class or a function type). */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10,\n  /** Is a host type. */\n  HOST = 1 << 11\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: i32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    if (this == Type.auto) return this; // keep auto as a hint\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    if (this.is(TypeFlags.INTEGER | TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) return !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n      // return this.signatureReference !== null; // TODO: closures\n    }\n    return false;\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): i32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): i32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.USIZE && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    var cachedNullableType = this.cachedNullableType;\n    if (!cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      cachedNullableType.nonNullableType = this;\n      cachedNullableType.classReference = this.classReference;       // either a class reference\n      cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          } else if (this.kind == TypeKind.ANYREF && target.kind == TypeKind.ANYREF) {\n            return true;\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Tests if a value of this type can be changed to the target type using `changetype`. */\n  isChangeableTo(target: Type): bool {\n    if (this.is(TypeFlags.INTEGER) && target.is(TypeFlags.INTEGER)) {\n      let size = this.size;\n      return size == target.size && (size >= 32 || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED));\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(): string {\n    if (this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.internalName + \" | null\"\n          : classReference.internalName;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString() + \") | null\"\n          : signatureReference.toString();\n      }\n      // TODO: Reflect.apply(value, \"toString\", []) ?\n      assert(this.kind == TypeKind.ANYREF);\n      return \"anyref\";\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.ANYREF: return \"anyref\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return NativeType.I32;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.ANYREF: return NativeType.Anyref;\n      case TypeKind.VOID: return NativeType.None;\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** Any host reference. */\n  static readonly anyref: Type = new Type(TypeKind.ANYREF,\n    TypeFlags.HOST       |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n  /** The unique program id that represents this signature. */\n  id: u32 = 0;\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n  /** The program that created this signature. */\n  program: Program;\n\n  /** Constructs a new signature. */\n  constructor(\n    program: Program,\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.program = program;\n    this.hasRest = false;\n    this.type = program.options.usizeType.asFunction(this);\n\n    var signatureTypes = program.uniqueSignatures;\n    var length = signatureTypes.length;\n    for (let i = 0; i < length; i++) {\n      let compare = signatureTypes[i];\n      if (this.equals(compare)) {\n        this.id = compare.id;\n        return this;\n      }\n    }\n    program.uniqueSignatures.push(this);\n    this.id = program.nextSignatureId++;\n  }\n\n  get nativeParams(): NativeType {\n    var thisType = this.thisType;\n    var parameterTypes = this.parameterTypes;\n    var numParameterTypes = parameterTypes.length;\n    if (!numParameterTypes) {\n      if (!thisType) return NativeType.None;\n      return thisType.toNativeType();\n    }\n    if (thisType) {\n      let nativeTypes = new Array<NativeType>(1 + numParameterTypes);\n      nativeTypes[0] = thisType.toNativeType();\n      for (let i = 0; i < numParameterTypes; ++i) {\n        nativeTypes[i + 1] = parameterTypes[i].toNativeType();\n      }\n      return createType(nativeTypes);\n    }\n    return createType(typesToNativeTypes(parameterTypes));\n  }\n\n  get nativeResults(): NativeType {\n    return this.returnType.toNativeType();\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames !== null && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    return this.equals(target);\n  }\n\n  /** Tests to see if a signature equals another signature. */\n  equals(value: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = value.thisType;\n    if (thisThisType !== null) {\n      if (targetThisType === null || !thisThisType.isAssignableTo(targetThisType)) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != value.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = value.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = value.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(\"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString());\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] = [];\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString());\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * @fileoverview Resolve infrastructure to obtain types and elements.\n *\n * Similar to the compiler making instructions of expressions, the resolver\n * obtains metadata of expressions. As such, for each `compileX` method in\n * the compiler there is one `lookupX` method in the resolver returning the\n * respective IR element, respectively one `resolveX` method returning the\n * respective type of an expression. It is also able to make new elements,\n * like instances of classes given its concrete type arguments.\n *\n * @license Apache-2.0\n */\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition,\n  TypedElement,\n  FunctionTarget,\n  IndexSignature,\n  isTypedElement\n} from \"./program\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  CommaExpression,\n  InstanceOfExpression,\n  TernaryExpression,\n  isTypeOmitted,\n  FunctionExpression,\n  NewExpression,\n  ArrayLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonNames\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  // ====================================================== Types ======================================================\n\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        return this.resolveNamedType(\n          <NamedTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        return this.resolveFunctionType(\n          <FunctionTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\n  private resolveNamedType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var nameNode = node.name;\n    var typeArgumentNodes = node.typeArguments;\n    var isSimpleType = !nameNode.next;\n\n    // Look up in contextual types if a simple type\n    if (isSimpleType) {\n      let simpleName = nameNode.identifier.text;\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\n        let type = assert(ctxTypes.get(simpleName));\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (type.is(TypeFlags.REFERENCE)) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, type.toString()\n            );\n          }\n        }\n        return type;\n      }\n    }\n\n    // Look up in context\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\n    if (!element) return null;\n\n    // Use shadow type if present (i.e. namespace sharing a type)\n    var shadowType = element.shadowType;\n    if (shadowType) {\n      element = shadowType;\n\n    } else {\n\n      // Handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name + \"/i32\"\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // Handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          ctxElement,\n          makeMap<string,Type>(ctxTypes), // don't inherit\n          node,\n          reportMode\n        );\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // Handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n      let typeDefinition = <TypeDefinition>element;\n\n      // Shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = typeDefinition.type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                nameNode.range, nameNode.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // Handle special built-in types\n      if (isSimpleType) {\n        let text = nameNode.identifier.text;\n        if (text == CommonNames.native) return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.indexof) return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.valueof) return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.returnof) return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\n      }\n\n      // Resolve normally\n      let typeParameterNodes = typeDefinition.typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          ctxElement,\n          ctxTypes = makeMap(ctxTypes), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          node.range, nameNode.identifier.text\n        );\n      }\n      let type = this.resolveType(\n        typeDefinition.typeNode,\n        element,\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (!type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              nameNode.range, nameNode.identifier.text\n            );\n          }\n        } else {\n          return type.asNullable();\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        nameNode.range, nameNode.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\n  private resolveFunctionType(\n    /** The type to resolve. */\n    node: FunctionTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n    }\n    var parameterNodes = node.parameters;\n    var numParameters = parameterNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterNode = parameterNodes[i];\n      switch (parameterNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterTypeNode = parameterNode.type;\n      if (isTypeOmitted(parameterTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            parameterTypeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        parameterTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (isTypeOmitted(returnTypeNode)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnTypeNode.range\n        );\n      }\n      returnType = Type.void;\n    } else {\n      returnType = this.resolveType(\n        returnTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!returnType) return null;\n    }\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return node.isNullable ? signature.type.asNullable() : signature.type;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      let numTypeArguments = 0;\n      if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) return overload.signature.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinReturnTypeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var signatureReference = typeArgument.signatureReference;\n    if (!signatureReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    return signatureReference.returnType;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    node: TypeName,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = ctxElement.lookup(node.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          node.range, node.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = node;\n    var next = node.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Type parameter nodes present. */\n    typeParameters: TypeParameterNode[],\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          argumentCount\n            ? Range.join(\n                typeArgumentNodes![0].range,\n                typeArgumentNodes![argumentCount - 1].range\n              )\n            : alternativeReportNode!.range,\n          (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(),\n          argumentCount.toString()\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            typeArgumentNodes![i],\n            ctxElement,\n            ctxTypes,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            ctxElement,\n            ctxTypes,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      ctxTypes.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves respectively infers the concrete instance of a function by call context. */\n  maybeInferCall(\n    node: CallExpression,\n    prototype: FunctionPrototype,\n    ctxFlow: Flow,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var typeArguments = node.typeArguments;\n\n    // resolve generic call if type arguments have been provided\n    if (typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            node.expression.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n      return this.resolveFunctionInclTypeArguments(\n        prototype,\n        typeArguments,\n        ctxFlow.actualFunction,\n        makeMap(ctxFlow.contextualTypeArguments), // don't inherit\n        node,\n        reportMode\n      );\n    }\n\n    // infer generic call if type arguments have been omitted\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let contextualTypeArguments = makeMap<string,Type>(ctxFlow.contextualTypeArguments);\n\n      // fill up contextual types with auto for each generic component\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let typeParameterNames = new Set<string>();\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        contextualTypeArguments.set(name, Type.auto);\n        typeParameterNames.add(name);\n      }\n\n      let parameterNodes = prototype.functionTypeNode.parameters;\n      let numParameters = parameterNodes.length;\n      let argumentNodes = node.arguments;\n      let numArguments = argumentNodes.length;\n\n      // infer types with generic components while updating contextual types\n      for (let i = 0; i < numParameters; ++i) {\n        let argumentExpression = i < numArguments ? argumentNodes[i] : parameterNodes[i].initializer;\n        if (!argumentExpression) { // missing initializer -> too few arguments\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              node.range, numParameters.toString(), numArguments.toString()\n            );\n          }\n          return null;\n        }\n        let typeNode = parameterNodes[i].type;\n        if (typeNode.hasGenericComponent(typeParameterNodes)) {\n          let type = this.resolveExpression(argumentExpression, ctxFlow, Type.auto, ReportMode.SWALLOW);\n          if (type) this.propagateInferredGenericTypes(typeNode, type, ctxFlow, contextualTypeArguments, typeParameterNames);\n        }\n      }\n\n      // apply concrete types to the generic function signature\n      let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        if (contextualTypeArguments.has(name)) {\n          let inferredType = assert(contextualTypeArguments.get(name));\n          if (inferredType != Type.auto) {\n            resolvedTypeArguments[i] = inferredType;\n            continue;\n          }\n        }\n        // unused template, e.g. `function test<T>(): void {...}` called as `test()`\n        // invalid because the type is effectively unknown inside the function body\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_argument_expected,\n            node.expression.range.atEnd\n          );\n        }\n        return null;\n      }\n      return this.resolveFunction(\n        prototype,\n        resolvedTypeArguments,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        reportMode\n      );\n    }\n\n    // otherwise resolve the non-generic call as usual\n    return this.resolveFunction(prototype, null, makeMap<string,Type>(), reportMode);\n  }\n\n  /** Updates contextual types with a possibly encapsulated inferred type. */\n  private propagateInferredGenericTypes(\n    /** The inferred type node. */\n    node: TypeNode,\n    /** The inferred type. */\n    type: Type,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\n    ctxTypes: Map<string,Type>,\n    /** The names of the type parameters being inferred. */\n    typeParameterNames: Set<string>\n  ): void {\n    if (node.kind == NodeKind.NAMEDTYPE) {\n      let namedTypeNode = <NamedTypeNode>node;\n      let typeArgumentNodes = namedTypeNode.typeArguments;\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) { // foo<T>(bar: Array<T>)\n        let classReference = type.classReference;\n        if (classReference) {\n          let classPrototype = this.resolveTypeName(namedTypeNode.name, ctxFlow.actualFunction);\n          if (!classPrototype || classPrototype.kind != ElementKind.CLASS_PROTOTYPE) return;\n          if (classReference.prototype == <ClassPrototype>classPrototype) {\n            let typeArguments = classReference.typeArguments;\n            if (typeArguments !== null && typeArguments.length == typeArgumentNodes.length) {\n              for (let i = 0, k = typeArguments.length; i < k; ++i) {\n                this.propagateInferredGenericTypes(typeArgumentNodes[i], typeArguments[i], ctxFlow, ctxTypes, typeParameterNames);\n              }\n              return;\n            }\n          }\n        }\n      } else { // foo<T>(bar: T)\n        let name = namedTypeNode.name.identifier.text;\n        if (ctxTypes.has(name)) {\n          let currentType = assert(ctxTypes.get(name));\n          if (currentType == Type.auto || (typeParameterNames.has(name) && currentType.isAssignableTo(type))) {\n            ctxTypes.set(name, type);\n          }\n        }\n      }\n    } else if (node.kind == NodeKind.FUNCTIONTYPE) { // foo<T>(bar: (baz: T) => i32))\n      let functionTypeNode = <FunctionTypeNode>node;\n      let parameterNodes = functionTypeNode.parameters;\n      if (parameterNodes !== null && parameterNodes.length > 0) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          let parameterTypes = signatureReference.parameterTypes;\n          let thisType = signatureReference.thisType;\n          if (parameterTypes.length == parameterNodes.length && !thisType == !functionTypeNode.explicitThisType) {\n            for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n              this.propagateInferredGenericTypes(parameterNodes[i].type, parameterTypes[i], ctxFlow, ctxTypes, typeParameterNames);\n            }\n            this.propagateInferredGenericTypes(functionTypeNode.returnType, signatureReference.returnType, ctxFlow, ctxTypes, typeParameterNames);\n            if (thisType) this.propagateInferredGenericTypes(functionTypeNode.explicitThisType!, thisType, ctxFlow, ctxTypes, typeParameterNames);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  /** Gets the concrete type of an element. */\n  getTypeOfElement(element: Element): Type | null {\n    var kind = element.kind;\n    if (kind == ElementKind.GLOBAL) {\n      if (!this.ensureResolvedLazyGlobal(<Global>element, ReportMode.SWALLOW)) return null;\n    }\n    if (isTypedElement(kind)) {\n      let type = (<TypedElement>element).type;\n      assert(type != Type.void);\n      let classReference = type.classReference;\n      if (classReference) {\n        let wrappedType = classReference.wrappedType;\n        if (wrappedType) type = wrappedType;\n      }\n      return type;\n    }\n    if (kind == ElementKind.FUNCTION_TARGET) {\n      return (<FunctionTarget>element).type;\n    }\n    return null;\n  }\n\n  /** Gets the element of a concrete type. */\n  getElementOfType(type: Type): Element | null {\n    if (type.is(TypeFlags.REFERENCE)) {\n      let classReference = type.classReference;\n      if (classReference) return classReference;\n      let signatureReference = assert(type.signatureReference);\n      return signatureReference.asFunctionTarget(this.program);\n    } else if (type != Type.void) {\n      let wrapperClasses = this.program.wrapperClasses;\n      assert(wrapperClasses.has(type));\n      return assert(wrapperClasses.get(type));\n    }\n    return null;\n  }\n\n  // =================================================== Expressions ===================================================\n\n  /** Looks up the program element the specified expression refers to. */\n  lookupExpression(\n    /** The expression to look up. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.lookupAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.lookupBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.lookupCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.lookupCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.lookupElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.lookupFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.lookupIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.lookupThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.lookupSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.lookupInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.lookupLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.lookupNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.lookupPropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.lookupTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.lookupUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.lookupUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an expression to its static type. */\n  resolveExpression(\n    /** The expression to resolve. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.resolveCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.resolveFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.resolveIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxType, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.resolveInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.resolveNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.resolveTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified identifier expression refers to. */\n  lookupIdentifierExpression(\n    /** The expression to look up. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE:\n      case NodeKind.NULL: {\n        let type = this.resolveIdentifierExpression(node, ctxFlow, Type.auto, ctxElement, reportMode);\n        return type ? this.getElementOfType(type) : null;\n      }\n    }\n    var name = node.text;\n    var element: Element | null;\n    if (element = ctxFlow.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = ctxElement.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        node.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an identifier to its static type. */\n  private resolveIdentifierExpression(\n    /** The expression to resolve. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return Type.bool;\n      case NodeKind.NULL: {\n        let classReference = ctxType.classReference;\n        return ctxType.is(TypeFlags.REFERENCE) && classReference !== null\n          ? classReference.type.asNullable()\n          : this.program.options.usizeType; // TODO: anyref context?\n      }\n    }\n    var element = this.lookupIdentifierExpression(node, ctxFlow, ctxElement, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunction(<FunctionPrototype>element, null, makeMap<string,Type>(), reportMode);\n      if (!instance) return null;\n      element = instance;\n    }\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var type: Type | null;\n    var typeNode = global.typeNode;\n    if (typeNode) {\n      type = this.resolveType(typeNode, global.parent, null, reportMode);\n    } else {\n      type = this.resolveExpression(assert(global.initializerNode), global.file.startFunction.flow, Type.auto, reportMode);\n    }\n    if (!type) return false;\n    global.setType(type); // also sets resolved\n    return true;\n  }\n\n  /** Looks up the program element the specified property access expression refers to. */\n  private lookupPropertyAccessExpression(\n    /** The expression to look up. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetNode = node.expression;\n    var target = this.lookupExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = node.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.ENUMVALUE:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: { // someVar.prop\n        let variableLikeElement = <VariableLikeElement>target;\n        let type = variableLikeElement.type;\n        assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = assert(wrapperClasses.get(type));\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, variableLikeElement.type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // SomeClass.prop\n        let propertyPrototype = <PropertyPrototype>target;\n        let getterInstance = this.resolveFunction( // reports\n          assert(propertyPrototype.getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = assert(wrapperClasses.get(type));\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // someInstance.prop\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance); // must have a getter\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = assert(wrapperClasses.get(type));\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: { // someInstance[x].prop\n        let indexSignature = <IndexSignature>target;\n        let parent = indexSignature.parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        let elementExpression = assert(this.currentElementExpression);\n        let indexedGet = classInstance.lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, parent.internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        let classReference = returnType.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(returnType)) {\n            classReference = assert(wrapperClasses.get(returnType));\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, returnType.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        }\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members !== null && members.has(propertyName)) {\n            this.currentThisExpression = targetNode;\n            this.currentElementExpression = null;\n            return assert(members.get(propertyName)); // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            let classPrototype = <ClassPrototype>target;\n            let basePrototype = classPrototype.basePrototype;\n            if (basePrototype) {\n              target = basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            let classInstance = <Class>target;\n            let baseInstance = classInstance.base;\n            if (baseInstance) {\n              target = baseInstance;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members !== null && members.has(propertyName)) {\n          this.currentThisExpression = targetNode;\n          this.currentElementExpression = null;\n          return assert(members.get(propertyName)); // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        node.property.range, propertyName, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access expression to its static type. */\n  private resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified element access expression refers to. */\n  private lookupElementAccessExpression(\n    /** The expression to look up. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = node.expression;\n    var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\n    if (!targetType) return null;\n    if (targetType.is(TypeFlags.REFERENCE)) {\n      let classReference = targetType.classReference;\n      while (classReference) {\n        let indexSignature = classReference.indexSignature;\n        if (indexSignature) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = node.elementExpression;\n          return indexSignature;\n        }\n        classReference = classReference.base;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        targetExpression.range, targetType.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an element access expression to its static type. */\n  private resolveElementAccessExpression(\n    /** The expression to resolve. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupElementAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: i64,\n    /** Contextual type. */\n    ctxType: Type\n  ): Type {\n    if (!ctxType.is(TypeFlags.REFERENCE)) {\n      // compile to contextual type if matching\n      switch (ctxType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64; // TODO: u64 if positive and larger than i64?\n  }\n\n  /** Looks up the program element the specified assertion expression refers to. */\n  private lookupAssertionExpression(\n    /** The expression to look up. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        let type = this.resolveType(\n          assert(node.toType), // must be set if not NONNULL\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n        if (!type) return null;\n        let element = this.getElementOfType(type);\n        if (element) return element;\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_illegal_in_this_context,\n            node.range, type.toString()\n          );\n        }\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return null;\n      }\n      case AssertionKind.NONNULL: {\n        return this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let element = this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n        // if (!element) return null;\n        // if (element.kind == ElementKind.CLASS && (<Class>element).extends(this.program.arrayPrototype)) {\n        //   let elementType = assert((<Class>element).getTypeArgumentsTo(this.program.arrayPrototype))[0];\n        //   return this.resolveClass(this.program.readonlyArrayPrototype, [ elementType ]);\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented,\n          node.range\n        );\n        return null;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves an assertion expression to its static type. */\n  private resolveAssertionExpression(\n    /** The expression to resolve. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        return this.resolveType(\n          assert(node.toType),\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n      }\n      case AssertionKind.NONNULL: {\n        let type = this.resolveExpression(node.expression, ctxFlow, ctxType, reportMode);\n        return type ? type.nonNullableType : null;\n      }\n      case AssertionKind.CONST: {\n        let element = this.lookupExpression(node, ctxFlow, ctxType, reportMode);\n        if (!element) return null;\n        let type = this.getTypeOfElement(element);\n        if (!type) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n              node.range\n            );\n          }\n        }\n        return type;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary prefix expression refers to. */\n  private lookupUnaryPrefixExpression(\n    /** The expression to look up. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to its static type. */\n  private resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operand = node.operand;\n    var operator = node.operator;\n    switch (operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.isLiteralKind(LiteralKind.INTEGER)) {\n          return this.determineIntegerLiteralType(i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value), ctxType);\n        }\n        // fall-through\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPrefixToken(operator));\n            if (overload) return overload.signature.returnType;\n            let wrappedType = classReference.wrappedType;\n            if (wrappedType) type = wrappedType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n      case Token.EXCLAMATION: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool; // incl. references\n      }\n      case Token.TILDE: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, \"~\", type.toString()\n            );\n          }\n          return null;\n        }\n        return type.intType;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary postfix expression refers to. */\n  private lookupUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary postfix expression to its static type. */\n  private resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operator = node.operator;\n    switch (operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPostfixToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified binary expression refers to. */\n  private lookupBinaryExpression(\n    /** The expression to look up. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element; // otherwise void\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to its static type. */\n  private resolveBinaryExpression(\n    /** The expression to resolve. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var left = node.left;\n    var right = node.right;\n    var operator = node.operator;\n\n    switch (operator) {\n\n      // assignment: result is the target's type\n\n      case Token.EQUALS:\n      case Token.PLUS_EQUALS:\n      case Token.MINUS_EQUALS:\n      case Token.ASTERISK_EQUALS:\n      case Token.ASTERISK_ASTERISK_EQUALS:\n      case Token.SLASH_EQUALS:\n      case Token.PERCENT_EQUALS:\n      case Token.LESSTHAN_LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.AMPERSAND_EQUALS:\n      case Token.BAR_EQUALS:\n      case Token.CARET_EQUALS: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n\n      // comparison: result is Bool, preferring overloads, integer/float only\n\n      case Token.LESSTHAN:\n      case Token.GREATERTHAN:\n      case Token.LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return Type.bool;\n      }\n\n      // equality: result is Bool, preferring overloads, incl. references\n\n      case Token.EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool;\n      }\n\n      // identity: result is Bool, not supporting overloads\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS_EQUALS: {\n        return Type.bool;\n      }\n\n      // arithmetics: result is common type of LHS and RHS, preferring overloads\n\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.ASTERISK:\n      case Token.SLASH:\n      case Token.PERCENT: { // mod has special logic, but also behaves like this\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // pow: result is f32 if LHS is f32, otherwise f64, preferring overloads\n\n      case Token.ASTERISK_ASTERISK: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return leftType == Type.f32 ? Type.f32 : Type.f64;\n      }\n\n      // shift: result is LHS (RHS is converted to LHS), preferring overloads\n\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.is(TypeFlags.INTEGER) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return leftType;\n      }\n\n      // bitwise: result is common type of LHS and RHS with floats not being supported, preferring overloads\n\n      case Token.AMPERSAND:\n      case Token.BAR:\n      case Token.CARET: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, ctxType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType || !commonType.is(TypeFlags.INTEGER) || commonType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, operatorTokenToString(operator), leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // logical: result is LHS (RHS is converted to LHS), not supporting overloads\n\n      case Token.AMPERSAND_AMPERSAND:\n      case Token.BAR_BAR: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified this expression refers to. */\n  private lookupThisExpression(\n    /** The expression to look up. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let thisLocal = ctxFlow.lookupLocal(CommonNames.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = ctxFlow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to its static type. */\n  private resolveThisExpression(\n    /** The expression to resolve. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified super expression refers to. */\n  private lookupSuperExpression(\n    /** The expression to look up. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let superLocal = ctxFlow.lookupLocal(CommonNames.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = ctxFlow.actualFunction.parent;\n    if (parent !== null && parent.kind == ElementKind.CLASS) {\n      let base = (<Class>parent).base;\n      if (base) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return base;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to its static type. */\n  private resolveSuperExpression(\n    /** The expression to resolve. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified literal expression refers to. */\n  private lookupLiteralExpression(\n    /** The expression to look up. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    this.currentThisExpression = node;\n    this.currentElementExpression = null;\n    switch (node.literalKind) {\n      case LiteralKind.INTEGER: {\n        let intType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>node).value,\n          ctxType\n        );\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(intType));\n        return assert(wrapperClasses.get(intType));\n      }\n      case LiteralKind.FLOAT: {\n        let fltType = ctxType == Type.f32 ? Type.f32 : Type.f64;\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(fltType));\n        return assert(wrapperClasses.get(fltType));\n      }\n      case LiteralKind.STRING: {\n        return this.program.stringInstance;\n      }\n      case LiteralKind.ARRAY: {\n        let classReference = ctxType.classReference;\n        if (ctxType.is(TypeFlags.REFERENCE) && classReference !== null && classReference.prototype == this.program.arrayPrototype) {\n          return this.getElementOfType(ctxType);\n        }\n        // otherwise infer, ignoring ctxType\n        let expressions = (<ArrayLiteralExpression>node).elementExpressions;\n        let length = expressions.length;\n        let elementType = Type.auto;\n        let numNullLiterals = 0;\n        for (let i = 0, k = length; i < k; ++i) {\n          let expression = expressions[i];\n          if (expression) {\n            if (expression.kind == NodeKind.NULL && length > 1) {\n              ++numNullLiterals;\n            } else {\n              let currentType = this.resolveExpression(expression, ctxFlow, elementType);\n              if (!currentType) return null;\n              if (elementType == Type.auto) elementType = currentType;\n              else if (currentType != elementType) {\n                let commonType = Type.commonDenominator(elementType, currentType, false);\n                if (commonType) elementType = commonType;\n                // otherwise triggers error on compilation\n              }\n            }\n          }\n        }\n        if (elementType /* still */ == Type.auto) {\n          if (numNullLiterals == length) { // all nulls infers as usize\n            elementType = this.program.options.usizeType;\n          } else {\n            this.error(\n              DiagnosticCode.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\n              node.range, \"T\"\n            );\n            return null;\n          }\n        }\n        if (\n          numNullLiterals > 0 &&\n          elementType.is(TypeFlags.REFERENCE) &&\n          !elementType.is(TypeFlags.HOST) // TODO: anyref isn't nullable as-is\n        ) {\n          elementType = elementType.asNullable();\n        }\n        return assert(this.resolveClass(this.program.arrayPrototype, [ elementType ]));\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to its static type. */\n  private resolveLiteralExpression(\n    /** The expression to resolve. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified call expression refers to. */\n  private lookupCallExpression(\n    /** The expression to look up. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a call expression to its static type. */\n  private resolveCallExpression(\n    /** The expression to resolve. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var targetExpression = node.expression;\n    var target = this.lookupExpression( // reports\n      targetExpression,\n      ctxFlow,\n      ctxType,\n      reportMode\n    );\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        // `unchecked` behaves like parenthesized\n        if (\n          functionPrototype.internalName == BuiltinNames.unchecked &&\n          node.arguments.length > 0\n        ) {\n          return this.resolveExpression(node.arguments[0], ctxFlow, ctxType, reportMode);\n        }\n        let instance = this.maybeInferCall(node, functionPrototype, ctxFlow, reportMode);\n        if (!instance) return null;\n        return instance.signature.returnType;\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        return (<FunctionTarget>target).signature.returnType;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n        targetExpression.range, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified comma expression refers to. */\n  private lookupCommaExpression(\n    /** The expression to look up. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var expressions = node.expressions;\n    return this.lookupExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Resolves a comma expression to its static type. */\n  private resolveCommaExpression(\n    /** The expression to resolve. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var expressions = node.expressions;\n    return this.resolveExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Looks up the program element the specified instanceof expression refers to. */\n  private lookupInstanceOfExpression(\n    /** The expression to look up. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var wrapperClasses = this.program.wrapperClasses;\n    assert(wrapperClasses.has(Type.bool));\n    return assert(wrapperClasses.get(Type.bool));\n  }\n\n  /** Resolves an instanceof expression to its static type. */\n  private resolveInstanceOfExpression(\n    /** The expression to resolve. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return Type.bool;\n  }\n\n  /** Looks up the program element the specified ternary expression refers to. */\n  private lookupTernaryExpression(\n    /** The expression to look up. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a ternary expression to its static type. */\n  private resolveTernaryExpression(\n    /** The expression to resolve. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var thenType = this.resolveExpression(node.ifThen, ctxFlow, ctxType, reportMode);\n    if (!thenType) return null;\n    var elseType = this.resolveExpression(node.ifElse, ctxFlow, thenType, reportMode);\n    if (!elseType) return null;\n    var commonType = Type.commonDenominator(thenType, elseType, false);\n    if (!commonType) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n          node.range, \"?:\", thenType.toString(), elseType.toString()\n        );\n      }\n    }\n    return commonType;\n  }\n\n  /** Looks up the program element the specified new expression refers to. */\n  private lookupNewExpression(\n    /** The expression to look up. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = this.resolveTypeName(node.typeName, ctxFlow.actualFunction, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n      return this.resolveClassInclTypeArguments(\n        <ClassPrototype>element,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        node,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a new expression to its static type. */\n  private resolveNewExpression(\n    /** The expression to resolve. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified function expression refers to. */\n  private lookupFunctionExpression(\n    /** The expression to look up. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a function expression to its static type. */\n  private resolveFunctionExpression(\n    /** The expression to resolve. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return this.resolveFunctionType(node.declaration.signature, ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\n  }\n\n  // ==================================================== Elements =====================================================\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!ctxTypes.has(classTypeParameterName)) {\n            ctxTypes.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments !== null && (numFunctionTypeArguments = typeArguments.length) > 0) {\n      assert(typeParameterNodes !== null && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        ctxTypes.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n      ctxTypes.set(CommonNames.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      ctxTypes.set(CommonNames.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = classInstance!.type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      ctxTypes\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classInstance = <Class>actualParent;\n        let classTypeArguments = classInstance.typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert(classInstance.prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            ctxTypes.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Currently resolving classes. */\n  private resolveClassPending: Class[] = [];\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Do not attempt to resolve the same class twice. This can return a class\n    // that isn't fully resolved yet, but only on deeper levels of recursion.\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Otherwise create\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments);\n    prototype.setResolvedInstance(instanceKey, instance);\n    var pendingClasses = this.resolveClassPending;\n    pendingClasses.push(instance);\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes !== null && typeParameterNodes.length > 0));\n    }\n    instance.contextualTypeArguments = ctxTypes;\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    if (basePrototype) {\n      let current: ClassPrototype | null = basePrototype;\n      do {\n        if (current == prototype) {\n          this.error(\n            DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression,\n            prototype.identifierNode.range,\n            prototype.internalName\n          );\n          return null;\n        }\n        current = current.basePrototype;\n      } while (current);\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      let base = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(ctxTypes), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!base) return null;\n      instance.setBase(base);\n\n      // If the base class is still pending, yield here and instead resolve any\n      // derived classes once the base class's `finishResolveClass` is done.\n      // This is guaranteed to never happen at the entry of the recursion, i.e.\n      // where `resolveClass` is called from other code.\n      if (pendingClasses.includes(base)) return instance;\n    }\n\n    // We only get here if the base class has been fully resolved already.\n    this.finishResolveClass(instance, reportMode);\n    return instance;\n  }\n\n  /** Finishes resolving the specified class. */\n  private finishResolveClass(\n    /** Class to finish resolving. */\n    instance: Class,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode\n  ): void {\n    var instanceMembers = instance.members;\n    if (!instanceMembers) instance.members = instanceMembers = new Map();\n\n    // Alias base members\n    var pendingClasses = this.resolveClassPending;\n    var memoryOffset: u32 = 0;\n    var base = instance.base;\n    if (base) {\n      assert(!pendingClasses.includes(base));\n      let baseMembers = base.members;\n      if (baseMembers) {\n        // TODO: for (let [baseMemberName, baseMember] of baseMembers) {\n        for (let _keys = Map_keys(baseMembers), i = 0, k = _keys.length; i < k; ++i) {\n          let baseMemberName = unchecked(_keys[i]);\n          let baseMember = assert(baseMembers.get(baseMemberName));\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = base.nextMemoryOffset;\n    }\n\n    // Resolve instance members\n    var prototype = instance.prototype;\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      // TODO: for (let member of instanceMemberPrototypes.values()) {\n      for (let _values = Map_values(instanceMemberPrototypes), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        switch (member.kind) {\n\n          case ElementKind.FIELD_PROTOTYPE: {\n            let fieldPrototype = <FieldPrototype>member;\n            let fieldTypeNode = fieldPrototype.typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (base) {\n                let baseMembers = base.members;\n                if (baseMembers !== null && baseMembers.has(fieldPrototype.name)) {\n                  let baseField = assert(baseMembers.get(fieldPrototype.name));\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldPrototype.identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(fieldPrototype, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyPrototype = <PropertyPrototype>member;\n            let propertyInstance = new Property(propertyPrototype, instance);\n            let getterPrototype = propertyPrototype.getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = propertyPrototype.setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.nextMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonNames.constructor);\n      if (ctorPrototype !== null && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          assert(instance.contextualTypeArguments),\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    var overloadPrototypes = prototype.overloadPrototypes;\n    // TODO: for (let [overloadKind, overloadPrototype] of overloadPrototypes) {\n    for (let _keys = Map_keys(overloadPrototypes), i = 0, k = _keys.length; i < k; ++i) {\n      let overloadKind = unchecked(_keys[i]);\n      let overloadPrototype = assert(overloadPrototypes.get(overloadKind));\n      assert(overloadKind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      // inc/dec are special in that an instance overload attempts to re-assign\n      // the corresponding value, thus requiring a matching return type, while a\n      // static overload works like any other overload.\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\n        switch (overloadKind) {\n          case OperatorKind.PREFIX_INC:\n          case OperatorKind.PREFIX_DEC:\n          case OperatorKind.POSTFIX_INC:\n          case OperatorKind.POSTFIX_DEC: {\n            let returnType = operatorInstance.signature.returnType;\n            if (!returnType.isAssignableTo(instance.type)) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                  overloadPrototype.functionTypeNode.returnType.range, returnType.toString(), instance.type.toString()\n                );\n              }\n            }\n          }\n        }\n      }\n      if (!overloads.has(overloadKind)) {\n        overloads.set(overloadKind, operatorInstance);\n        if (overloadKind == OperatorKind.INDEXED_GET || overloadKind == OperatorKind.INDEXED_SET) {\n          let index = instance.indexSignature;\n          if (!index) instance.indexSignature = index = new IndexSignature(instance);\n          if (overloadKind == OperatorKind.INDEXED_GET) {\n            index.setType(operatorInstance.signature.returnType);\n          }\n        }\n      } else {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            operatorInstance.declaration.range\n          );\n        }\n      }\n    }\n\n    // Remove this class from pending\n    var pendingIndex = pendingClasses.indexOf(instance);\n    assert(~pendingIndex); // must be pending\n    pendingClasses.splice(pendingIndex, 1);\n\n    // Finish derived classes that we postponed in `resolveClass` due to the\n    // base class still being pending, again triggering `finishResolveClass`\n    // of any classes derived from those classes, ultimately leading to all\n    // pending classes being resolved.\n    var derivedPendingClasses = new Array<Class>();\n    for (let i = 0, k = pendingClasses.length; i < k; ++i) {\n      let pending = pendingClasses[i];\n      if (instance == pending.base) derivedPendingClasses.push(pending);\n    }\n    for (let i = 0, k = derivedPendingClasses.length; i < k; ++i) {\n      this.finishResolveClass(derivedPendingClasses[i], reportMode);\n    }\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n}\n","/**\n * @fileoverview A concurrent code flow analyzer.\n *\n * Flows keep track of compilation state and can be queried for various\n * conditions, like whether the current branch always terminates, whether\n * a local is known to be non-null or whether an expression has possibly\n * overflown its value range.\n *\n * To accomplish this, compilation of each function begins with a clean\n * flow populated with initial local states etc. While compilation\n * progresses, statements and expressions update flow state while control\n * constructs fork, potentially add scoped locals and later merge these\n * forked branches as necessary.\n *\n * @license Apache-2.0\n */\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperand,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow always returns. */\n  RETURNS = 1 << 0,\n  /** This flow always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow always returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow always throws. */\n  THROWS = 1 << 3,\n  /** This flow always breaks. */\n  BREAKS = 1 << 4,\n  /** This flow always continues. */\n  CONTINUES = 1 << 5,\n  /** This flow always allocates. Constructors only. */\n  ALLOCATES = 1 << 6,\n  /** This flow always calls super. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow always terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8, // Note that this doesn't cover BREAKS, which is separate\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 11,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 12,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 13,\n\n  // other\n\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 15,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 1,\n  /** Local is non-null. */\n  NONNULL = 1 << 2,\n  /** Local is initialized. */\n  INITIALIZED = 1 << 3,\n  /** Local is retained. */\n  RETAINED = 1 << 4,\n\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 5,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED\n}\n\n/** Condition kinds. */\nexport const enum ConditionKind {\n  /** Outcome of the condition is unknown */\n  UNKNOWN,\n  /** Condition is always true. */\n  TRUE,\n  /** Condition is always false. */\n  FALSE\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[];\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.localFlags = [];\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString();\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Tests if this is an inline flow. */\n  get isInline(): bool {\n    return this.inlineFunction !== null;\n  }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    var inlineFunction = this.inlineFunction;\n    if (inlineFunction) return inlineFunction;\n    return this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(resetBreakContext: bool = false): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.parentFunction = this.parentFunction;\n    if (resetBreakContext) {\n      branch.flags = this.flags & ~(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS |\n        FlowFlags.CONTINUES |\n        FlowFlags.CONDITIONALLY_CONTINUES\n      );\n    } else {\n      branch.flags = this.flags;\n      branch.continueLabel = this.continueLabel;\n      branch.breakLabel = this.breakLabel;\n    }\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.localFlags = this.localFlags.slice();\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      case NativeType.Anyref: { temps = parentFunction.tempAnyrefs; break; }\n      case NativeType.Exnref: { temps = parentFunction.tempExnrefs; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps !== null && temps.length > 0) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps !== null && temps.length > 0) {\n        local = assert(temps.pop());\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++).toString(), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch (local.type.toNativeType()) {\n      case NativeType.I32: {\n        let tempI32s = parentFunction.tempI32s;\n        if (tempI32s) temps = tempI32s;\n        else parentFunction.tempI32s = temps = [];\n        break;\n      }\n      case NativeType.I64: {\n        let tempI64s = parentFunction.tempI64s;\n        if (tempI64s) temps = tempI64s;\n        else parentFunction.tempI64s = temps = [];\n        break;\n      }\n      case NativeType.F32: {\n        let tempF32s = parentFunction.tempF32s;\n        if (tempF32s) temps = tempF32s;\n        else parentFunction.tempF32s = temps = [];\n        break;\n      }\n      case NativeType.F64: {\n        let tempF64s = parentFunction.tempF64s;\n        if (tempF64s) temps = tempF64s;\n        else parentFunction.tempF64s = temps = [];\n        break;\n      }\n      case NativeType.V128: {\n        let tempV128s = parentFunction.tempV128s;\n        if (tempV128s) temps = tempV128s;\n        else parentFunction.tempV128s = temps = [];\n        break;\n      }\n      case NativeType.Anyref: {\n        let tempAnyrefs = parentFunction.tempAnyrefs;\n        if (tempAnyrefs) temps = tempAnyrefs;\n        else parentFunction.tempAnyrefs = temps = [];\n        break;\n      }\n      case NativeType.Exnref: {\n        let tempExnrefs = parentFunction.tempExnrefs;\n        if (tempExnrefs) temps = tempExnrefs;\n        else parentFunction.tempExnrefs = temps = [];\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals !== null && scopedLocals.has(name)) return assert(scopedLocals.get(name));\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          if (!existingLocal.declaration.range.source.isNative) {\n            this.parentFunction.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range,\n              existingLocal.declaration.name.range,\n              name\n            );\n          } else {\n            this.parentFunction.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range, name\n            );\n          }\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Tests if this flow has any scoped locals that must be free'd. */\n  get hasScopedLocals(): bool {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals) {\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals) {\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(local);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    do {\n      let scope = current.scopedLocals;\n      if (scope !== null && scope.has(name)) return assert(scope.get(name));\n      current = current.parent;\n    } while (current);\n    var localsByName = this.parentFunction.localsByName;\n    if (localsByName.has(name)) return assert(localsByName.get(name));\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags & ~flag;\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    var label = id.toString();\n    parentFunction.breakLabel = label;\n    return label;\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString();\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags of another flow into this one, i.e. a finished inner block. */\n  inherit(other: Flow): void {\n    assert(other.parentFunction == this.parentFunction);\n    assert(other.parent == this); // currently the case, but might change\n    var otherFlags = other.flags;\n\n    // respective inner flags are irrelevant if contexts differ\n    if (this.breakLabel != other.breakLabel) {\n      if (otherFlags & (FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        otherFlags &= ~FlowFlags.TERMINATES;\n      }\n      otherFlags &= ~(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (this.continueLabel != other.continueLabel) {\n      otherFlags &= ~(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n\n    this.flags = this.flags | otherFlags; // what happens before is still true\n    this.localFlags = other.localFlags;\n  }\n\n  /** Inherits flags of a conditional branch joining again with this one, i.e. then without else. */\n  inheritBranch(other: Flow, conditionKind: ConditionKind = ConditionKind.UNKNOWN): void {\n    assert(other.parentFunction == this.parentFunction);\n    switch (conditionKind) {\n      case ConditionKind.TRUE: this.inherit(other); // always executes\n      case ConditionKind.FALSE: return;             // never executes\n    }\n\n    // Note that flags in `this` flow have already happened. For instance,\n    // a return cannot be undone no matter what'd happen in subsequent branches,\n    // but an allocation, which doesn't terminate, can become conditional. Not\n    // all flags have a corresponding conditional flag that's tracked.\n\n    var thisFlags = this.flags;\n    var otherFlags = other.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (thisFlags & FlowFlags.RETURNS) { // nothing can change that\n      newFlags |= FlowFlags.RETURNS;\n    } else if (otherFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_WRAPPED;\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_NONNULL;\n\n    if (thisFlags & FlowFlags.THROWS) { // nothing can change that\n      newFlags |= FlowFlags.THROWS;\n    } else if (otherFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (thisFlags & FlowFlags.BREAKS) { // nothing can change that\n      newFlags |= FlowFlags.BREAKS;\n    } else if (other.breakLabel == this.breakLabel) {\n      if (otherFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (thisFlags & FlowFlags.CONTINUES) { // nothing can change that\n      newFlags |= FlowFlags.CONTINUES;\n    } else if (other.continueLabel === this.continueLabel) {\n      if (otherFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (thisFlags & FlowFlags.ALLOCATES) { // can become conditional\n      if (otherFlags & FlowFlags.ALLOCATES) {\n        newFlags |= FlowFlags.ALLOCATES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ALLOCATES;\n      }\n    } else if (otherFlags & FlowFlags.ALLOCATES) {\n      newFlags |= FlowFlags.CONDITIONALLY_ALLOCATES;\n    }\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.CALLS_SUPER;\n\n    if (thisFlags & FlowFlags.TERMINATES) { // nothing can change that\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (thisFlags & FlowFlags.UNCHECKED_CONTEXT);\n\n    var thisLocalFlags = this.localFlags;\n    var numThisLocalFlags = thisLocalFlags.length;\n    var otherLocalFlags = other.localFlags;\n    var numOtherLocalFlags = otherLocalFlags.length;\n    var maxLocalFlags = max(numThisLocalFlags, numOtherLocalFlags);\n    for (let i = 0; i < maxLocalFlags; ++i) {\n      let thisFlags = i < numThisLocalFlags ? thisLocalFlags[i] : 0;\n      let otherFlags = i < numOtherLocalFlags ? otherLocalFlags[i] : 0;\n      let newFlags = thisFlags & otherFlags & (\n        LocalFlags.CONSTANT  |\n        LocalFlags.WRAPPED   |\n        LocalFlags.NONNULL   |\n        LocalFlags.INITIALIZED\n      );\n      if (thisFlags & LocalFlags.RETAINED) {\n        if (otherFlags & LocalFlags.RETAINED) {\n          newFlags |= LocalFlags.RETAINED;\n        } else {\n          newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n        }\n      } else if (otherFlags & LocalFlags.RETAINED) {\n        newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & LocalFlags.CONDITIONALLY_RETAINED;\n      }\n      thisLocalFlags[i] = newFlags;\n    }\n  }\n\n  /** Inherits mutual flags of two alternate branches becoming this one, i.e. then with else. */\n  inheritMutual(left: Flow, right: Flow): void {\n    assert(left.parentFunction == right.parentFunction);\n    assert(left.parentFunction == this.parentFunction);\n    // This differs from the previous method in that no flags are guaranteed\n    // to happen unless it is the case in both flows.\n\n    var leftFlags = left.flags;\n    var rightFlags = right.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (leftFlags & FlowFlags.RETURNS) {\n      if (rightFlags & FlowFlags.RETURNS) {\n        newFlags |= FlowFlags.RETURNS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n      }\n    } else if (rightFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_WRAPPED) && (rightFlags & FlowFlags.RETURNS_WRAPPED)) {\n      newFlags |= FlowFlags.RETURNS_WRAPPED;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_NONNULL) && (rightFlags & FlowFlags.RETURNS_NONNULL)) {\n      newFlags |= FlowFlags.RETURNS_NONNULL;\n    }\n\n    if (leftFlags & FlowFlags.THROWS) {\n      if (rightFlags & FlowFlags.THROWS) {\n        newFlags |= FlowFlags.THROWS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n      }\n    } else if (rightFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (leftFlags & FlowFlags.BREAKS) {\n      if (rightFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.BREAKS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else if (rightFlags & FlowFlags.BREAKS) {\n      newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (leftFlags & FlowFlags.CONTINUES) {\n      if (rightFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONTINUES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else if (rightFlags & FlowFlags.CONTINUES) {\n      newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (leftFlags & FlowFlags.ALLOCATES) {\n      if (rightFlags & FlowFlags.ALLOCATES) {\n        newFlags |= FlowFlags.ALLOCATES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ALLOCATES;\n      }\n    } else if (rightFlags & FlowFlags.ALLOCATES) {\n      newFlags |= FlowFlags.CONDITIONALLY_ALLOCATES;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_ALLOCATES;\n    }\n\n    if ((leftFlags & FlowFlags.CALLS_SUPER) && (rightFlags & FlowFlags.CALLS_SUPER)) {\n      newFlags |= FlowFlags.CALLS_SUPER;\n    }\n\n    if ((leftFlags & FlowFlags.TERMINATES) && (rightFlags & FlowFlags.TERMINATES)) {\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (this.flags & FlowFlags.UNCHECKED_CONTEXT);\n\n    var thisLocalFlags = this.localFlags;\n    if (leftFlags & FlowFlags.TERMINATES) {\n      if (!(rightFlags & FlowFlags.TERMINATES)) {\n        let rightLocalFlags = right.localFlags;\n        for (let i = 0, k = rightLocalFlags.length; i < k; ++i) {\n          thisLocalFlags[i] = rightLocalFlags[i];\n        }\n      }\n    } else if (rightFlags & FlowFlags.TERMINATES) {\n      let leftLocalFlags = left.localFlags;\n      for (let i = 0, k = leftLocalFlags.length; i < k; ++i) {\n        thisLocalFlags[i] = leftLocalFlags[i];\n      }\n    } else {\n      let leftLocalFlags = left.localFlags;\n      let numLeftLocalFlags = leftLocalFlags.length;\n      let rightLocalFlags = right.localFlags;\n      let numRightLocalFlags = rightLocalFlags.length;\n      let maxLocalFlags = max(numLeftLocalFlags, numRightLocalFlags);\n      for (let i = 0; i < maxLocalFlags; ++i) {\n        let leftFlags = i < numLeftLocalFlags ? leftLocalFlags[i] : 0;\n        let rightFlags = i < numRightLocalFlags ? rightLocalFlags[i] : 0;\n        let newFlags = leftFlags & rightFlags & (\n          LocalFlags.CONSTANT  |\n          LocalFlags.WRAPPED   |\n          LocalFlags.NONNULL   |\n          LocalFlags.INITIALIZED\n        );\n        if (leftFlags & LocalFlags.RETAINED) {\n          if (rightFlags & LocalFlags.RETAINED) {\n            newFlags |= LocalFlags.RETAINED;\n          } else {\n            newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n          }\n        } else if (rightFlags & LocalFlags.RETAINED) {\n          newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n        } else {\n          newFlags |= (leftFlags | rightFlags) & LocalFlags.CONDITIONALLY_RETAINED;\n        }\n        thisLocalFlags[i] = newFlags;\n      }\n    }\n  }\n\n  /** Tests if the specified flows have differing local states. */\n  static hasIncompatibleLocalStates(before: Flow, after: Flow): bool {\n    var numThisLocalFlags = before.localFlags.length;\n    var numOtherLocalFlags = after.localFlags.length;\n    var parentFunction = before.parentFunction;\n    assert(parentFunction === after.parentFunction);\n    var localsByIndex = parentFunction.localsByIndex;\n    assert(localsByIndex === after.parentFunction.localsByIndex);\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      let local = localsByIndex[i];\n      let type = local.type;\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (before.isLocalFlag(i, LocalFlags.WRAPPED) && !after.isLocalFlag(i, LocalFlags.WRAPPED)) {\n          return true;\n        }\n      }\n      if (type.is(TypeFlags.REFERENCE)) {\n        if (before.isLocalFlag(i, LocalFlags.NONNULL) && !after.isLocalFlag(i, LocalFlags.NONNULL)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Unifies local flags between this and the other flow. */\n  unifyLocalFlags(other: Flow): void {\n    var numThisLocalFlags = this.localFlags.length;\n    var numOtherLocalFlags = other.localFlags.length;\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      if (this.isLocalFlag(i, LocalFlags.WRAPPED) != other.isLocalFlag(i, LocalFlags.WRAPPED)) {\n        this.unsetLocalFlag(i, LocalFlags.WRAPPED); // assume not wrapped\n      }\n      if (this.isLocalFlag(i, LocalFlags.NONNULL) != other.isLocalFlag(i, LocalFlags.NONNULL)) {\n        this.unsetLocalFlag(i, LocalFlags.NONNULL); // assume possibly null\n      }\n      assert(\n        // having different retain states would be a problem because the compiler\n        // either can't release a retained local or would release a non-retained local\n        this.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED) == other.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED)\n      );\n    }\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.is(TypeFlags.NULLABLE)) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(\n    /** Expression being true. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n\n    // The iff argument is useful in situations like\n    //\n    //  if (!ref) {\n    //    ref = new Ref();\n    //  }\n    //  // inheritNonnullIfFalse(`!ref`, thenFlow) -> ref != null\n    //\n\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        this.inheritNonnullIfTrue(getLocalSetValue(expr), iff); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr), iff);\n            this.inheritNonnullIfTrue(getIfTrue(expr), iff);\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr), iff); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        if (name == program.retainInstance.internalName) {\n          // __retain just passes through the argument\n          this.inheritNonnullIfTrue(getCallOperand(expr, 0), iff);\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(\n    /** Expression being false. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr), iff); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          let exprType = getExpressionType(ifTrue);\n          if (\n            (exprType == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (exprType == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr), iff);\n            this.inheritNonnullIfFalse(getIfFalse(expr), iff);\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow((<Global>global).type, type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < <i32>i8.MIN_VALUE || value > <i32>i8.MAX_VALUE;\n          case TypeKind.I16: return value < <i32>i16.MIN_VALUE || value > <i32>i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > <i32>u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > <i32>u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = assert(instancesByName.get(instanceName));\n          assert(instance.kind == ElementKind.FUNCTION);\n          let functionInstance = <Function>instance;\n          let returnType = functionInstance.signature.returnType;\n          return !functionInstance.flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    var sb = new Array<string>();\n    if (this.is(FlowFlags.RETURNS)) sb.push(\"RETURNS\");\n    if (this.is(FlowFlags.RETURNS_WRAPPED)) sb.push(\"RETURNS_WRAPPED\");\n    if (this.is(FlowFlags.RETURNS_NONNULL)) sb.push(\"RETURNS_NONNULL\");\n    if (this.is(FlowFlags.THROWS)) sb.push(\"THROWS\");\n    if (this.is(FlowFlags.BREAKS)) sb.push(\"BREAKS\");\n    if (this.is(FlowFlags.CONTINUES)) sb.push(\"CONTINUES\");\n    if (this.is(FlowFlags.ALLOCATES)) sb.push(\"ALLOCATES\");\n    if (this.is(FlowFlags.CALLS_SUPER)) sb.push(\"CALLS_SUPER\");\n    if (this.is(FlowFlags.TERMINATES)) sb.push(\"TERMINATES\");\n    if (this.is(FlowFlags.CONDITIONALLY_RETURNS)) sb.push(\"CONDITIONALLY_RETURNS\");\n    if (this.is(FlowFlags.CONDITIONALLY_THROWS)) sb.push(\"CONDITIONALLY_THROWS\");\n    if (this.is(FlowFlags.CONDITIONALLY_BREAKS)) sb.push(\"CONDITIONALLY_BREAKS\");\n    if (this.is(FlowFlags.CONDITIONALLY_CONTINUES)) sb.push(\"CONDITIONALLY_CONTINUES\");\n    if (this.is(FlowFlags.CONDITIONALLY_ALLOCATES)) sb.push(\"CONDITIONALLY_ALLOCATES\");\n    return \"Flow(\" + this.actualFunction.toString() + \")[\" + levels.toString() + \"] \" + sb.join(\" \");\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set<i32>()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * @fileoverview Binaryen glue code for JavaScript.\n * @license Apache-2.0\n */\n\nconst binaryen = global.Binaryen || (global.Binaryen = require(\"binaryen\"));\n\nmodule.exports = binaryen;\n\nconst { Module } = require(\"../module\");\n\nModule.prototype.toText = function() {\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n  // of unreachable statements not actually emitted by the compiler. Optimizing\n  // StackIR removes these again, but may also suppress useless code emitted by\n  // the compiler that's then no longer visible in tests. Both not ideal.\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n};\n\nModule.prototype.toAsmjs = function() {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","/**\n * @fileoverview The AssemblyScript compiler.\n * @license Apache-2.0\n */\n\nimport {\n  BuiltinNames,\n  BuiltinContext,\n  builtins,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n  compileClassInstanceOf,\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  GlobalRef,\n  FeatureFlags,\n  Index,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetIndex,\n  needsExplicitUnreachable,\n  getLocalSetValue,\n  getGlobalGetName,\n  isGlobalMutable,\n  createType,\n  hasSideEffects\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  CommonNames,\n  INDEX_SUFFIX,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  IndexSignature,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  ConditionKind,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver,\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  Range,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  DecoratorKind,\n  AssertionKind,\n  SourceKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportDefaultStatement,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  ForOfStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  NamedTypeNode,\n\n  findDecorator,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, exports the function table. */\n  exportTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Static table start offset. */\n  tableBase: i32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Features to activate by default. These are the finished proposals. */\n  features: Feature = Feature.MUTABLE_GLOBALS;\n  /** If true, disallows unsafe features in user code. */\n  noUnsafe: bool = false;\n  /** If true, enables pedantic diagnostics. */\n  pedantic: bool = false;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Gets if any optimizations will be performed. */\n  get willOptimize(): bool {\n    return this.optimizeLevelHint > 0 || this.shrinkLevelHint > 0;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that the value will be retained immediately. */\n  WILL_RETAIN = 1 << 4,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3\n}\n\n/** Exported names of compiler-generated elements. */\nexport namespace ExportNames {\n  /** Name of the explicit start function, if applicable. */\n  export const start = \"_start\"; // match WASI\n  /** Name of the argumentsLength varargs helper global. */\n  export const argumentsLength = \"__argumentsLength\";\n  /** Name of the alternative argumentsLength setter function. */\n  export const setArgumentsLength = \"__setArgumentsLength\";\n  /** Name of the memory instance, if exported. */\n  export const memory = \"memory\";\n  /** Name of the table instance, if exported. */\n  export const table = \"table\";\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  get resolver(): Resolver { return this.program.resolver; }\n  /** Provided options. */\n  get options(): Options { return this.program.options; }\n  /** Module instance being compiled. */\n  module: Module;\n\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current parent element if not a function, i.e. an enum or namespace. */\n  currentParent: Element | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: i64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. First elem is blank. */\n  functionTable: string[] = [];\n  /** Arguments length helper global. */\n  builtinArgumentsLength: GlobalRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n  /** Current inline functions stack. */\n  inlineStack: Function[] = [];\n  /** Lazily compiled library functions. */\n  lazyLibraryFunctions: Set<Function> = new Set();\n  /** Pending class-specific instanceof helpers. */\n  pendingClassInstanceOf: Set<ClassPrototype> = new Set();\n  /** Functions potentially involving a virtual call. */\n  virtualCalls: Set<Function> = new Set();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program): Module {\n    return new Compiler(program).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n    var options = program.options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    var module = Module.create();\n    this.module = module;\n    var featureFlags: FeatureFlags = 0;\n    if (options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    if (options.hasFeature(Feature.MUTABLE_GLOBALS)) featureFlags |= FeatureFlags.MutableGloabls;\n    if (options.hasFeature(Feature.NONTRAPPING_F2I)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    if (options.hasFeature(Feature.TAIL_CALLS)) featureFlags |= FeatureFlags.TailCall;\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) featureFlags |= FeatureFlags.ReferenceTypes;\n    if (options.hasFeature(Feature.MULTI_VALUE)) featureFlags |= FeatureFlags.MultiValue;\n    module.setFeatures(featureFlags);\n  }\n\n  initializeProgram(): void {\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    this.program.initialize(this.options);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // check and perform this program initialization if it hasn't been done\n    this.initializeProgram();\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(BuiltinNames.start, new Signature(program, [], Type.void));\n    startFunctionInstance.internalName = BuiltinNames.start;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinNames.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinNames.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinNames.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinNames.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    // TODO: for (let file of files.values()) {\n    for (let _values = Map_values(files), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or if explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinNames.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinNames.started, NativeType.I32),\n            module.return(),\n            module.global_set(BuiltinNames.started, module.i32(1))\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.flatten(startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, ExportNames.start);\n    }\n\n    // check if the entire program is acyclic\n    var cyclicClasses = program.findCyclicClasses();\n    if (cyclicClasses.size) {\n      if (options.pedantic) {\n        // TODO: for (let classInstance of cyclicClasses) {\n        for (let _values = Set_values(cyclicClasses), i = 0, k = _values.length; i < k; ++i) {\n          let classInstance = unchecked(_values[i]);\n          this.pedantic(\n            DiagnosticCode.Type_0_is_cyclic_Module_will_include_deferred_garbage_collection,\n            classInstance.identifierNode.range, classInstance.internalName\n          );\n        }\n      }\n    } else {\n      program.registerConstantInteger(\"__GC_ALL_ACYCLIC\", Type.bool, i64_new(1, 0));\n    }\n\n    // compile lazy library functions\n    var lazyLibraryFunctions = this.lazyLibraryFunctions;\n    do {\n      let functionsToCompile = new Array<Function>();\n      // TODO: for (let instance of lazyLibraryFunctions) {\n      for (let _values = Set_values(lazyLibraryFunctions), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        functionsToCompile.push(instance);\n      }\n      lazyLibraryFunctions.clear();\n      for (let i = 0, k = functionsToCompile.length; i < k; ++i) {\n        this.compileFunction(unchecked(functionsToCompile[i]), true);\n      }\n    } while (lazyLibraryFunctions.size);\n\n    // compile pending class-specific instanceof helpers\n    // TODO: for (let prototype of this.pendingClassInstanceOf.values()) {\n    for (let _values = Set_values(this.pendingClassInstanceOf), i = 0, k = _values.length; i < k; ++i) {\n      let prototype = unchecked(_values[i]);\n      compileClassInstanceOf(this, prototype);\n    }\n\n    // set up virtual lookup tables\n    this.setupVirtualLookupTables();\n\n    // finalize runtime features\n    module.removeGlobal(BuiltinNames.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinNames.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinNames.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinNames.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      ExportNames.memory,\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table (first elem is blank)\n    var functionTable = this.functionTable;\n    var tableBase = this.options.tableBase;\n    if (!tableBase) tableBase = 1; // leave first elem blank\n    module.setFunctionTable(tableBase + functionTable.length, Module.UNLIMITED_TABLE, functionTable, module.i32(tableBase));\n\n    // import and/or export table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) {\n      module.addTableImport(\"0\", \"env\", \"table\");\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Importing_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n    if (options.exportTable) {\n      module.addTableExport(\"0\", ExportNames.table);\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Exporting_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n\n    // set up module exports\n    // TODO: for (let file of this.program.filesByName.values()) {\n    for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\n    }\n    return module;\n  }\n\n  private setupVirtualLookupTables(): void {\n    // TODO: :-)\n    var program = this.program;\n    var virtualCalls = this.virtualCalls;\n\n    // Virtual instance methods in the function table are potentially called virtually\n    var functionTable = this.functionTable;\n    var elementsByName = program.elementsByName;\n    for (let i = 0, k = functionTable.length; i < k; ++i) {\n      let instanceName = unchecked(functionTable[i]);\n      if (elementsByName.has(instanceName)) { // otherwise ~anonymous\n        let instance = assert(elementsByName.get(instanceName));\n        if (instance.is(CommonFlags.INSTANCE | CommonFlags.VIRTUAL)) {\n          assert(instance.kind == ElementKind.FUNCTION);\n          virtualCalls.add(<Function>instance);\n        }\n      }\n    }\n\n    // Inject a virtual lookup table into each function potentially called virtually\n    // TODO: for (let instance of virtualCalls.values()) {\n    for (let _values = Set_values(virtualCalls), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      this.warning(\n        DiagnosticCode.Function_0_is_possibly_called_virtually_which_is_not_yet_supported,\n        instance.identifierNode.range, instance.internalName\n      );\n    }\n  }\n\n  // === Exports ==================================================================================\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let [elementName, element] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let elementName = unchecked(_keys[i]);\n        let element = assert(exports.get(elementName));\n        this.ensureModuleExport(elementName, element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        this.ensureModuleExports(exportsStar[i]);\n      }\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionInstances = (<FunctionPrototype>element).instances;\n        if (functionInstances) {\n          // TODO: for (let instance of instances.values()) {\n          for (let _values = Map_values(functionInstances), i = 0, k = _values.length; i < k; ++i) {\n            let instance = unchecked(_values[i]);\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let classInstances = (<ClassPrototype>element).instances;\n        if (classInstances) {\n          // TODO: for (let instance of instances.values()) {\n          for (let _values = Map_values(classInstances), i = 0, k = _values.length; i < k; ++i) {\n            let instance = unchecked(_values[i]);\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>element;\n        let getterPrototype = propertyPrototype.getterPrototype;\n        if (getterPrototype) this.ensureModuleExport(GETTER_PREFIX + name, getterPrototype, prefix);\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (setterPrototype) this.ensureModuleExport(SETTER_PREFIX + name, setterPrototype, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let global = <Global>element;\n        let isConst = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            global.identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        let enumValue = <EnumValue>element;\n        if (!enumValue.isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            enumValue.identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let functionInstance = <Function>element;\n        let signature = functionInstance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          functionInstance = this.ensureTrampoline(functionInstance);\n          this.ensureBuiltinArgumentsLength();\n        }\n        if (functionInstance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(functionInstance.internalName, prefix + name);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>element;\n        let getter = propertyInstance.getterInstance;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = propertyInstance.setterInstance;\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>element;\n        if (element.is(CommonFlags.COMPILED)) {\n          let module = this.module;\n          module.addFunctionExport(fieldInstance.internalGetterName, prefix + GETTER_PREFIX + name);\n          if (!element.is(CommonFlags.READONLY)) {\n            module.addFunctionExport(fieldInstance.internalSetterName, prefix + SETTER_PREFIX + name);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let classInstance = <Class>element;\n        // make the class name itself represent its runtime id\n        if (!classInstance.type.isUnmanaged) {\n          let module = this.module;\n          let internalName = classInstance.internalName;\n          module.addGlobal(internalName, NativeType.I32, false, module.i32(classInstance.id));\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.INDEXSIGNATURE: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (element.kind == ElementKind.NAMESPACE) {\n        let implicitExport = element.is(CommonFlags.SCOPED);\n        // TODO: for (let [memberName, member] of members) {\n        for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(members.get(memberName));\n          if (implicitExport || member.is(CommonFlags.EXPORT)) {\n            this.ensureModuleExport(memberName, member, subPrefix);\n          }\n        }\n      } else {\n        // TODO: for (let [memberName, member] of members) {\n        for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(members.get(memberName));\n          if (!member.is(CommonFlags.PRIVATE)) {\n            this.ensureModuleExport(memberName, member, subPrefix);\n          }\n        }\n      }\n    }\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n          if (instance) this.compileFunction(instance);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let instance = this.resolver.resolveClass(<ClassPrototype>element, null);\n          if (instance) this.compileClass(instance);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>element;\n        let getterPrototype = propertyPrototype.getterPrototype;\n        if (getterPrototype) {\n          assert(!getterPrototype.is(CommonFlags.GENERIC));\n          let instance = this.resolver.resolveFunction(getterPrototype, null);\n          if (instance) this.compileFunction(instance);\n        }\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (setterPrototype) {\n          assert(!setterPrototype.is(CommonFlags.GENERIC));\n          let instance = this.resolver.resolveFunction(setterPrototype, null);\n          if (instance) this.compileFunction(instance);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE:\n      case ElementKind.INDEXSIGNATURE: break;\n      default: assert(false);\n    }\n    if (compileMembers) {\n      let members = element.members;\n      if (members) {\n        // TODO: for (let element of members.values()) {\n        for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n          let element = unchecked(_values[i]);\n          this.compileElement(element);\n        }\n      }\n    }\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let element of exports.values()) {\n      for (let _values = Map_values(exports), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        this.compileElement(element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = unchecked(exportsStar[i]);\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = assert(filesByName.get(normalizedPathWithoutExtension));\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = assert(filesByName.get(pathWithIndex));\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var startSignature = startFunction.signature;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    // no need to insert unreachable since last statement should have done that\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        startSignature.nativeParams,\n        startSignature.nativeResults,\n        varTypes,\n        module.flatten(startFunctionBody)\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  /** Compiles a global variable. */\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinNames.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinNames.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType,\n          !isDeclaredConstant\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // Importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Feature_0_is_not_enabled,\n          global.declaration.range, \"mutable-globals\"\n        );\n      }\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constants and gets of\n    // imported immutable globals, hence such initializations must be performed in the start.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n      }\n\n      // If not a constant, attempt to precompute\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          let origInitExpr = initExpr;\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\n          if (this.skippedAutoreleases.has(origInitExpr)) this.skippedAutoreleases.add(initExpr);\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Handle special case of initializing from imported immutable global\n      if (initializeInStart && getExpressionId(initExpr) == ExpressionId.GlobalGet) {\n        let fromName = assert(getGlobalGetName(initExpr));\n        if (!isGlobalMutable(module.getGlobal(fromName))) {\n          let elementsByName = this.program.elementsByName;\n          if (elementsByName.has(fromName)) {\n            let global = assert(elementsByName.get(fromName));\n            if (global.is(CommonFlags.AMBIENT)) initializeInStart = false;\n          }\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      if (global.is(CommonFlags.INLINED)) {\n        initExpr = this.compileInlineConstant(global, global.type, Constraints.PREFER_STATIC | Constraints.WILL_RETAIN);\n      } else {\n        initExpr = this.makeZero(type);\n      }\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          findDecorator(DecoratorKind.INLINE, global.decoratorNodes)!.range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, this.makeZero(type));\n      if (type.isManaged && !this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  /** Compiles an enum. */\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var previousParent = this.currentParent;\n    this.currentParent = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    var members = element.members;\n    if (members) {\n      // TODO: for (let member of element.members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let enumValue = <EnumValue>member;\n        let valueNode = enumValue.valueNode;\n        enumValue.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            initExpr = module.precomputeExpression(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              enumValue.identifierNode.range.atEnd\n            );\n          }\n          if (isInline) {\n            let value = i64_add(previousValue.constantIntegerValue, i64_new(1));\n            assert(!i64_high(value));\n            initExpr = module.i32(i64_low(value));\n          } else {\n            initExpr = module.binary(BinaryOp.AddI32,\n              module.global_get(previousValue.internalName, NativeType.I32),\n              module.i32(1)\n            );\n          }\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(enumValue.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(enumValue, initExpr, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            enumValue.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (enumValue.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(enumValue.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(enumValue.internalName, NativeType.I32, false, initExpr);\n          }\n          enumValue.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = enumValue;\n      }\n    }\n    this.currentParent = previousParent;\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Compiles a priorly resolved function. */\n  compileFunction(\n    /** Function to compile. */\n    instance: Function,\n    /** Force compilation of stdlib alternative if a builtin. */\n    forceStdAlternative: bool = false\n  ): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    if (!forceStdAlternative) {\n      if (instance.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n      if (instance.hasDecorator(DecoratorFlags.LAZY)) {\n        this.lazyLibraryFunctions.add(instance);\n        return true;\n      }\n    }\n\n    var previousType = this.currentType;\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          decorator.range, \"external\"\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.local_set(index,\n              this.makeRetain(\n                module.local_get(index, type.toNativeType())\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\n        }\n      }\n\n      this.compileFunctionBody(instance, stmts);\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      let body = module.flatten(stmts, instance.signature.returnType.toNativeType());\n      if (instance.is(CommonFlags.VIRTUAL)) {\n        body = module.block(\"vtable\", [ body ], getExpressionType(body));\n      }\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(instance.additionalLocals),\n        body\n      );\n\n    // imported function\n    } else if (instance.is(CommonFlags.AMBIENT)) {\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\n      module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        signature.nativeParams,\n        signature.nativeResults\n      );\n      funcRef = module.getFunction(instance.internalName);\n\n    // abstract function\n    } else if (instance.is(CommonFlags.ABSTRACT)) {\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        null,\n        module.unreachable()\n      );\n      this.virtualCalls.add(instance);\n    } else {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        instance.identifierNode.range\n      );\n      funcRef = 0; // TODO?\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    return true;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  private compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements also being returned. Creates a new array if omitted. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\n\n      // take special care of properly retaining the returned value\n      let expr = this.compileReturnedExpression((<ExpressionStatement>bodyNode).expression, returnType, Constraints.CONV_IMPLICIT);\n\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n          flow.freeTempLocal(temp);\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.if(\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.local_get(thisLocal.index, nativeSizeType)\n              ),\n              module.local_set(thisLocal.index,\n                this.makeRetain(\n                  this.makeAllocation(classInstance)\n                ),\n              )\n            )\n          );\n          this.makeFieldInitializationInConstructor(classInstance, stmts);\n        }\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if (classInstance.base !== null && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  // === Classes ==================================================================================\n\n  /** Compiles a priorly resolved class. */\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      // TODO: for (let element of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!element.is(CommonFlags.GENERIC)) {\n              let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n              if (functionInstance) this.compileFunction(functionInstance);\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyPrototype = <PropertyPrototype>element;\n            let getterPrototype = propertyPrototype.getterPrototype;\n            if (getterPrototype) {\n              assert(!getterPrototype.is(CommonFlags.GENERIC));\n              let instance = this.resolver.resolveFunction(getterPrototype, null);\n              if (instance) this.compileFunction(instance);\n            }\n            let setterPrototype = propertyPrototype.setterPrototype;\n            if (setterPrototype) {\n              assert(!setterPrototype.is(CommonFlags.GENERIC));\n              let instance = this.resolver.resolveFunction(setterPrototype, null);\n              if (instance) this.compileFunction(instance);\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.ensureConstructor(instance, instance.identifierNode);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      // TODO: for (let element of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!element.is(CommonFlags.GENERIC)) {\n              let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n              if (functionInstance) this.compileFunction(functionInstance);\n            }\n            break;\n          }\n          case ElementKind.FIELD: {\n            this.compileField(<Field>element);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            this.compileProperty(<Property>element);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  /** Compiles an instance field to a getter and a setter. */\n  compileField(instance: Field): bool {\n    this.compileFieldGetter(instance);\n    this.compileFieldSetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /** Compiles the getter of the specified instance field. */\n  compileFieldGetter(instance: Field): bool {\n    // A getter retains, while a load, as of a field access, does not.\n    if (instance.getterRef) return true;\n    var type = instance.type;\n    var nativeThisType = this.options.nativeSizeType;\n    var nativeValueType = type.toNativeType();\n    var module = this.module;\n    var valueExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\n      module.local_get(0, nativeThisType),\n      nativeValueType, instance.memoryOffset\n    );\n    if (type.isManaged) valueExpr = this.makeRetain(valueExpr);\n    instance.getterRef = module.addFunction(instance.internalGetterName, nativeThisType, nativeValueType, null, valueExpr);\n    if (instance.setterRef) instance.set(CommonFlags.COMPILED);\n    return true;\n  }\n\n  /** Compiles the setter of the specified instance field. */\n  compileFieldSetter(instance: Field): bool {\n    if (instance.setterRef) return true;\n    var type = instance.type;\n    var nativeThisType = this.options.nativeSizeType;\n    var nativeValueType = type.toNativeType();\n    var module = this.module;\n    var valueExpr: ExpressionRef;\n    var varTypes: NativeType[] | null = null;\n    if (type.isManaged) {\n      // Can't use makeReplace here since there's no corresponding flow, so\n      // 0: this, 1: value, 2: oldValue (temp)\n      valueExpr = module.block(null, [\n        module.if(\n          module.binary(nativeValueType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            // value != (oldValue = this.field)\n            module.local_get(1, nativeValueType),\n            module.local_tee(2,\n              module.load(type.byteSize, false,\n                module.local_get(0, nativeThisType),\n                nativeValueType, instance.memoryOffset\n              )\n            )\n          ),\n          module.block(null, [\n            module.drop(\n              this.makeRetain(module.local_get(1, nativeValueType))\n            ),\n            this.makeRelease(module.local_get(2, nativeValueType))\n          ])\n        ),\n        module.local_get(1, nativeValueType)\n      ], nativeValueType);\n      varTypes = [ nativeValueType ];\n    } else {\n      valueExpr = module.local_get(1, nativeValueType);\n    }\n    instance.setterRef = module.addFunction(instance.internalSetterName, createType([ nativeThisType, nativeValueType ]), NativeType.None, varTypes,\n      module.store(type.byteSize,\n        module.local_get(0, nativeThisType),\n        valueExpr,\n        nativeValueType, instance.memoryOffset\n      )\n    );\n    if (instance.getterRef) instance.set(CommonFlags.COMPILED);\n    return true;\n  }\n\n  /** Compiles a property to a getter and potentially a setter. */\n  compileProperty(instance: Property): bool {\n    this.compilePropertyGetter(instance);\n    this.compilePropertySetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /* Compiles the getter of the specified property. */\n  compilePropertyGetter(instance: Property): bool {\n    var getterInstance = instance.getterInstance;\n    if (getterInstance) {\n      let ret = this.compileFunction(getterInstance);\n      let setterInstance = instance.setterInstance;\n      if (getterInstance.is(CommonFlags.COMPILED) && (!setterInstance || setterInstance.is(CommonFlags.COMPILED))) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  /** Compiles the setter of the specified property. */\n  compilePropertySetter(instance: Property): bool {\n    var setterInstance = instance.setterInstance;\n    if (setterInstance) {\n      let ret = this.compileFunction(setterInstance);\n      let getterInstance = instance.getterInstance;\n      if (getterInstance !== null && getterInstance.is(CommonFlags.COMPILED) && setterInstance.is(CommonFlags.COMPILED)) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 16): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that a string exists in static memory and returns a pointer to it. Deduplicates. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = assert(segments.get(stringValue)); // reuse\n    } else {\n      let length = stringValue.length;\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\n      program.writeRuntimeHeader(buffer, 0, stringInstance.id, length << 1);\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buffer);\n      segments.set(stringValue, stringSegment);\n    }\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ref), i64_high(ref));\n    } else {\n      assert(i64_is_u32(ref));\n      return this.module.i32(i64_low(ref));\n    }\n  }\n\n  /** Adds a buffer to static memory and returns the created segment. */\n  addStaticBuffer(elementType: Type, values: ExpressionRef[], id: u32 = this.program.arrayBufferInstance.id): MemorySegment {\n    var program = this.program;\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\n    program.writeRuntimeHeader(buf, 0, id, byteLength);\n    var pos = runtimeHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    assert(pos == buf.length);\n\n    return this.addMemorySegment(buf);\n  }\n\n  /** Adds an array header to static memory and returns the created segment. */\n  private addStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayInstanceSize = arrayInstance.nextMemoryOffset;\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\n    program.writeRuntimeHeader(buf, 0, arrayInstance.id, arrayInstanceSize);\n\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\n    assert(!program.options.isWasm64); // TODO\n    assert(arrayInstance.writeField(\"buffer\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"byteLength\", bufferLength, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\n\n    return this.addMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(instance: Function): i32 {\n    assert(instance.is(CommonFlags.COMPILED));\n    var index = instance.functionTableIndex;\n    if (index >= 0) return index;\n    var functionTable = this.functionTable;\n    var tableBase = this.options.tableBase;\n    if (!tableBase) tableBase = 1; // leave first elem blank\n    index = tableBase + functionTable.length;\n    if (!instance.is(CommonFlags.TRAMPOLINE) && instance.signature.requiredParameters < instance.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      instance = this.ensureTrampoline(instance);\n    }\n    functionTable.push(instance.internalName);\n    instance.functionTableIndex = index;\n    return index;\n  }\n\n  // === Statements ===============================================================================\n\n  /** Compiles a top level statement (incl. function declarations etc.) to the specified body. */\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        if (element) {\n          assert(element.kind == ElementKind.ENUM);\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        }\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let declaration = <NamespaceDeclaration>statement;\n        let element = this.program.getElementByDeclaration(declaration);\n        if (element) {\n          // any potentiall merged element\n          let previousParent = this.currentParent;\n          this.currentParent = element;\n          let memberStatements = declaration.members;\n          for (let i = 0, k = memberStatements.length; i < k; ++i) {\n            this.compileTopLevelStatement(memberStatements[i], body);\n          }\n          this.currentParent = previousParent;\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          if (element) {\n            assert(element.kind == ElementKind.GLOBAL);\n            if (\n              !element.is(CommonFlags.AMBIENT) && // delay imports\n              !element.hasDecorator(DecoratorFlags.LAZY)\n            ) this.compileGlobal(<Global>element);\n          }\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element !== null && element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        let exportStatement = <ExportStatement>statement;\n        let internalPath = exportStatement.internalPath;\n        if (internalPath !== null) {\n          this.compileFileByPath(internalPath, assert(exportStatement.path));\n        }\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.compileTopLevelStatement((<ExportDefaultStatement>statement).declaration, body);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        let importStatement = <ImportStatement>statement;\n        this.compileFileByPath(importStatement.internalPath, importStatement.path);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  /** Compiles a statement. */\n  compileStatement(\n    /** Statement to compile. */\n    statement: Statement,\n    /** Whether this is the last statement of the body, if known. */\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.FOROF: {\n        stmt = this.compileForOfStatement(<ForOfStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Not_implemented,\n          statement.range\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  /** Compiles a series of statements. */\n  compileStatements(\n    /** Statements to compile. */\n    statements: Statement[],\n    /** Whether this is an immediate body statement. */\n    isBody: bool = false,\n    /** Statements to append to that is also returned. Created if omitted. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j: Index = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  private compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return this.module.flatten(stmts);\n  }\n\n  private compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var labelNode = statement.label;\n    if (labelNode) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        labelNode.range\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var parent = flow.parent;\n    while (parent !== null && parent.breakLabel == breakLabel) {\n      this.performAutoreleases(parent, stmts, /* finalize */ false);\n      parent = parent.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return module.flatten(stmts);\n  }\n\n  private compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        label.range\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current !== null && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* finalize */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return module.flatten(stmts);\n  }\n\n  private compileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement\n  ): ExpressionRef {\n    return this.doCompileDoStatement(statement, null);\n  }\n\n  private doCompileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                          └►┐ flow\n    //  (loop $continue                         ├◄───────────┐ recompile?\n    //   (body)                                 └─┐ bodyFlow │\n    //   [autorelease]                          ┌─┘          │\n    //                                        ┌◄┼►╢          │ breaks or terminates?\n    //   (local.set $tcond (condition))       │ └─┐ condFlow │\n    //   [autorelease]                        │ ┌─┘          │\n    //   (br_if (local.get $tcond) $continue) ├◄┴────────────┘ condition?\n    //  )                                     └─┐\n    // )                                      ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"do-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"do-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Compile the body (always executes)\n    var bodyFlow = flow.fork();\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Shortcut if body never falls through\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      flow.inherit(bodyFlow);\n\n    // Otherwise evaluate the condition\n    } else {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n\n      let condFlow = flow.fork();\n      this.currentFlow = condFlow;\n      let condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpression(statement.condition, Type.i32),\n          this.currentType\n        )\n      );\n      let condKind = evaluateConditionKind(condExpr);\n\n      // Shortcut if condition is always false\n      if (condKind == ConditionKind.FALSE) {\n        if (hasSideEffects(condExpr)) {\n          bodyStmts.push(\n            module.drop(condExpr)\n          );\n        }\n        this.performAutoreleases(condFlow, bodyStmts);\n        flow.inherit(bodyFlow);\n\n      // Terminate if condition is always true and body never breaks\n      } else if (condKind == ConditionKind.TRUE && !bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        if (hasSideEffects(condExpr)) {\n          bodyStmts.push(\n            module.drop(condExpr)\n          );\n        }\n        this.performAutoreleases(condFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel)\n        );\n        flow.set(FlowFlags.TERMINATES);\n\n      } else {\n        let tcond = condFlow.getTempLocal(Type.bool);\n        bodyStmts.push(\n          module.local_set(tcond.index, condExpr)\n        );\n        this.performAutoreleases(condFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel,\n            module.local_get(tcond.index, NativeType.I32)\n          )\n        );\n        condFlow.freeTempLocal(tcond);\n        flow.inherit(condFlow);\n\n        // Detect if local flags are incompatible before and after looping, and\n        // if so recompile by unifying local flags between iterations.\n        if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n          assert(!flowAfter); // should work on the first attempt\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return this.doCompileDoStatement(statement, flow);\n        }\n      }\n    }\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(bodyStmts)\n      )\n    ]);\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  private compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  private compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  private compileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement\n  ): ExpressionRef {\n    return this.doCompileForStatement(statement, null);\n  }\n\n  private doCompileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (initializer)                  └►┐ flow\n    // (block $break                    │\n    //  (loop $loop                     ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //   [autorelease]                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (block $continue            │ │            │\n    //     (body)                     │ └─┐ bodyFlow │\n    //     [autorelease]              │ ┌─┘          │\n    //    )                           ├◄┼►╢          │ breaks or terminates?\n    //    (incrementor)               │ └─┐ incrFlow │\n    //    [autorelease]               │ ┌─┘          │\n    //                                │ └────────────┘\n    //    (br $loop)                  └─┐\n    //   )                              │\n    //  )                               │\n    // )                                │\n    // [autorelease]                  ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    this.currentFlow = flow;\n\n    var breakLabel = \"for-break\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"for-continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var loopLabel = \"for-loop|\" + label;\n\n    // Compile initializer if present (but wait with autoreleases)\n    var initializer = statement.initializer;\n    if (initializer) {\n      assert(\n        initializer.kind == NodeKind.EXPRESSION ||\n        initializer.kind == NodeKind.VARIABLE\n      );\n      stmts.push(this.compileStatement(initializer));\n    }\n\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr: ExpressionRef;\n    var condKind: ConditionKind;\n    var condition = statement.condition;\n    if (condition) {\n      condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpression(condition, Type.bool),\n          this.currentType\n        )\n      );\n      condKind = evaluateConditionKind(condExpr);\n\n      // Shortcut if condition is always false (body never runs)\n      if (condKind == ConditionKind.FALSE) {\n        if (hasSideEffects(condExpr)) {\n          stmts.push(\n            module.drop(condExpr)\n          );\n        }\n        this.performAutoreleases(condFlow, stmts);\n        condFlow.freeScopedLocals();\n        flow.inherit(condFlow);\n        this.performAutoreleases(flow, stmts);\n        flow.freeScopedLocals();\n        outerFlow.inherit(flow);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return module.flatten(stmts);\n      }\n    } else {\n      condExpr = module.i32(1);\n      condKind = ConditionKind.TRUE;\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp while we autorelease\n    var tcond = flow.getTempLocal(Type.bool);\n    var loopStmts = new Array<ExpressionRef>();\n    loopStmts.push(\n      module.local_set(tcond.index, condExpr)\n    );\n    this.performAutoreleases(condFlow, loopStmts);\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Check if body terminates\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n    }\n    if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n    else flow.inheritBranch(bodyFlow);\n    bodyFlow.freeScopedLocals();\n\n    var ifStmts = new Array<ExpressionRef>();\n    ifStmts.push(\n      module.block(continueLabel, bodyStmts)\n    );\n\n    // Compile the incrementor if it runs\n    // Can still fall through to here if body continues, hence is already known to terminate\n    if (!bodyFlow.is(FlowFlags.TERMINATES) || bodyFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) {\n      let incrementor = statement.incrementor;\n      if (incrementor) {\n        let incrFlow = flow.fork();\n        this.currentFlow = incrFlow;\n        ifStmts.push(\n          this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP)\n        );\n        this.performAutoreleases(incrFlow, ifStmts);\n        incrFlow.freeScopedLocals();\n        flow.inherit(incrFlow); // mostly local flags, also covers late termination by throwing\n        this.currentFlow = flow;\n      }\n\n      ifStmts.push(\n        module.br(loopLabel)\n      );\n\n      // Detect if local flags are incompatible before and after looping, and if\n      // so recompile by unifying local flags between iterations.\n      if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        assert(!flowAfter); // should work on the first attempt\n        assert(!bodyFlow.hasScopedLocals);\n        flow.freeScopedLocals();\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileForStatement(statement, flow);\n      }\n    }\n    loopStmts.push(\n      module.if(module.local_get(tcond.index, NativeType.I32),\n        module.flatten(ifStmts)\n      )\n    );\n\n    stmts.push(\n      module.block(breakLabel, [\n        module.loop(loopLabel,\n          module.flatten(loopStmts)\n        )\n      ])\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    flow.freeScopedLocals();\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      stmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(flow, stmts);\n    }\n    this.currentFlow = outerFlow;\n    return module.flatten(stmts);\n  }\n\n  private compileForOfStatement(\n    statement: ForOfStatement\n  ): ExpressionRef {\n    this.error(\n      DiagnosticCode.Not_implemented,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  private compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // (if              └►┐ flow\n    //  (condition)      ┌┴───────────┐ condition?\n    //  (block           │            │\n    //   (ifTrue)        └►┐ thenFlow │\n    //   [autorelease]   ┌─┘          │\n    //  )                ├─╢          │\n    //  (block           │          ┌◄┤ present?\n    //   (ifFalse)       │          │ └►┐ elseFlow\n    //   [autorelease]   │          │ ┌─┘\n    //  )                │          │ ├─╢\n    // )                 └┬─────────┴─┘\n    // ...              ┌◄┘\n    // [autorelease]               incl. condition\n\n    // Precompute the condition (always executes)\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n    var condKind = evaluateConditionKind(condExpr);\n\n    // Shortcut if the condition is constant\n    switch (condKind) {\n      case ConditionKind.TRUE: {\n        if (hasSideEffects(condExpr)) {\n          return module.block(null, [\n            module.drop(condExpr),\n            this.compileStatement(ifTrue)\n          ]);\n        }\n        return this.compileStatement(ifTrue);\n      }\n      case ConditionKind.FALSE: {\n        if (hasSideEffects(condExpr)) {\n          return ifFalse\n            ? module.block(null, [\n                module.drop(condExpr),\n                this.compileStatement(ifFalse)\n              ])\n            : module.drop(condExpr);\n        }\n        return ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.nop();\n      }\n    }\n\n    // From here on condition is always unknown\n\n    var flow = this.currentFlow;\n\n    // Compile ifTrue assuming the condition turned out true\n    var thenStmts = new Array<ExpressionRef>();\n    var thenFlow = flow.fork();\n    this.currentFlow = thenFlow;\n    thenFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, thenStmts);\n    } else {\n      thenStmts.push(this.compileStatement(ifTrue));\n    }\n    var thenTerminates = thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS);\n    if (thenTerminates) {\n      thenStmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(thenFlow, thenStmts);\n    }\n    thenFlow.freeScopedLocals();\n    this.currentFlow = flow;\n\n    // Compile ifFalse assuming the condition turned out false, if present\n    if (ifFalse) {\n      let elseStmts = new Array<ExpressionRef>();\n      let elseFlow = flow.fork();\n      this.currentFlow = elseFlow;\n      elseFlow.inheritNonnullIfFalse(condExpr);\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, elseStmts);\n      } else {\n        elseStmts.push(this.compileStatement(ifFalse));\n      }\n      let elseTerminates = elseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS);\n      if (elseTerminates) {\n        elseStmts.push(module.unreachable());\n      } else {\n        this.performAutoreleases(elseFlow, elseStmts);\n      }\n      elseFlow.freeScopedLocals();\n      this.currentFlow = flow;\n      if (elseTerminates && !thenTerminates) {\n        flow.inherit(thenFlow);\n      } else {\n        flow.inheritMutual(thenFlow, elseFlow);\n      }\n      return module.if(condExpr,\n        module.flatten(thenStmts),\n        module.flatten(elseStmts)\n      );\n    } else {\n      flow.inheritBranch(thenFlow);\n      flow.inheritNonnullIfFalse(condExpr,\n        thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)\n          ? null     // thenFlow terminates: just inherit\n          : thenFlow // must become nonnull in thenFlow otherwise\n      );\n      return module.if(condExpr,\n        module.flatten(thenStmts)\n      );\n    }\n  }\n\n  private compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n\n      // take special care of properly retaining the returned value\n      expr = this.compileReturnedExpression(valueExpression, returnType, constraints);\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    if (returnType != Type.void && stmts.length > 0) {\n      let temp = flow.getTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n      flow.freeTempLocal(temp);\n    }\n    flow.freeScopedLocals();\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastInBody && expr != 0 && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.flatten(stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.isInline) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.flatten(stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.flatten(stmts);\n  }\n\n  private compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString() + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString()\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString() + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  private compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    this.finishAutoreleases(flow, stmts);\n\n    // TODO: requires exception-handling spec.\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).arguments;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(\n      this.makeAbort(message, statement)\n    );\n\n    return this.module.flatten(stmts);\n  }\n\n  private compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Not_implemented,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  private compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      let typeNode = declaration.type;\n      let initializerNode = declaration.initializer;\n      if (typeNode) {\n        type = resolver.resolveType( // reports\n          typeNode,\n          flow.actualFunction,\n          makeMap(flow.contextualTypeArguments)\n        );\n        if (!type) continue;\n        if (initializerNode) {\n          initExpr = this.compileExpression(initializerNode, type, // reports\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        initExpr = this.compileExpression(initializerNode, Type.auto,\n          Constraints.WILL_RETAIN\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return module.unreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              let existing = assert(scopedLocals.get(name));\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existing.declaration.name.range,\n                name\n              );\n              return this.module.unreachable();\n            }\n            scopedLocals.set(name, local);\n            isStatic = true;\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.isInline\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            if (!existingLocal.declaration.range.source.isNative) {\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existingLocal.declaration.name.range,\n                name\n              );\n            } else { // scoped locals are shared temps that don't track declarations\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n            }\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          let existing = flow.lookupLocal(name);\n          if (existing) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range,\n              existing.declaration.name.range,\n              name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                this.makeZero(type)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : module.flatten(initializers);\n  }\n\n  private compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  private compileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement\n  ): ExpressionRef {\n    return this.doCompileWhileStatement(statement, null);\n  }\n\n  private doCompileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                  └►┐ flow\n    //  (loop $continue                 ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //   [autorelease]                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (body)                      │ └─┐ bodyFlow │\n    //    [autorelease]               │ ┌─┘          │\n    //                                ├◄┼►╢          │ breaks or terminates?\n    //    (br $continue)              │ └────────────┘\n    //   )                            └─┐\n    //  )                               │\n    // )                              ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"while-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"while-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n    var condKind = evaluateConditionKind(condExpr);\n\n    // Shortcut if condition is always false (body never runs)\n    if (condKind == ConditionKind.FALSE) {\n      this.performAutoreleases(condFlow, stmts);\n      assert(!flow.hasScopedLocals);\n      outerFlow.popBreakLabel();\n      this.currentFlow = outerFlow;\n      return module.flatten(stmts);\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp while we autorelease\n    var tcond = flow.getTempLocal(Type.bool);\n    stmts.push(\n      module.local_set(tcond.index, condExpr)\n    );\n    this.performAutoreleases(condFlow, stmts);\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Simplify if body always terminates\n    if (bodyFlow.is(FlowFlags.TERMINATES)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n    // Terminate if condition is always true and body never breaks\n    } else if (condKind == ConditionKind.TRUE && !bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n      bodyStmts.push(\n        module.br(continueLabel)\n      );\n      flow.set(FlowFlags.TERMINATES);\n\n    } else {\n      let breaks = bodyFlow.is(FlowFlags.BREAKS);\n      if (breaks) {\n        bodyStmts.push(\n          module.unreachable()\n        );\n      } else {\n        this.performAutoreleases(bodyFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel)\n        );\n      }\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n      // Detect if local flags are incompatible before and after looping, and\n      // if so recompile by unifying local flags between iterations.\n      // Here: Only relevant if flow does not always break.\n      if (!breaks && Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        assert(!flowAfter); // should work on the first attempt\n        flow.freeTempLocal(tcond);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileWhileStatement(statement, flow);\n      }\n    }\n    stmts.push(\n      module.if(module.local_get(tcond.index, NativeType.I32),\n        module.flatten(bodyStmts)\n      )\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(stmts)\n      )\n    ]);\n    if (condKind == ConditionKind.TRUE && outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED | CommonFlags.RESOLVED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64(element.constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32(<f32>element.constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    this.currentType = contextualType;\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType.nonNullableType) { // allow assigning non-nullable to nullable\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, constraints)\n    );\n  }\n\n  /** Compiles an expression that is about to be returned, taking special care of retaining and setting flow states. */\n  private compileReturnedExpression(\n    /** Expression to compile. */\n    expression: Expression,\n    /** Return type of the function. */\n    returnType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    // pretend to retain the expression immediately so the autorelease, if any, is skipped\n    var expr = this.compileExpression(expression, returnType, constraints | Constraints.WILL_RETAIN);\n    var flow = this.currentFlow;\n    if (returnType.isManaged) {\n      // check if that worked, and if it didn't, keep the reference alive\n      if (!this.skippedAutoreleases.has(expr)) {\n        let index = this.tryUndoAutorelease(expr, flow);\n        if (index == -1) expr = this.makeRetain(expr);\n        this.skippedAutoreleases.add(expr);\n      }\n    }\n    // remember return states\n    if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n    if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n    return expr;\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit.*/\n    explicit: bool,\n    /** Whether the result should be wrapped, if a small integer. */\n    wrap: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    // reference involved\n    if (fromType.is(TypeFlags.REFERENCE) || toType.is(TypeFlags.REFERENCE)) {\n      if (this.currentFlow.isNonnull(expr, fromType)) {\n        fromType = fromType.nonNullableType;\n      } else if (explicit && fromType.is(TypeFlags.NULLABLE) && !toType.is(TypeFlags.NULLABLE)) {\n        // explicit conversion from nullable to non-nullable requires a runtime\n        // check here because nonnull state above already didn't know better\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, fromType, reportNode);\n        }\n        fromType = fromType.nonNullableType;\n      }\n      if (fromType.isAssignableTo(toType)) { // downcast or same\n        assert(fromType.kind == toType.kind);\n        this.currentType = toType;\n        return expr;\n      }\n      if (explicit && toType.nonNullableType.isAssignableTo(fromType)) { // upcast\n        // <Cat | null>(<Animal>maybeCat)\n        assert(fromType.kind == toType.kind);\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeUpcastCheck(expr, fromType, toType, reportNode);\n        }\n        this.currentType = toType;\n        return expr;\n      }\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      this.currentType = toType;\n      return module.unreachable();\n    }\n\n    // not dealing with references from here on\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n          wrap = false;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.unary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrap = false;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrap = false;\n          }\n        // same size\n        } else {\n          if (!explicit && !this.options.isWasm64 && fromType.is(TypeFlags.POINTER) && !toType.is(TypeFlags.POINTER)) {\n            this.warning(\n              DiagnosticCode.Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit,\n              reportNode.range, fromType.toString(), toType.toString()\n            );\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrap\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  private compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          makeMap(flow.contextualTypeArguments)\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, type, expression);\n        }\n        this.currentType = type.nonNullableType;\n        return expr;\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let operand = expression.expression;\n        // if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.ARRAY) {\n        //   let element = this.resolver.lookupExpression(expression /* ! */, this.currentFlow, contextualType);\n        //   if (!element) return this.module.unreachable();\n        //   if (element.kind == ElementKind.CLASS) {\n        //     let arrayInstance = <Class>element;\n        //     if (arrayInstance.extends(this.program.readonlyArrayPrototype)) {\n        //       return this.compileStaticArrayLiteral(<ArrayLiteralExpression>operand, arrayInstance.type, constraints);\n        //     }\n        //   }\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  private compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        leftExpr = this.convertExpression(leftExpr,\n          leftType, leftType = commonType,\n          false, true, // !\n          left\n        );\n        rightExpr = this.convertExpression(rightExpr,\n          rightType, rightType = commonType,\n          false, true, // !\n          right\n        );\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (commonType) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, commonType,\n            false, true, // !\n            left\n          );\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, commonType,\n            false, true, // !\n            right\n          );\n          rightType = commonType;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, false);\n        if (commonType) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, commonType,\n            false, true, // !\n            left\n          );\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, commonType,\n            false, true, // !\n            right\n          );\n          rightType = commonType;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AllTrueI8x16,\n              module.binary(BinaryOp.EqI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, false);\n        if (commonType) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, commonType,\n            false, true, // !\n            left\n          );\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, commonType,\n            false, true, // !\n            right\n          );\n          rightType = commonType;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AnyTrueI8x16,\n              module.binary(BinaryOp.NeI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: !ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"*\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"**\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        let targetType = leftType;\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          instance = this.f32PowInstance;\n          if (!instance) {\n            let namespace = this.program.lookupGlobal(CommonNames.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonNames.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(leftExpr,\n            this.currentType, Type.f64,\n            false, false,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          instance = this.f64PowInstance;\n          if (!instance) {\n            let namespace = this.program.lookupGlobal(CommonNames.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonNames.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          expr = module.unreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n          if (compound && targetType != this.currentType) {\n            // this yields a proper error if target is i32 for example\n            expr = this.convertExpression(expr, this.currentType, targetType, false, false, expression);\n          }\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"/\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, true, // !\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, true, // !\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"%\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, true, // !\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, true, // !\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonNames.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonNames.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonNames.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonNames.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"<<\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"&\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"&\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"|\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"|\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"^\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"^\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            this.makeIsTrueish(rightExpr, rightType),\n            module.i32(0)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n\n          // references must properly retain and release, with the same outcome independent of the branch taken\n          if (leftType.isManaged) {\n            let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n            let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n            let temp = flow.getTempLocal(leftType);\n            leftExpr = module.local_tee(temp.index, leftExpr);\n\n            // instead of retaining left and releasing it again in right when right\n            // is taken, we can also just retain left if right is not taken\n            let retainLeftInElse = false;\n            if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n              if (!leftAutoreleaseSkipped) {\n                retainLeftInElse = true;\n              } else {\n                rightExpr = this.makeRetain(rightExpr);\n                rightAutoreleaseSkipped = true;\n              }\n            } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n              rightExpr = this.delayAutorelease(rightExpr, rightType, rightFlow, flow);\n            }\n\n            let rightStmts = new Array<ExpressionRef>();\n            if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n              rightStmts.unshift(\n                this.makeRelease(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              );\n            }\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              rightExpr,\n              retainLeftInElse\n                ? this.makeRetain(\n                    module.local_get(temp.index, leftType.toNativeType())\n                  )\n                : module.local_get(temp.index, leftType.toNativeType())\n            );\n            if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n            if (temp) flow.freeTempLocal(temp);\n\n          // basic values can use more aggressive optimizations\n          } else {\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            // simplify if cloning left without side effects is possible\n            if (expr = module.cloneExpression(leftExpr, true, 0)) {\n              expr = module.if(\n                this.makeIsTrueish(leftExpr, this.currentType),\n                rightExpr,\n                expr\n              );\n\n            // if not possible, tee left to a temp\n            } else {\n              let tempLocal = flow.getTempLocal(leftType);\n              if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n              if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n              expr = module.if(\n                this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n                rightExpr,\n                module.local_get(tempLocal.index, leftType.toNativeType())\n              );\n              flow.freeTempLocal(tempLocal);\n            }\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n\n          // references must properly retain and release, with the same outcome independent of the branch taken\n          if (leftType.isManaged) {\n            let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n            let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n            let temp = flow.getTempLocal(leftType);\n            leftExpr = module.local_tee(temp.index, leftExpr);\n\n            // instead of retaining left and releasing it again in right when right\n            // is taken, we can also just retain left if right is not taken\n            let retainLeftInThen = false;\n            if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n              if (!leftAutoreleaseSkipped) {\n                retainLeftInThen = true;\n              } else {\n                rightExpr = this.makeRetain(rightExpr);\n                rightAutoreleaseSkipped = true;\n              }\n            } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n              rightExpr = this.delayAutorelease(rightExpr, rightType, rightFlow, flow);\n            }\n\n            let rightStmts = new Array<ExpressionRef>();\n            if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n              // TODO: usually, false'ish means left is null, but this might not hold\n              // once implicit conversion with strings is performed and left is \"\", so:\n              rightStmts.unshift(\n                this.makeRelease(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              );\n            }\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              retainLeftInThen\n                ? this.makeRetain(\n                    module.local_get(temp.index, leftType.toNativeType())\n                  )\n                : module.local_get(temp.index, leftType.toNativeType()),\n              rightExpr\n            );\n            if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n            if (temp) flow.freeTempLocal(temp);\n\n          // basic values can use more aggressive optimizations\n          } else {\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            // simplify if cloning left without side effects is possible\n            if (expr = module.cloneExpression(leftExpr, true, 0)) {\n              expr = module.if(\n                this.makeIsTrueish(leftExpr, leftType),\n                expr,\n                rightExpr\n              );\n\n            // if not possible, tee left to a temp. local\n            } else {\n              let temp = flow.getTempLocal(leftType);\n              if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n              if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n              expr = module.if(\n                this.makeIsTrueish(module.local_tee(temp.index, leftExpr), leftType),\n                module.local_get(temp.index, leftType.toNativeType()),\n                rightExpr\n              );\n              flow.freeTempLocal(temp);\n            }\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    var targetType = resolver.getTypeOfElement(target);\n    if (!targetType) targetType = Type.void;\n    if (!this.currentType.isStrictlyAssignableTo(targetType)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, this.currentType.toString(), targetType.toString()\n      );\n      return module.unreachable();\n    }\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      this.currentType,\n      right,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  private compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  private compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  private compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.lookupExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let propertyPrototype = <PropertyPrototype>target;\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, propertyPrototype.internalName\n          );\n          return this.module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap<string,Type>(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterPrototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let propertyInstance = <Property>target;\n        let setterInstance = propertyInstance.setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, propertyInstance.internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedSet = classInstance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          let indexedGet = classInstance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, classInstance.internalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, classInstance.internalName\n            );\n          }\n          return this.module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n        targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n        if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        if (!isUnchecked && this.options.pedantic) {\n          this.pedantic(\n            DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n            expression.range\n          );\n        }\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, Constraints.WILL_RETAIN);\n    var valueType = this.currentType;\n    return this.makeAssignment(\n      target,\n      this.convertExpression(valueExpr, valueType, targetType, false, false, valueExpression),\n      valueType,\n      valueExpression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Value expression type. */\n    valueType: Type,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        if (flow.isLocalFlag(local.index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? local.type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(local, valueExpr, valueType, tee);\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? global.type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(global, valueExpr, tee);\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let initializerNode = fieldInstance.initializerNode;\n        if (\n          fieldInstance.is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode !== null\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, fieldInstance.internalName\n          );\n          return module.unreachable();\n        }\n        return this.makeFieldAssignment(fieldInstance,\n          valueExpr,\n          // FIXME: explicit type (currently fails due to missing null checking)\n          this.compileExpression(assert(thisExpression), this.options.usizeType),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let propertyPrototype = <PropertyPrototype>target;\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap<string,Type>(), ReportMode.REPORT);\n        if (!setterInstance) return module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1);\n        let valueType = setterInstance.signature.parameterTypes[0];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert(propertyPrototype.getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap<string,Type>(), ReportMode.REPORT);\n        if (!getterInstance) return module.unreachable();\n        let returnType = getterInstance.signature.returnType;\n        assert(valueType == returnType);\n        let nativeReturnType = returnType.toNativeType();\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let propertyInstance = <Property>target;\n        assert(propertyInstance.parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>propertyInstance.parent;\n        assert(classInstance.kind == ElementKind.CLASS);\n        let setterInstance = propertyInstance.setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1);\n        let valueType = setterInstance.signature.parameterTypes[0];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpression(assert(thisExpression), classInstance.type);\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let temp = flow.getTempLocal(returnType);\n        let ret = module.block(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.local_tee(temp.index, thisExpr),\n            valueExpr\n          ], valueExpression),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.local_get(temp.index, nativeReturnType)\n          ], valueExpression)\n        ], nativeReturnType);\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let indexSignature = <IndexSignature>target;\n        let parent = indexSignature.parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        assert(classInstance.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let getterInstance = classInstance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!getterInstance) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            valueExpression.range, classInstance.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = classInstance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            valueExpression.range, classInstance.internalName\n          );\n          this.currentType = tee ? getterInstance.signature.returnType : Type.void;\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 2);\n        let valueType = setterInstance.signature.parameterTypes[1];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        let thisExpr = this.compileExpression(assert(thisExpression), classInstance.type);\n        let elementExpr = this.compileExpression(assert(indexExpression), Type.i32, Constraints.CONV_IMPLICIT);\n        if (tee) {\n          let tempTarget = flow.getTempLocal(classInstance.type);\n          let tempElement = flow.getTempLocal(this.currentType);\n          let returnType = getterInstance.signature.returnType;\n          flow.freeTempLocal(tempTarget);\n          let ret = module.block(null, [\n            this.makeCallDirect(setterInstance, [\n              module.local_tee(tempTarget.index, thisExpr),\n              module.local_tee(tempElement.index, elementExpr),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(getterInstance, [\n              module.local_get(tempTarget.index, tempTarget.type.toNativeType()),\n              module.local_get(tempElement.index, tempElement.type.toNativeType())\n            ], valueExpression)\n          ], returnType.toNativeType());\n          flow.freeTempLocal(tempElement);\n          flow.freeTempLocal(tempTarget);\n          return ret;\n        } else {\n          return this.makeCallDirect(setterInstance, [\n            thisExpr,\n            elementExpr,\n            valueExpr\n          ], valueExpression);\n        }\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      valueExpression.range\n    );\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** Local to assign to. */\n    local: Local,\n    /** Value to assign. */\n    valueExpr: ExpressionRef,\n    /** Value type. */\n    valueType: Type,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var type = local.type;\n    assert(type != Type.void);\n    var localIndex = local.index;\n\n    if (type.is(TypeFlags.NULLABLE)) {\n      if (!valueType.is(TypeFlags.NULLABLE) || flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.INITIALIZED);\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        valueExpr = this.makeReplace(\n          valueExpr,\n          module.local_get(localIndex, type.toNativeType()),\n          alreadyRetained\n        );\n        if (tee) { // local = REPLACE(local, value)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = REPLACE(local, value))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!alreadyRetained) valueExpr = this.makeRetain(valueExpr);\n        if (tee) { // local = __retain(value, local)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = __retain(value, local))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // local = value\n        this.currentType = type;\n        return module.local_tee(localIndex, valueExpr);\n      } else { // void(local = value)\n        this.currentType = Type.void;\n        return module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global variable to assign to. */\n    global: VariableLikeElement,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      valueExpr = module.global_set(global.internalName,\n        this.makeReplace(\n          valueExpr,\n          module.global_get(global.internalName, nativeType),\n          alreadyRetained\n        )\n      );\n      if (tee) { // (global = REPLACE(global, value))), global\n        this.currentType = type;\n        return module.block(null, [\n          valueExpr,\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = REPLACE(global, value)\n        this.currentType = Type.void;\n        return valueExpr;\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  private makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType, findUsedLocals(valueExpr));\n      // set before and read after valueExpr executes below ^\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      let ret: ExpressionRef;\n      if (tee) { // ((t1 = this).field = REPLACE(t1.field, t2 = value)), t2\n        let tempValue = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeReplace(\n              module.local_tee(tempValue.index, valueExpr),\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED),\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              alreadyRetained\n            ),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(tempValue);\n        this.currentType = fieldType;\n      } else { // (t1 = this).field = REPLACE(t1.field, value)\n        ret = module.store(fieldType.byteSize,\n          module.local_tee(tempThis.index, thisExpr),\n          this.makeReplace(\n            valueExpr,\n            module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED),\n              module.local_get(tempThis.index, nativeThisType),\n              nativeFieldType, field.memoryOffset\n            ),\n            alreadyRetained\n          ),\n          nativeFieldType, field.memoryOffset\n        );\n        this.currentType = Type.void;\n      }\n      flow.freeTempLocal(tempThis);\n      return ret;\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let temp = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n        let ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(temp.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(temp.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(temp);\n        this.currentType = fieldType;\n        return ret;\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  private compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let parent = assert(actualFunction.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n      let baseClassInstance = assert(classInstance.base);\n      let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let theCall = this.compileCallDirect(\n        this.ensureConstructor(baseClassInstance, expression),\n        expression.arguments,\n        expression,\n        module.if(\n          module.local_get(thisLocal.index, nativeSizeType),\n          module.local_get(thisLocal.index, nativeSizeType),\n          this.makeRetain(\n            this.makeAllocation(classInstance)\n          )\n        ),\n        Constraints.WILL_RETAIN\n      );\n      assert(baseClassInstance.type.isUnmanaged || this.skippedAutoreleases.has(theCall)); // guaranteed\n      let stmts: ExpressionRef[] = [\n        module.local_set(thisLocal.index, theCall)\n      ];\n      this.makeFieldInitializationInConstructor(classInstance, stmts);\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.flatten(stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.lookupExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (functionPrototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(functionPrototype, expression, contextualType);\n        }\n\n        let thisExpression = this.resolver.currentThisExpression; // compileCallDirect may reset\n        let functionInstance = this.resolver.maybeInferCall(expression, functionPrototype, flow);\n        if (!functionInstance) return this.module.unreachable();\n        return this.compileCallDirect(\n          functionInstance,\n          expression.arguments,\n          expression,\n          functionInstance.is(CommonFlags.INSTANCE)\n            ? this.compileExpression(assert(thisExpression), this.options.usizeType)\n            : 0,\n          constraints\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        signature = local.type.signatureReference;\n        if (signature) {\n          if (local.is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low(local.constantIntegerValue));\n          } else {\n            indexArg = module.local_get(local.index, NativeType.I32);\n          }\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, local.type.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        signature = global.type.signatureReference;\n        if (signature) {\n          indexArg = module.global_get(global.internalName, global.type.toNativeType());\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, global.type.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let fieldType = fieldInstance.type;\n        signature = fieldType.signatureReference;\n        if (signature) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n          indexArg = module.load(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            fieldInstance.memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, fieldType.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        let functionTarget = <FunctionTarget>target;\n        signature = functionTarget.signature;\n        indexArg = this.compileExpression(expression.expression, functionTarget.type, Constraints.CONV_IMPLICIT);\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let propertyPrototype = <PropertyPrototype>target;\n        let getterPrototype = assert(propertyPrototype.getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.unreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        let type = this.resolver.getTypeOfElement(target);\n        if (type) {\n          this.error(\n            DiagnosticCode.Type_0_has_no_call_signatures,\n            expression.range, type.toString()\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n            expression.range\n          );\n        }\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      assert(signature), // FIXME: asc can't see this yet\n      indexArg,\n      expression.arguments,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n    var ctx = new BuiltinContext();\n    ctx.compiler = this;\n    ctx.prototype = prototype;\n    ctx.typeArguments = typeArguments;\n    ctx.operands = expression.arguments;\n    ctx.contextualType = contextualType;\n    ctx.reportNode = expression;\n    ctx.contextIsExact = false;\n    var internalName = prototype.internalName;\n    if (builtins.has(internalName)) {\n      let fn = assert(builtins.get(internalName));\n      return fn(ctx);\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Checks that an unsafe expression is allowed. */\n  private checkUnsafe(reportNode: Node): void {\n    // Library files may always use unsafe features\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\n      this.error(\n        DiagnosticCode.Operation_is_unsafe,\n        reportNode.range\n      );\n    }\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      let inlineStack = this.inlineStack;\n      if (inlineStack.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        inlineStack.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, instance.signature.returnType, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        inlineStack.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (constraints & Constraints.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (constraints & Constraints.WILL_RETAIN) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (constraints & Constraints.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    if (instance.is(CommonFlags.VIRTUAL)) {\n      this.virtualCalls.add(instance);\n    }\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonNames.this_, thisType, usedLocals);\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let base = classInstance.base;\n      if (base) flow.addScopedAlias(CommonNames.super_, base.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n      );\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr);\n      }\n      body.push(\n        module.local_set(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.is(FlowFlags.TERMINATES)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var thisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(this.program, originalParameterTypes, returnType, thisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    var flow = trampoline.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString();\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString() + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinNames.argumentsLength, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinNames.argumentsLength, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            Constraints.CONV_IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      trampolineSignature.nativeParams,\n      trampolineSignature.nativeResults,\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.flatten(stmts, returnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the arguments length helper global is present. */\n  ensureBuiltinArgumentsLength(): void {\n    if (!this.builtinArgumentsLength) {\n      let module = this.module;\n      this.builtinArgumentsLength = module.addGlobal(BuiltinNames.argumentsLength, NativeType.I32, true, module.i32(0));\n      // TODO: Enable this once mutable globals are the default nearly everywhere.\n      // if (this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n      //   module.addGlobalExport(BuiltinNames.argumentsLength, ExportNames.argumentsLength);\n      // } else {\n        module.addFunction(BuiltinNames.setArgumentsLength, NativeType.I32, NativeType.None, null,\n          module.global_set(BuiltinNames.argumentsLength, module.local_get(0, NativeType.I32))\n        );\n        module.addFunctionExport(BuiltinNames.setArgumentsLength, ExportNames.setArgumentsLength);\n      // }\n    }\n  }\n\n  // <reference-counting>\n\n  /** Makes a retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes a replace, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeReplace(\n    /** New value being assigned. */\n    newExpr: ExpressionRef,\n    /** Old value being replaced. */\n    oldExpr: ExpressionRef,\n    /** Whether the new value is already retained. */\n    alreadyRetained: bool = false,\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var nativeSizeType = this.options.nativeSizeType;\n    if (alreadyRetained) {\n      // (t1=newExpr), __release(oldExpr), t1\n      // it is important that `newExpr` evaluates before `oldExpr` is released, hence the local\n      let temp = flow.getTempLocal(this.options.usizeType, findUsedLocals(oldExpr));\n      let ret = module.block(null, [\n        module.local_set(temp.index, newExpr),\n        this.makeRelease(oldExpr),\n        module.local_get(temp.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else {\n      // if ((t1=newExpr) != (t2=oldExpr)) {\n      //   t1 = __retain(t1);\n      //   __release(t2);\n      // }, t1\n      let usizeType = this.options.usizeType;\n      let temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n      let temp2 = flow.getTempLocal(usizeType);\n      let ret = module.block(null, [\n        module.if(\n          module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            module.local_tee(temp1.index, newExpr),\n            module.local_tee(temp2.index, oldExpr)\n          ),\n          module.block(null, [\n            module.local_set(temp1.index,\n              this.makeRetain(module.local_get(temp1.index, nativeSizeType))\n            ),\n            this.makeRelease(module.local_get(temp2.index, nativeSizeType))\n          ])\n        ),\n        module.local_get(temp1.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n\n  /** Makes an autorelease call at the end of the specified `flow`. */\n  makeAutorelease(\n    /** Expression to autorelease. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Flow that should autorelease. Defaults to the current flow. */\n    flow: Flow = this.currentFlow\n  ): ExpressionRef {\n    // An 'autorelease' is the assignment of a managed reference to a temporary local,\n    // keeping the reference alive until the surrounding flow concludes. This is useful\n    // if a reference is not being immediately assigned to something that would keep it\n    // alive, like a local or a global, yet it'll remain alive in other code. Example:\n    //\n    //   callReceivingAReference(callReturningAReference())\n    //\n    // will be transformed into an autorelease like\n    //\n    //   callReceivingAReference(t = callReturningAReference())\n    //   ...\n    //   __release(t)\n    //\n    // since releasing immediately would free the value before the call:\n    //\n    //   callReceivingAReference((__release(t = callReturningAReference()), t))\n    //\n    var local = flow.getAutoreleaseLocal(type);\n    if (flow.isNonnull(expr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n    return this.module.local_tee(local.index, expr);\n  }\n\n  /**\n   * Attempts to undo an autorelease in the specified `flow`.\n   * Returns the index of the previously retaining variable or -1 if not possible.\n   */\n  tryUndoAutorelease(\n    /** Expression being autoreleased. */\n    expr: ExpressionRef,\n    /** Flow that would autorelease. */\n    flow: Flow\n  ): i32 {\n    // The following assumes that the expression actually belongs to the flow and that\n    // top-level autoreleases are never undone. While that's true, it's not necessary\n    // to check presence in scopedLocals.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalGet: { // local.get(idx)\n        let index = getLocalGetIndex(expr);\n        if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n          return index;\n        }\n        break;\n      }\n      case ExpressionId.LocalSet: { // local.tee(idx, expr)\n        if (isLocalTee(expr)) {\n          // NOTE: Can't remove the local.tee completely because it's already compiled\n          // and a child of something else. Preventing the final release however makes\n          // it optimize away.\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.get|tee(...) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.tryUndoAutorelease(getBlockChild(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /** Delays an autorelease in `innerFlow` until `outerFlow` concludes. */\n  delayAutorelease(\n    /** Expression being autoreleased in `innerFlow`. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Inner flow that would autorelease. Must not have processed autoreleases yet. */\n    innerFlow: Flow,\n    /** Outer flow that should autorelease instead. */\n    outerFlow: Flow\n  ): ExpressionRef {\n    // Attempt to undo the autorelease in `innerFlow`\n    var index = this.tryUndoAutorelease(expr, innerFlow);\n    return ~index\n      // If it worked, autorelease in `outerFlow` instead\n      ? this.makeAutorelease(expr, type, outerFlow)\n      // If it didn't work, extend the lifetime into `outerFlow`\n      : this.makeAutorelease(this.makeRetain(expr), type, outerFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[],\n    /**\n     * Whether to finalize affected locals. Defaults to `true`, which\n     * is almost always correct, except when bubbling up parent flows\n     * in break-like scenarios.\n     */\n    finalize: bool = true\n  ): void {\n    // Autoreleases must be performed whenever a flow concludes, decrementing\n    // the RC of all the references in that flow scheduled for an autorelease.\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (finalize) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType())\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the given value. */\n  performAutoreleasesWithValue(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Value to return. */\n    valueExpr: ExpressionRef,\n    /** Type of the returned value. */\n    valueType: Type,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[] | null = null,\n    /** Whether to finalize affected locals. */\n    finalize: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, finalize);\n    var module = this.module;\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      let ret = module.flatten(stmts, nativeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return module.flatten(stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[]\n  ): void {\n    // Differs from `performAutoreleases` in that concluding this flow also\n    // concludes all its parent flows, for example on a `return`.\n    if (flow.isInline) {\n      // Traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead of all the locals.\n      let current = flow;\n      let parent: Flow | null;\n      while (parent = current.parent) current = parent;\n      let scopedLocals = current.scopedLocals;\n      if (scopedLocals) {\n        // TODO: for (let local of scopedLocals.values()) {\n        for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n          let local = unchecked(_values[i]);\n          this.maybeFinishAutorelease(local, flow, stmts);\n        }\n      }\n    } else {\n      let localsByIndex = flow.parentFunction.localsByIndex;\n      for (let i = 0, k = localsByIndex.length; i < k; ++i) {\n        let local = unchecked(localsByIndex[i]);\n        this.maybeFinishAutorelease(local, flow, stmts);\n      }\n    }\n  }\n\n  /** Finishes a single autorelease of the specified local. */\n  private maybeFinishAutorelease(\n    /** Local to finish autoreleasing. */\n    local: Local,\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[]\n  ): void {\n    var localIndex = local.index;\n    var module = this.module;\n    if (~localIndex && flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n      flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n      stmts.push(\n        this.makeRelease(\n          module.local_get(localIndex, local.type.toNativeType())\n        )\n      );\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.is(CommonFlags.VIRTUAL)) {\n      this.virtualCalls.add(instance);\n    }\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      let inlineStack = this.inlineStack;\n      if (inlineStack.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        inlineStack.push(instance);\n        let expr: ExpressionRef;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          let theOperands = assert(operands);\n          assert(theOperands.length);\n          expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n        } else {\n          expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n        }\n        let returnType = this.currentType;\n        if (returnType.isManaged) {\n          if (!skipAutorelease) {\n            expr = this.makeAutorelease(expr, returnType);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        inlineStack.pop();\n        return expr;\n      }\n    }\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (initializer.compilesToConst) {\n            operands.push(this.compileExpression(\n              initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.lookupExpression(initializer, instance.flow, parameterTypes[i], ReportMode.SWALLOW);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(this.makeZero(parameterTypes[i]));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr, returnType);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          this.ensureBuiltinArgumentsLength();\n          return module.block(null, [\n            module.global_set(BuiltinNames.argumentsLength, module.i32(numArguments)),\n            expr\n          ], this.currentType.toNativeType());\n        }\n      }\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr, returnType);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(this.makeZero(parameterTypes[i]));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.ensureBuiltinArgumentsLength();\n    var expr = module.block(null, [\n      module.global_set(BuiltinNames.argumentsLength, // might be calling a trampoline\n        module.i32(numArguments)\n      ),\n      module.call_indirect(\n        this.options.isWasm64\n          ? module.unary(UnaryOp.WrapI64, indexArg)\n          : indexArg,\n        operands,\n        signature.nativeParams,\n        signature.nativeResults\n      )\n    ], returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr, returnType);\n      }\n    }\n    return expr;\n  }\n\n  private compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.flatten(exprs, this.currentType.toNativeType());\n  }\n\n  private compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var targetExpression = expression.expression;\n    var targetType = this.resolver.resolveExpression(targetExpression, this.currentFlow); // reports\n    if (targetType) {\n      if (targetType.is(TypeFlags.REFERENCE)) {\n        let classReference = targetType.classReference;\n        if (classReference) {\n          let isUnchecked = this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = classReference.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (indexedGet) {\n            let thisArg = this.compileExpression(targetExpression, classReference.type,\n              Constraints.CONV_IMPLICIT\n            );\n            if (!isUnchecked && this.options.pedantic) {\n              this.pedantic(\n                DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n                expression.range\n              );\n            }\n            return this.compileCallDirect(indexedGet, [\n              expression.elementExpression\n            ], expression, thisArg, constraints);\n          }\n        }\n      }\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        expression.expression.range, targetType.toString()\n      );\n    }\n    return module.unreachable();\n  }\n\n  private compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.resolver.resolveFunction(prototype, null, contextualTypeArguments);\n      if (!instance) return this.module.unreachable();\n      this.compileFunction(instance);\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.unreachable()\n      : this.module.i32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = assert(filesByName.get(internalPath));\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  private compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (contextualType.is(TypeFlags.REFERENCE)) {\n          let classReference = contextualType.classReference;\n          if (classReference) {\n            this.currentType = classReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          let signatureReference = contextualType.signatureReference;\n          if (signatureReference) {\n            this.currentType = signatureReference.type.asNullable();\n            return module.i32(0);\n          }\n          return module.ref_null();\n        }\n        this.currentType = options.usizeType;\n        this.warning(\n          DiagnosticCode.Expression_resolves_to_unusual_type_0,\n          expression.range, this.currentType.toString()\n        );\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n          let parent = assert(actualFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let classInstance = <Class>parent;\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.if(\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.local_get(thisLocal.index, nativeSizeType)\n                  ),\n                  module.local_set(thisLocal.index,\n                    this.makeRetain(\n                      this.makeAllocation(classInstance)\n                    )\n                  )\n                )\n              ];\n              this.makeFieldInitializationInConstructor(classInstance, stmts);\n              stmts.push(\n                module.local_get(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.flatten(stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.local_get(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.isInline) {\n          let scopedThis = flow.lookupLocal(CommonNames.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(actualFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let classInstance = <Class>parent;\n          let baseClassInstance = classInstance.base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var currentParent = this.currentParent;\n    if (!currentParent) currentParent = actualFunction;\n    var target = this.resolver.lookupIdentifierExpression( // reports\n      expression,\n      flow,\n      currentParent\n    );\n    if (!target) {\n      // make a guess to avoid assertions in calling code\n      if (this.currentType == Type.void) this.currentType = Type.i32;\n      return module.unreachable();\n    }\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        let localType = local.type;\n        assert(localType != Type.void);\n        if (local.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(local, contextualType, constraints);\n        }\n        let localIndex = local.index;\n        assert(localIndex >= 0);\n        if (localType.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          localType = localType.nonNullableType;\n        }\n        this.currentType = localType;\n\n        if (target.parent != flow.parentFunction) {\n          // TODO: closures\n          this.error(\n            DiagnosticCode.Not_implemented,\n            expression.range\n          );\n          return module.unreachable();\n        }\n        return module.local_get(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) { // reports; not yet compiled if a static field\n          return module.unreachable();\n        }\n        let globalType = global.type;\n        assert(globalType != Type.void);\n        if (global.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(global, contextualType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get(global.internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        let enumValue = <EnumValue>target;\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if (enumValue.is(CommonFlags.INLINED)) {\n          assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n          return module.i32(i64_low(enumValue.constantIntegerValue));\n        }\n        return module.global_get(enumValue.internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        let functionInstance = this.resolver.resolveFunction(\n          functionPrototype,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!functionInstance || !this.compileFunction(functionInstance)) return module.unreachable();\n        if (contextualType.is(TypeFlags.HOST | TypeFlags.REFERENCE)) {\n          this.currentType = Type.anyref;\n          return module.ref_func(functionInstance.internalName);\n        }\n        let index = this.ensureFunctionTableEntry(functionInstance);\n        this.currentType = functionInstance.signature.type;\n        return module.i32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  private compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n    var isType = expression.isType;\n\n    // Mimic `instanceof CLASS`\n    if (isType.kind == NodeKind.NAMEDTYPE) {\n      let namedType = <NamedTypeNode>isType;\n      if (!(namedType.isNullable || namedType.hasTypeArguments)) {\n        let element = this.resolver.resolveTypeName(namedType.name, flow.actualFunction, ReportMode.SWALLOW);\n        if (element !== null && element.kind == ElementKind.CLASS_PROTOTYPE) {\n          let prototype = <ClassPrototype>element;\n          if (prototype.is(CommonFlags.GENERIC)) {\n            return this.makeInstanceofClass(expression, prototype);\n          }\n        }\n      }\n    }\n\n    // Fall back to `instanceof TYPE`\n    var expectedType = this.resolver.resolveType(\n      expression.isType,\n      flow.actualFunction,\n      makeMap(flow.contextualTypeArguments)\n    );\n    if (!expectedType) {\n      this.currentType = Type.bool;\n      return this.module.unreachable();\n    }\n    return this.makeInstanceofType(expression, expectedType);\n  }\n\n  private makeInstanceofType(expression: InstanceOfExpression, expectedType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var expr = this.compileExpression(expression.expression, expectedType);\n    var actualType = this.currentType;\n    this.currentType = Type.bool;\n\n    // instanceof <basic> - must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(actualType == expectedType ? 1 : 0)\n      ], NativeType.I32);\n    }\n\n    // <basic> instanceof <reference> - always false\n    if (!actualType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(0)\n      ], NativeType.I32);\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          this.makeZero(actualType)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          if (this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Expression_compiles_to_a_dynamic_check_at_runtime,\n              expression.range\n            );\n          }\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.block(null, [\n          this.convertExpression(expr, actualType, Type.void, false, false, expression.expression),\n          module.i32(1)\n        ], NativeType.I32);\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n    }\n\n    // false\n    return module.block(null, [\n      module.drop(expr),\n      module.i32(0)\n    ], NativeType.I32);\n  }\n\n  private makeInstanceofClass(expression: InstanceOfExpression, prototype: ClassPrototype): ExpressionRef {\n    var module = this.module;\n    var expr = this.compileExpression(expression.expression, Type.auto);\n    var actualType = this.currentType;\n    var nativeSizeType = actualType.toNativeType();\n\n    this.currentType = Type.bool;\n\n    // exclusively interested in class references here\n    var classReference = actualType.classReference;\n    if (actualType.is(TypeFlags.REFERENCE) && classReference !== null) {\n\n      // static check\n      if (classReference.extends(prototype)) {\n\n        // <nullable> instanceof <PROTOTYPE> - LHS must be != 0\n        if (actualType.is(TypeFlags.NULLABLE)) {\n          return module.binary(\n            nativeSizeType == NativeType.I64\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            this.makeZero(actualType)\n          );\n\n        // <nonNullable> is just `true`\n        } else {\n          return module.block(null, [\n            module.drop(expr),\n            module.i32(1)\n          ], NativeType.I32);\n        }\n\n      // dynamic check against all possible concrete ids\n      } else if (prototype.extends(classReference.prototype)) {\n        this.pendingClassInstanceOf.add(prototype);\n        return module.call(prototype.internalName + \"~instanceof\", [ expr ], NativeType.I32);\n      }\n    }\n\n    // false\n    return module.block(null, [\n      module.drop(expr),\n      module.i32(0)\n    ], NativeType.I32);\n  }\n\n  private compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        return this.compileArrayLiteral(\n          <ArrayLiteralExpression>expression,\n          contextualType,\n          constraints\n        );\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression, constraints);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.unreachable();\n  }\n\n  private compileStringLiteral(\n    expression: StringLiteralExpression,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expr = this.ensureStaticString(expression.value);\n    if (constraints & Constraints.WILL_RETAIN) {\n      this.skippedAutoreleases.add(expr);\n    } else {\n      // not necessary since this is static data anyway\n      // expr = this.makeAutorelease(expr, this.currentType);\n    }\n    return expr;\n  }\n\n  private compileArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // handle static arrays\n    if (contextualType.is(TypeFlags.REFERENCE)) {\n      let classReference = contextualType.classReference;\n      if (classReference !== null && classReference.extends(program.staticArrayPrototype)) {\n        return this.compileStaticArrayLiteral(expression, contextualType, constraints);\n      }\n    }\n\n    // handle normal arrays\n    var element = this.resolver.lookupExpression(expression, flow, this.currentType);\n    if (!element) return module.unreachable();\n    assert(element.kind == ElementKind.CLASS);\n    var arrayInstance = <Class>element;\n    var arrayType = arrayInstance.type;\n    var elementType = arrayInstance.getTypeArgumentsTo(program.arrayPrototype)![0];\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = true;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr = expression\n        ? module.precomputeExpression(\n            this.compileExpression(<Expression>expression, elementType,\n              Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n            )\n          )\n        : this.makeZero(elementType);\n      if (getExpressionId(expr) == ExpressionId.Const) {\n        assert(getExpressionType(expr) == nativeElementType);\n      } else {\n        isStatic = false;\n      }\n      values[i] = expr;\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.addStaticBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.addStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // __allocArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], expression);\n        this.currentType = arrayType;\n        expr = this.makeRetain(expr);\n        if (arrayType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, arrayType);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __allocArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeRetain(\n          this.makeCallDirect(program.allocArrayInstance, [\n            module.i32(length),\n            program.options.isWasm64\n              ? module.i64(elementType.alignLog2)\n              : module.i32(elementType.alignLog2),\n            module.i32(arrayInstance.id),\n            program.options.isWasm64\n              ? module.i64(0)\n              : module.i32(0)\n          ], expression)\n        )\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStartMember = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStartMember.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStartMember).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        if (!this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeRetain(valueExpr);\n        }\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    var expr = module.flatten(stmts, nativeArrayType);\n    if (arrayType.isManaged) {\n      if (constraints & Constraints.WILL_RETAIN) {\n        this.skippedAutoreleases.add(expr);\n      } else {\n        expr = this.makeAutorelease(expr, arrayType, this.currentFlow);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles a special `fixed` array literal. */\n  private compileStaticArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // make sure this method is only called with a valid contextualType\n    assert(contextualType.is(TypeFlags.REFERENCE));\n    var arrayInstance = assert(contextualType.classReference);\n    var arrayType = arrayInstance.type;\n    var elementType = arrayInstance.getTypeArgumentsTo(program.staticArrayPrototype)![0];\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n\n    // compile value expressions and check if all are compile-time constants\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var nativeElementType = elementType.toNativeType();\n    var isStatic = true;\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr: ExpressionRef;\n      if (expression) {\n        expr = module.precomputeExpression(\n          this.compileExpression(expression, elementType,\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          )\n        );\n        if (getExpressionId(expr) == ExpressionId.Const) {\n          assert(getExpressionType(expr) == nativeElementType);\n        } else {\n          isStatic = false;\n        }\n      } else {\n        expr = this.makeZero(elementType);\n      }\n      values[i] = expr;\n    }\n\n    var isWasm64 = this.options.isWasm64;\n    var bufferSize = values.length << elementType.alignLog2;\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n\n      let bufferSegment = this.addStaticBuffer(elementType, values, arrayInstance.id);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(program.runtimeHeaderSize));\n\n      // return the static buffer directly if assigned to a global\n      if (constraints & Constraints.PREFER_STATIC) {\n        let expr = this.options.isWasm64\n          ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n          : module.i32(i64_low(bufferAddress));\n        if (constraints & Constraints.WILL_RETAIN) {\n          this.skippedAutoreleases.add(expr);\n        } else {\n          // not necessary since this is static data anyway\n          // expr = this.makeAutorelease(expr, arrayType, flow);\n        }\n        this.currentType = arrayType;\n        return expr;\n\n      // otherwise allocate a new chunk of memory and return a copy of the buffer\n      } else {\n        // __allocBuffer(bufferSize, id, buffer)\n        let expr = this.makeRetain(\n          this.makeCallDirect(program.allocBufferInstance, [\n            isWasm64\n              ? module.i64(bufferSize)\n              : module.i32(bufferSize),\n            module.i32(arrayInstance.id),\n            isWasm64\n              ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n              : module.i32(i64_low(bufferAddress))\n          ], expression)\n        );\n        if (arrayType.isManaged) {\n          if (constraints & Constraints.WILL_RETAIN) {\n            this.skippedAutoreleases.add(expr);\n          } else {\n            expr = this.makeAutorelease(expr, arrayType);\n          }\n        }\n        this.currentType = arrayType;\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __allocBuffer(bufferSize, classId)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeRetain(\n          this.makeCallDirect(program.allocBufferInstance, [\n            isWasm64\n              ? module.i64(bufferSize)\n              : module.i32(bufferSize),\n            module.i32(arrayInstance.id)\n          ], expression)\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        if (!this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeRetain(valueExpr);\n        }\n      }\n      // store<T>(tempThis, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempThis.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    this.currentType = arrayType;\n    var expr = module.flatten(stmts, nativeArrayType);\n    if (arrayType.isManaged) {\n      if (constraints & Constraints.WILL_RETAIN) {\n        this.skippedAutoreleases.add(expr);\n      } else {\n        expr = this.makeAutorelease(expr, arrayType, this.currentFlow);\n      }\n    }\n    return expr;\n  }\n\n  private compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = flow.getAutoreleaseLocal(classReference.type);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let fieldInstance = <Field>member;\n      let fieldType = fieldInstance.type;\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\n        fieldType.byteSize,\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], fieldInstance.type, Constraints.CONV_IMPLICIT),\n        fieldType.toNativeType(),\n        fieldInstance.memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.local_set(\n      tempLocal.index,\n      this.makeRetain(\n        this.makeAllocation(classReference)\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\n\n    this.currentType = classReference.type;\n    return module.flatten(exprs, this.options.nativeSizeType);\n  }\n\n  private compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveTypeName(expression.typeName, flow.actualFunction);\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    return this.compileInstantiate(classInstance, expression.arguments, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    var contextualTypeArguments = makeMap(classInstance.contextualTypeArguments);\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonNames.constructor,\n        new FunctionPrototype(\n          CommonNames.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        contextualTypeArguments\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonNames.constructor,\n        new FunctionPrototype(\n          CommonNames.constructor,\n          classInstance, // bound\n          this.program.makeNativeFunctionDeclaration(CommonNames.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(this.program, null, classInstance.type, classInstance.type),\n        contextualTypeArguments\n      );\n      let members = classInstance.members;\n      if (!members) classInstance.members = members = new Map();\n      members.set(\"constructor\", instance.prototype);\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    var flow = instance.flow;\n    this.currentFlow = flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    var allocExpr = this.makeAllocation(classInstance);\n    if (classInstance.type.isManaged) allocExpr = this.makeRetain(allocExpr);\n    stmts.push(\n      module.if(\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.local_get(0, nativeSizeType)\n        ),\n        module.local_set(0, allocExpr)\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.local_get(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\n      }\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\n      stmts.push(\n        module.local_set(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\n        )\n      );\n    }\n    this.makeFieldInitializationInConstructor(classInstance, stmts);\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    // make the function\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, signature.nativeParams, signature.nativeResults, varTypes, body);\n    instance.finalize(module, funcRef);\n    return instance;\n  }\n\n  compileInstantiate(\n    /** Class to instantiate. */\n    classInstance: Class,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.makeZero(this.options.usizeType),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  private compilePropertyAccessExpression(\n    expression: PropertyAccessExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(expression);\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression, flow, ctxType); // reports\n    if (!target) return module.unreachable();\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) return module.unreachable(); // reports\n        let globalType = global.type;\n        assert(globalType != Type.void);\n        if (global.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(global, ctxType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get(global.internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let enumValue = <EnumValue>target;\n        let parent = assert(enumValue.parent);\n        assert(parent.kind == ElementKind.ENUM);\n        let parentEnum = <Enum>parent;\n        if (!this.compileEnum(parentEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if (enumValue.is(CommonFlags.INLINED)) {\n          assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n          return this.compileInlineConstant(enumValue, ctxType, constraints);\n        }\n        assert(enumValue.type == Type.i32);\n        return module.global_get(enumValue.internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        let fieldInstance = <Field>target;\n        let fieldType = fieldInstance.type;\n        assert(fieldInstance.memoryOffset >= 0);\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n        let thisType = this.currentType;\n        if (thisType.is(TypeFlags.NULLABLE)) {\n          if (!flow.isNonnull(thisExpr, thisType)) {\n            this.error(\n              DiagnosticCode.Object_is_possibly_null,\n              thisExpression.range\n            );\n          }\n        }\n        this.currentType = fieldType;\n        return module.load(\n          fieldType.byteSize,\n          fieldType.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          fieldType.toNativeType(),\n          fieldInstance.memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let propertyPrototype = <PropertyPrototype>target;\n        let getterPrototype = propertyPrototype.getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], expression, 0);\n        }\n        return module.unreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance);\n        return this.compileCallDirect(getterInstance, [], expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        if (functionPrototype.is(CommonFlags.STATIC)) {\n          let functionInstance = this.resolver.resolveFunction(functionPrototype, null);\n          if (!functionInstance) return module.unreachable();\n          if (!this.compileFunction(functionInstance)) return module.unreachable();\n          this.currentType = functionInstance.type;\n          return module.i32(this.ensureFunctionTableEntry(functionInstance));\n        }\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          expression.range, functionPrototype.name\n        );\n        return module.unreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return module.unreachable();\n  }\n\n  private compileTernaryExpression(\n    expression: TernaryExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n\n    var condExpr = this.module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(expression.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    // FIXME: skips common denominator, inconsistently picking branch type\n    var condKind = evaluateConditionKind(condExpr);\n    if (condKind == ConditionKind.TRUE) return this.compileExpression(ifThen, ctxType);\n    if (condKind == ConditionKind.FALSE) return this.compileExpression(ifElse, ctxType);\n\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\n\n    var outerFlow = this.currentFlow;\n    var ifThenFlow = outerFlow.fork();\n    ifThenFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, ctxType, inheritedConstraints);\n    var ifThenType = this.currentType;\n    var ifThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    ifElseFlow.inheritNonnullIfFalse(condExpr);\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, ctxType == Type.auto ? ifThenType : ctxType, inheritedConstraints);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = ctxType;\n      return this.module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType, commonType,\n      false, false,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType, commonType,\n      false, false,\n      ifElse\n    );\n    this.currentType = commonType;\n\n    if (ifThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!ifThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr);\n        ifThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!ifThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      if (constraints & Constraints.WILL_RETAIN) { // try to undo both\n        let ifThenIndex = this.tryUndoAutorelease(ifThenExpr, ifThenFlow);\n        if (ifThenIndex == -1) ifThenExpr = this.makeRetain(ifThenExpr);\n        let ifElseIndex = this.tryUndoAutorelease(ifElseExpr, ifElseFlow);\n        if (ifElseIndex == -1) ifElseExpr = this.makeRetain(ifElseExpr);\n        ifThenAutoreleaseSkipped = true;\n        ifElseAutoreleaseSkipped = true;\n      } else {\n        ifThenExpr = this.delayAutorelease(ifThenExpr, ifThenType, ifThenFlow, outerFlow);\n        ifElseExpr = this.delayAutorelease(ifElseExpr, ifElseType, ifElseFlow, outerFlow);\n      }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(ifThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (ifThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  private compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value,\n    // except if a static overload is found, which reverses the use of a temp. (see below)\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (isInstance) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, flow); // reports\n    if (!target) {\n      if (tempLocal) flow.freeTempLocal(tempLocal);\n      return module.unreachable();\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      return this.makeAssignment(\n        target,\n        expr,\n        this.currentType,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  private compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        let operand = expression.operand;\n        if (operand.isNumericLiteral) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.makeZero(this.currentType),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = module.unary(UnaryOp.EqzI32, this.makeIsTrueish(expr, this.currentType));\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"~\", this.currentType.toString()\n          );\n          return module.unreachable();\n        } else {\n          expr = this.convertExpression(expr,\n            this.currentType, this.currentType.intType,\n            false, false,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.makeNegOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"~\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        return this.compileTypeof(expression, contextualType, constraints);\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  private compileTypeof(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var operand = expression.operand;\n    var expr: ExpressionRef = 0;\n    var stringInstance = this.program.stringInstance;\n    var typeString: string;\n    if (operand.kind == NodeKind.NULL) {\n      typeString = \"object\"; // special since `null` without type context is usize\n    } else {\n      let element = this.resolver.lookupExpression(operand, this.currentFlow, Type.auto, ReportMode.SWALLOW);\n      if (!element) {\n        switch (operand.kind) {\n          case NodeKind.PROPERTYACCESS:\n          case NodeKind.ELEMENTACCESS: {\n            operand = operand.kind == NodeKind.PROPERTYACCESS\n              ? (<PropertyAccessExpression>operand).expression\n              : (<ElementAccessExpression>operand).expression;\n            let targetType = this.resolver.resolveExpression(operand, this.currentFlow, Type.auto, ReportMode.REPORT);\n            if (!targetType) {\n              this.currentType = stringInstance.type;\n              return this.module.unreachable();\n            }\n            expr = this.compileExpression(operand, Type.auto); // might have side-effects\n            break;\n          }\n          case NodeKind.IDENTIFIER: break; // ignore error\n          default: expr = this.compileExpression(operand, Type.auto); // trigger error\n        }\n        typeString = \"undefined\";\n      } else {\n        switch (element.kind) {\n          case ElementKind.CLASS_PROTOTYPE:\n          case ElementKind.NAMESPACE:\n          case ElementKind.ENUM: {\n            typeString = \"object\";\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            typeString = \"function\";\n            break;\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto);\n            let type = this.currentType;\n            expr = this.convertExpression(expr, type, Type.void, true, false, operand);\n            if (type.is(TypeFlags.REFERENCE)) {\n              let signatureReference = type.signatureReference;\n              if (signatureReference) {\n                typeString = \"function\";\n              } else {\n                let classReference = type.classReference;\n                if (classReference) {\n                  if (classReference.prototype === stringInstance.prototype) {\n                    typeString = \"string\";\n                  } else {\n                    typeString = \"object\";\n                  }\n                } else {\n                  typeString = \"anyref\"; // TODO?\n                }\n              }\n            } else if (type == Type.bool) {\n              typeString = \"boolean\";\n            } else if (type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER)) {\n              typeString = \"number\";\n            } else {\n              typeString = \"undefined\"; // failed to compile?\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.currentType = stringInstance.type;\n    return expr\n      ? this.module.block(null, [ expr, this.ensureStaticString(typeString) ], this.options.nativeSizeType)\n      : this.ensureStaticString(typeString);\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Makes a constant zero of the specified type. */\n  makeZero(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n      case TypeKind.ANYREF: return module.ref_null();\n    }\n  }\n\n  /** Makes a constant one of the specified type. */\n  makeOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Makes a constant negative one of the specified type. */\n  makeNegOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (type.isManaged && this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr, type);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF32, module.local_tee(temp.index, expr), module.f32(0)),\n          module.binary(BinaryOp.EqF32,\n            module.local_get(temp.index, NativeType.F32),\n            module.local_get(temp.index, NativeType.F32)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF64, module.local_tee(temp.index, expr), module.f64(0)),\n          module.binary(BinaryOp.EqF64,\n            module.local_get(temp.index, NativeType.F64),\n            module.local_get(temp.index, NativeType.F64)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.ANYREF: {\n        // TODO: non-null object might still be considered falseish\n        // i.e. a ref to Boolean(false), Number(0), String(\"\") etc.\n        return module.unary(UnaryOp.EqzI32, module.ref_is_null(expr));\n      }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    var allocInstance = program.allocInstance;\n    this.compileFunction(allocInstance);\n    return module.call(allocInstance.internalName, [\n      options.isWasm64\n        ? module.i64(classInstance.nextMemoryOffset)\n        : module.i32(classInstance.nextMemoryOffset),\n      module.i32(\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\n          ? 0\n          : classInstance.id\n      )\n    ], options.nativeSizeType);\n  }\n\n  /** Makes the initializers for a class's fields within the constructor. */\n  makeFieldInitializationInConstructor(\n    /** Class being initialized. */\n    classInstance: Class,\n    /** Statements to append to also being returned. Created if omitted. */\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return stmts;\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.isInline;\n    var thisLocalIndex = isInline\n      ? flow.lookupLocal(CommonNames.this_)!.index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    // TODO: for (let member of members.values()) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = unchecked(_values[i]);\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member;\n      assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let fieldPrototype = field.prototype;\n      let initializerNode = fieldPrototype.initializerNode;\n      let parameterIndex = fieldPrototype.parameterIndex;\n      let initExpr: ExpressionRef;\n\n      // if declared as a constructor parameter, use its value\n      if (parameterIndex >= 0) {\n        initExpr = module.local_get(\n          isInline\n            ? flow.lookupLocal(field.name)!.index\n            : 1 + parameterIndex, // this is local 0\n          nativeFieldType\n        );\n        if (fieldType.isManaged) initExpr = this.makeRetain(initExpr);\n\n      // fall back to use initializer if present\n      } else if (initializerNode) {\n        initExpr = this.compileExpression(initializerNode, fieldType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr);\n        }\n\n      // otherwise initialize with zero\n      } else {\n        initExpr = this.makeZero(fieldType);\n      }\n\n      stmts.push(\n        module.store(fieldType.byteSize,\n          module.local_get(thisLocalIndex, nativeSizeType),\n          initExpr,\n          nativeFieldType,\n          field.memoryOffset\n        )\n      );\n    }\n    return stmts;\n  }\n\n  /** Makes a call to `abort`, if present, otherwise creates a trap. */\n  makeAbort(\n    /** Message argument of type string, if any. */\n    message: Expression | null,\n    /** Code location to report when aborting. */\n    codeLocation: Node\n  ): ExpressionRef {\n    var program = this.program;\n    var module = this.module;\n    var stringInstance = program.stringInstance;\n    var abortInstance = program.abortInstance;\n    if (!abortInstance || !this.compileFunction(abortInstance)) return module.unreachable();\n\n    var messageArg: ExpressionRef;\n    if (message !== null) {\n      // The message argument works much like an arm of an IF that does not become executed if the\n      // assertion succeeds respectively is only being computed if the program actually crashes.\n      // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n      // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n      messageArg = this.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n    } else {\n      messageArg = this.makeZero(stringInstance.type);\n    }\n\n    var filenameArg = this.ensureStaticString(codeLocation.range.source.normalizedPath);\n    return module.block(null, [\n      module.call(\n        abortInstance.internalName, [\n          messageArg,\n          filenameArg,\n          module.i32(codeLocation.range.line),\n          module.i32(codeLocation.range.column)\n        ],\n        NativeType.None\n      ),\n      module.unreachable()\n    ]);\n  }\n\n  /** Makes a runtime non-null check, e.g. on `<Type>possiblyNull` or `possiblyNull!`. */\n  makeRuntimeNonNullCheck(\n    /** Expression being checked. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(type.is(TypeFlags.NULLABLE | TypeFlags.REFERENCE));\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    if (!flow.canOverflow(expr, type)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n    flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n    expr = module.if(\n      module.local_tee(temp.index, expr),\n      module.local_get(temp.index, type.toNativeType()),\n      this.makeAbort(null, reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    return expr;\n  }\n\n  /** Makes a runtime upcast check, e.g. on `<Child>parent`. */\n  makeRuntimeUpcastCheck(\n    /** Expression being upcast. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Type casting to. */\n    toType: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(toType.is(TypeFlags.REFERENCE) && toType.nonNullableType.isAssignableTo(type));\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    var instanceofInstance = this.program.instanceofInstance;\n    assert(this.compileFunction(instanceofInstance));\n    expr = module.if(\n      module.call(instanceofInstance.internalName, [\n        module.local_tee(temp.index, expr),\n        module.i32(toType.classReference!.id)\n      ], NativeType.I32),\n      module.local_get(temp.index, type.toNativeType()),\n      this.makeAbort(null, reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    return expr;\n  }\n}\n\n// helpers\n\nconst v128_zero = new Uint8Array(16);\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args !== null && args.length > 0) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.isLiteralKind(LiteralKind.STRING)) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.isLiteralKind(LiteralKind.STRING)) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Evaluates the kind of a boolean condition from its expression. */\nfunction evaluateConditionKind(expr: ExpressionRef): ConditionKind {\n  assert(getExpressionType(expr) == NativeType.I32 || getExpressionType(expr) == NativeType.Unreachable);\n  if (getExpressionId(expr) == ExpressionId.Const) {\n    return getConstValueI32(expr)\n      ? ConditionKind.TRUE\n      : ConditionKind.FALSE;\n  }\n  return ConditionKind.UNKNOWN;\n}\n","/**\n * @fileoverview Built-in elements providing core WebAssembly functionality.\n *\n * Each builtin is linked to its definition in std/assembly/builtins.ts.\n * When its prototype is called, the compiler recognizes the `@builtin`\n * decorator, looks up the respective handler in the global builtins map\n * and executes it, with the handler directly emitting WebAssembly code\n * according to context.\n *\n * Builtins can be categorized into core builtins that typically are generic\n * and emit code directly and aliases calling core builtins with overridden\n * contexts. The latter is used by inline assembler aliases of WebAssembly\n * instructions, like `i64.load8_u` deferring to `<i64>load<u8>`.\n *\n * The `contextIsExact` modifier is used to force a specific instruction\n * family. A `i32.store8` deferring to `<i32>store<i8>` for example is\n * ambiguous in that the input can still be an i32 or an i64, leading to\n * either an `i32.store8` or an `i64.store8`, so `i32` is forced there.\n * This behavior is indicated by `from i32/i64` in the comments below.\n *\n * @license Apache-2.0\n */\n\n// TODO: Add builtins for `i32.add` etc. that do not have a core builtin.\n\nimport {\n  Compiler,\n  Constraints,\n  RuntimeFeatures\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticCategory\n} from \"./diagnostics\";\n\nimport {\n  Expression,\n  LiteralKind,\n  StringLiteralExpression,\n  CallExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  SIMDTernaryOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef,\n  SIMDLoadOp,\n  getLocalGetIndex,\n  hasSideEffects,\n  createType\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element,\n  ClassPrototype\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  featureToString,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Internal names of various compiler built-ins. */\nexport namespace BuiltinNames {\n\n  // compiler-generated\n  export const start = \"~start\";\n  export const started = \"~started\";\n  export const argumentsLength = \"~argumentsLength\";\n  export const setArgumentsLength = \"~setArgumentsLength\";\n\n  // std/builtins.ts\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n  export const isVoid = \"~lib/builtins/isVoid\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n  export const atomic_fence = \"~lib/builtins/atomic.fence\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const nameof = \"~lib/builtins/nameof\";\n  export const lengthof = \"~lib/builtins/lengthof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_xor_u = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_xor_u = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_swizzle = \"~lib/builtins/v128.swizzle\";\n  export const v128_load_splat = \"~lib/builtins/v128.load_splat\";\n  export const v128_load_ext = \"~lib/builtins/v128.load_ext\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_andnot = \"~lib/builtins/v128.andnot\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_dot = \"~lib/builtins/v128.dot\";\n  export const v128_avgr = \"~lib/builtins/v128.avgr\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc_sat = \"~lib/builtins/v128.trunc_sat\";\n  export const v128_narrow = \"~lib/builtins/v128.narrow\";\n  export const v128_widen_low = \"~lib/builtins/v128.widen_low\";\n  export const v128_widen_high = \"~lib/builtins/v128.widen_high\";\n  export const v128_qfma = \"~lib/builtins/v128.qfma\";\n  export const v128_qfms = \"~lib/builtins/v128.qfms\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_min_s = \"~lib/builtins/i8x16.min_s\";\n  export const i8x16_min_u = \"~lib/builtins/i8x16.min_u\";\n  export const i8x16_max_s = \"~lib/builtins/i8x16.max_s\";\n  export const i8x16_max_u = \"~lib/builtins/i8x16.max_u\";\n  export const i8x16_avgr_u = \"~lib/builtins/i8x16.avgr_u\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n  export const i8x16_narrow_i16x8_s = \"~lib/builtins/i8x16.narrow_i16x8_s\";\n  export const i8x16_narrow_i16x8_u = \"~lib/builtins/i8x16.narrow_i16x8_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_min_s = \"~lib/builtins/i16x8.min_s\";\n  export const i16x8_min_u = \"~lib/builtins/i16x8.min_u\";\n  export const i16x8_max_s = \"~lib/builtins/i16x8.max_s\";\n  export const i16x8_max_u = \"~lib/builtins/i16x8.max_u\";\n  export const i16x8_avgr_u = \"~lib/builtins/i16x8.avgr_u\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n  export const i16x8_narrow_i32x4_s = \"~lib/builtins/i16x8.narrow_i32x4_s\";\n  export const i16x8_narrow_i32x4_u = \"~lib/builtins/i16x8.narrow_i32x4_u\";\n  export const i16x8_widen_low_i8x16_s = \"~lib/builtins/i16x8.widen_low_i8x16_s\";\n  export const i16x8_widen_low_i8x16_u = \"~lib/builtins/i16x8.widen_low_i8x16_u\";\n  export const i16x8_widen_high_i8x16_s = \"~lib/builtins/i16x8.widen_high_i8x16_s\";\n  export const i16x8_widen_high_i8x16_u = \"~lib/builtins/i16x8.widen_high_i8x16_u\";\n  export const i16x8_load8x8_s = \"~lib/builtins/i16x8.load8x8_s\";\n  export const i16x8_load8x8_u = \"~lib/builtins/i16x8.load8x8_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_min_s = \"~lib/builtins/i32x4.min_s\";\n  export const i32x4_min_u = \"~lib/builtins/i32x4.min_u\";\n  export const i32x4_max_s = \"~lib/builtins/i32x4.max_s\";\n  export const i32x4_max_u = \"~lib/builtins/i32x4.max_u\";\n  export const i32x4_dot_i16x8_s = \"~lib/builtins/i32x4.dot_i16x8_s\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_sat_f32x4_s = \"~lib/builtins/i32x4.trunc_sat_f32x4_s\";\n  export const i32x4_trunc_sat_f32x4_u = \"~lib/builtins/i32x4.trunc_sat_f32x4_u\";\n  export const i32x4_widen_low_i16x8_s = \"~lib/builtins/i32x4.widen_low_i16x8_s\";\n  export const i32x4_widen_low_i16x8_u = \"~lib/builtins/i32x4.widen_low_i16x8_u\";\n  export const i32x4_widen_high_i16x8_s = \"~lib/builtins/i32x4.widen_high_i16x8_s\";\n  export const i32x4_widen_high_i16x8_u = \"~lib/builtins/i32x4.widen_high_i16x8_u\";\n  export const i32x4_load16x4_s = \"~lib/builtins/i32x4.load16x4_s\";\n  export const i32x4_load16x4_u = \"~lib/builtins/i32x4.load16x4_u\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_sat_f64x2_s = \"~lib/builtins/i64x2.trunc_sat_f64x2_s\";\n  export const i64x2_trunc_sat_f64x2_u = \"~lib/builtins/i64x2.trunc_sat_f64x2_u\";\n  export const i64x2_load32x2_s = \"~lib/builtins/i64x2.load32x2_s\";\n  export const i64x2_load32x2_u = \"~lib/builtins/i64x2.load32x2_u\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_i32x4_s = \"~lib/builtins/f32x4.convert_i32x4_s\";\n  export const f32x4_convert_i32x4_u = \"~lib/builtins/f32x4.convert_i32x4_u\";\n  export const f32x4_qfma = \"~lib/builtins/f32x4.qfma\";\n  export const f32x4_qfms = \"~lib/builtins/f32x4.qfms\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_i64x2_s = \"~lib/builtins/f64x2.convert_i64x2_s\";\n  export const f64x2_convert_i64x2_u = \"~lib/builtins/f64x2.convert_i64x2_u\";\n  export const f64x2_qfma = \"~lib/builtins/f64x2.qfma\";\n  export const f64x2_qfms = \"~lib/builtins/f64x2.qfms\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n  export const v8x16_swizzle = \"~lib/builtins/v8x16.swizzle\";\n  export const v8x16_load_splat = \"~lib/builtins/v8x16.load_splat\";\n  export const v16x8_load_splat = \"~lib/builtins/v16x8.load_splat\";\n  export const v32x4_load_splat = \"~lib/builtins/v32x4.load_splat\";\n  export const v64x2_load_splat = \"~lib/builtins/v64x2.load_splat\";\n\n  // internals\n  export const heap_base = \"~lib/heap/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/number.ts\n  export const isNaN = \"~lib/number/isNaN\";\n  export const isFinite = \"~lib/number/isFinite\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n}\n\n/** Builtin compilation context. */\nexport class BuiltinContext {\n  /** Compiler reference. */\n  compiler: Compiler;\n  /** Prototype being called. */\n  prototype: FunctionPrototype;\n  /** Provided type arguments. */\n  typeArguments: Type[] | null;\n  /** Provided operands. */\n  operands: Expression[];\n  /** Contextual type. */\n  contextualType: Type;\n  /** Respective call expression. */\n  reportNode: CallExpression;\n  /** Whether originating from inline assembly. */\n  contextIsExact: bool;\n}\n\n/** Global builtins map. */\nexport const builtins = new Map<string,(ctx: BuiltinContext) => ExpressionRef>();\n\n// === Static type evaluation =================================================================\n\n// isInteger<T!>() / isInteger<T?>(value: T) -> bool\nfunction builtin_isInteger(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isInteger, builtin_isInteger);\n\n// isFloat<T!>() / isFloat<T?>(value: T) -> bool\nfunction builtin_isFloat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.FLOAT) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isFloat, builtin_isFloat);\n\n// isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\nfunction builtin_isBoolean(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type == Type.bool ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isBoolean, builtin_isBoolean);\n\n// isSigned<T!>() / isSigned<T?>(value: T) -> bool\nfunction builtin_isSigned(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.SIGNED) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isSigned, builtin_isSigned);\n\n// isReference<T!>() / isReference<T?>(value: T) -> bool\nfunction builtin_isReference(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.REFERENCE) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isReference, builtin_isReference);\n\n// isString<T!>() / isString<T?>(value: T) -> bool\nfunction builtin_isString(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  if (type.is(TypeFlags.REFERENCE)) {\n    let classReference = type.classReference;\n    if (classReference) {\n      let stringInstance = compiler.program.stringInstance;\n      if (stringInstance !== null && classReference.isAssignableTo(stringInstance)) return module.i32(1);\n    }\n  }\n  return module.i32(0);\n}\nbuiltins.set(BuiltinNames.isString, builtin_isString);\n\n// isArray<T!>() / isArray<T?>(value: T) -> bool\nfunction builtin_isArray(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  if (type.is(TypeFlags.REFERENCE)) {\n    let classReference = type.classReference;\n    if (classReference) {\n      return module.i32(classReference.prototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\n    }\n  }\n  return module.i32(0);\n}\nbuiltins.set(BuiltinNames.isArray, builtin_isArray);\n\n// isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\nfunction builtin_isArrayLike(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  if (type.is(TypeFlags.REFERENCE)) {\n    let classReference = type.classReference;\n    if (classReference) {\n      return module.i32(classReference.isArrayLike ? 1 : 0);\n    }\n  }\n  return module.i32(0);\n}\nbuiltins.set(BuiltinNames.isArrayLike, builtin_isArrayLike);\n\n// isFunction<T!> / isFunction<T?>(value: T) -> bool\nfunction builtin_isFunction(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.signatureReference ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isFunction, builtin_isFunction);\n\n// isNullable<T!> / isNullable<T?>(value: T) -> bool\nfunction builtin_isNullable(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isNullable, builtin_isNullable);\n\n// isDefined(expression) -> bool\nfunction builtin_isDefined(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.bool;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var element = compiler.resolver.lookupExpression(\n    ctx.operands[0],\n    compiler.currentFlow,\n    Type.auto,\n    ReportMode.SWALLOW\n  );\n  return module.i32(element ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isDefined, builtin_isDefined);\n\n// isConstant(expression) -> bool\nfunction builtin_isConstant(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.bool;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var expr = compiler.compileExpression(ctx.operands[0], Type.auto);\n  compiler.currentType = Type.bool;\n  return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isConstant, builtin_isConstant);\n\n// isManaged<T!>() -> bool\nfunction builtin_isManaged(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isManaged ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isManaged, builtin_isManaged);\n\n// isVoid<T!>() -> bool\nfunction builtin_isVoid(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.kind == TypeKind.VOID ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isVoid, builtin_isVoid);\n\n// lengthof<T!>() -> i32\nfunction builtin_lengthof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.i32;\n  if (!type) return module.unreachable();\n  var signatureReference = type.signatureReference;\n  if (!signatureReference) {\n    compiler.error(\n      DiagnosticCode.Type_0_has_no_call_signatures,\n      ctx.reportNode.range, type.toString()\n    );\n    return module.unreachable();\n  }\n  return module.i32(signatureReference.parameterTypes.length);\n}\nbuiltins.set(BuiltinNames.lengthof, builtin_lengthof);\n\n// sizeof<T!>() -> usize*\nfunction builtin_sizeof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  var type = ctx.typeArguments![0];\n  var byteSize = type.byteSize;\n  if (!byteSize) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"sizeof\", type.toString()\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(byteSize), ctx.contextualType);\n}\nbuiltins.set(BuiltinNames.sizeof, builtin_sizeof);\n\n// alignof<T!>() -> usize*\nfunction builtin_alignof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  var type = ctx.typeArguments![0];\n  var byteSize = type.byteSize;\n  if (!isPowerOf2(byteSize)) { // implies == 0\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"alignof\", type.toString()\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(ctz<i32>(byteSize)), ctx.contextualType);\n}\nbuiltins.set(BuiltinNames.alignof, builtin_alignof);\n\n// offsetof<T!>(fieldName?: string) -> usize*\nfunction builtin_offsetof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 0, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var contextualType = ctx.contextualType;\n  var type = ctx.typeArguments![0];\n  var classType = type.classReference;\n  if (!(type.is(TypeFlags.REFERENCE) && classType !== null)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"offsetof\", type.toString()\n    );\n    if (compiler.options.isWasm64) {\n      if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n        compiler.currentType = Type.u32;\n      }\n    } else {\n      if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n        compiler.currentType = Type.u64;\n      }\n    }\n    return module.unreachable();\n  }\n  if (operands.length) {\n    let firstOperand = operands[0];\n    if (!firstOperand.isLiteralKind(LiteralKind.STRING)) {\n      compiler.error(\n        DiagnosticCode.String_literal_expected,\n        operands[0].range\n      );\n      return module.unreachable();\n    }\n    let fieldName = (<StringLiteralExpression>firstOperand).value;\n    let classMembers = classType.members;\n    if (classMembers !== null && classMembers.has(fieldName)) {\n      let member = assert(classMembers.get(fieldName));\n      if (member.kind == ElementKind.FIELD) {\n        return contextualUsize(compiler, i64_new((<Field>member).memoryOffset), contextualType);\n      }\n    }\n    compiler.error(\n      DiagnosticCode.Type_0_has_no_property_1,\n      firstOperand.range, classType.internalName, fieldName\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(classType.nextMemoryOffset), contextualType);\n}\nbuiltins.set(BuiltinNames.offsetof, builtin_offsetof);\n\n// nameof<T> -> string\nfunction builtin_nameof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var resultType = evaluateConstantType(ctx);\n  if (!resultType) {\n    compiler.currentType = compiler.program.stringInstance.type;\n    return module.unreachable();\n  }\n  var value: string;\n  if (resultType.is(TypeFlags.REFERENCE)) {\n    let classReference = resultType.classReference;\n    if (classReference) {\n      value = classReference.name;\n    } else {\n      let signatureReference = resultType.signatureReference;\n      if (signatureReference) {\n        value = \"Function\";\n      } else {\n        value = \"Anyref\";\n      }\n    }\n  } else {\n    switch (resultType.kind) {\n      case TypeKind.BOOL: { value = \"bool\"; break; }\n      case TypeKind.I8: { value = \"i8\"; break; }\n      case TypeKind.U8: { value = \"u8\"; break; }\n      case TypeKind.I16: { value = \"i16\"; break; }\n      case TypeKind.U16: { value = \"u16\"; break; }\n      case TypeKind.I32: { value = \"i32\"; break; }\n      case TypeKind.U32: { value = \"u32\"; break; }\n      case TypeKind.F32: { value = \"f32\"; break; }\n      case TypeKind.I64: { value = \"i64\"; break; }\n      case TypeKind.U64: { value = \"u64\"; break; }\n      case TypeKind.F64: { value = \"f64\"; break; }\n      case TypeKind.ISIZE: { value = \"isize\"; break; }\n      case TypeKind.USIZE: { value = \"usize\"; break; }\n      case TypeKind.V128: { value = \"v128\"; break; }\n      case TypeKind.ANYREF: { value = \"anyref\"; break; }\n      default: assert(false);\n      case TypeKind.VOID: { value = \"void\"; break; }\n    }\n  }\n  return compiler.ensureStaticString(value);\n}\nbuiltins.set(BuiltinNames.nameof, builtin_nameof);\n\n// idof<T> -> u32\nfunction builtin_idof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.u32;\n  if (!type) return module.unreachable();\n  if (type.is(TypeFlags.REFERENCE)) {\n    let signatureReference = type.signatureReference;\n    if (signatureReference) {\n      return module.i32(signatureReference.id);\n    }\n    let classReference = type.classReference;\n    if (classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      return module.i32(classReference.id);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"idof\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.idof, builtin_idof);\n\n// === Math ===================================================================================\n\n// clz<T?>(value: T) -> T\nfunction builtin_clz(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(ctx.operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(ctx.operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.ClzI32, arg0);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.ClzI64\n            : UnaryOp.ClzI32,\n          arg0\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.ClzI64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"clz\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.clz, builtin_clz);\n\n// ctz<T?>(value: T) -> T\nfunction builtin_ctz(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.CtzI32, arg0);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.CtzI64\n            : UnaryOp.CtzI32,\n          arg0\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.CtzI64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"ctz\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ctz, builtin_ctz);\n\n// popcnt<T?>(value: T) -> T\nfunction builtin_popcnt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (compiler.currentType.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.PopcntI32, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.PopcntI64, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.PopcntI64\n            : UnaryOp.PopcntI32,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"popcnt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.popcnt, builtin_popcnt);\n\n// rotl<T?>(value: T, shift: T) -> T\nfunction builtin_rotl(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return compiler.ensureSmallIntegerWrap(\n          module.binary(BinaryOp.RotlI32, arg0, arg1),\n          type\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.RotlI32, arg0, arg1);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.RotlI64\n            : BinaryOp.RotlI32,\n          arg0, arg1\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.RotlI64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"rotl\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rotl, builtin_rotl);\n\n// rotr<T?>(value: T, shift: T) -> T\nfunction builtin_rotr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return compiler.ensureSmallIntegerWrap(\n          module.binary(BinaryOp.RotrI32, arg0, arg1),\n          type\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.RotrI32, arg0, arg1);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.RotrI64\n            : BinaryOp.RotrI32,\n          arg0, arg1\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.RotrI64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"rotr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rotr, builtin_rotr);\n\n// abs<T?>(value: T) -> T\nfunction builtin_abs(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: {\n        let flow = compiler.currentFlow;\n\n        // possibly overflows, e.g. abs<i8>(-128) == 128\n        let temp1 = flow.getTempLocal(Type.i32);\n        let temp2 = flow.getTempLocal(Type.i32);\n        // (x + (x >> 31)) ^ (x >> 31)\n        let ret = module.binary(BinaryOp.XorI32,\n          module.binary(BinaryOp.AddI32,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrI32,\n                module.local_tee(temp1.index, arg0),\n                module.i32(31)\n              )\n            ),\n            module.local_get(temp1.index, NativeType.I32)\n          ),\n          module.local_get(temp2.index, NativeType.I32)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.ISIZE: {\n        let options = compiler.options;\n        let flow = compiler.currentFlow;\n        let isWasm64 = options.isWasm64;\n\n        let temp1 = flow.getTempLocal(options.usizeType);\n        let temp2 = flow.getTempLocal(options.usizeType);\n        let ret = module.binary(isWasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n          module.binary(isWasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n            module.local_tee(\n              temp2.index,\n              module.binary(isWasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                module.local_tee(temp1.index, arg0),\n                isWasm64 ? module.i64(63) : module.i32(31)\n              )\n            ),\n            module.local_get(temp1.index, options.nativeSizeType)\n          ),\n          module.local_get(temp2.index, options.nativeSizeType)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.I64: {\n        let flow = compiler.currentFlow;\n\n        let temp1 = flow.getTempLocal(Type.i64);\n        let temp2 = flow.getTempLocal(Type.i64);\n        // (x + (x >> 63)) ^ (x >> 63)\n        let ret = module.binary(BinaryOp.XorI64,\n          module.binary(BinaryOp.AddI64,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrI64,\n                module.local_tee(temp1.index, arg0),\n                module.i64(63)\n              )\n            ),\n            module.local_get(temp1.index, NativeType.I64)\n          ),\n          module.local_get(temp2.index, NativeType.I64)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.USIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.AbsF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.AbsF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"abs\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.abs, builtin_abs);\n\n// max<T?>(left: T, right: T) -> T\nfunction builtin_max(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) { // prefer right type\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      }\n    } else {\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n      case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n      case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n      case TypeKind.ISIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.GtI64\n          : BinaryOp.GtI32;\n        break;\n      }\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.GtU64\n          : BinaryOp.GtU32;\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MaxF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MaxF64, arg0, arg1);\n    }\n    if (op != -1) {\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let temp1 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n      let temp2 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n      let ret = module.select(\n        module.local_tee(temp1.index, arg0),\n        module.local_tee(temp2.index, arg1),\n        module.binary(op,\n          module.local_get(temp1.index, nativeType),\n          module.local_get(temp2.index, nativeType)\n        )\n      );\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"max\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.max, builtin_max);\n\n// min<T?>(left: T, right: T) -> T\nfunction builtin_min(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) { // prefer right type\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      }\n    } else {\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n      case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n      case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n      case TypeKind.ISIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.LtI64\n          : BinaryOp.LtI32;\n        break;\n      }\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.LtU64\n          : BinaryOp.LtU32;\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MinF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MinF64, arg0, arg1);\n    }\n    if (op != -1) {\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let temp1 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n      let temp2 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n      let ret = module.select(\n        module.local_tee(temp1.index, arg0),\n        module.local_tee(temp2.index, arg1),\n        module.binary(op,\n          module.local_get(temp1.index, nativeType),\n          module.local_get(temp2.index, nativeType)\n        )\n      );\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"min\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.min, builtin_min);\n\n// ceil<T?>(value: T) -> T\nfunction builtin_ceil(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered rounded\n      case TypeKind.F32: return module.unary(UnaryOp.CeilF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.CeilF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"ceil\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ceil, builtin_ceil);\n\n// floor<T?>(value: T) -> T\nfunction builtin_floor(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered rounded\n      case TypeKind.F32: return module.unary(UnaryOp.FloorF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.FloorF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"floor\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.floor, builtin_floor);\n\n// copysign<T?>(left: T, right: T) -> T\nfunction builtin_copysign(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      // TODO: does an integer version make sense?\n      case TypeKind.F32: return module.binary(BinaryOp.CopysignF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.CopysignF64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"copysign\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.copysign, builtin_copysign);\n\n// nearest<T?>(value: T) -> T\nfunction builtin_nearest(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.NearestF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NearestF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"nearest\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.nearest, builtin_nearest);\n\n// reinterpret<T!>(value: *) -> T\nfunction builtin_reinterpret(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments![0];\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n        compiler.currentType = type;\n        return module.unary(UnaryOp.ReinterpretF32, arg0);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n        compiler.currentType = type;\n        return module.unary(UnaryOp.ReinterpretF64, arg0);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let arg0 = compiler.compileExpression(operands[0],\n          compiler.options.isWasm64\n            ? Type.f64\n            : Type.f32,\n          Constraints.CONV_IMPLICIT\n        );\n        compiler.currentType = type;\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.ReinterpretF64\n            : UnaryOp.ReinterpretF32,\n          arg0\n        );\n      }\n      case TypeKind.F32: {\n        let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n        compiler.currentType = Type.f32;\n        return module.unary(UnaryOp.ReinterpretI32, arg0);\n      }\n      case TypeKind.F64: {\n        let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n        compiler.currentType = Type.f64;\n        return module.unary(UnaryOp.ReinterpretI64, arg0);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"reinterpret\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.reinterpret, builtin_reinterpret);\n\n// sqrt<T?>(value: T) -> T\nfunction builtin_sqrt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      // TODO: integer versions (that return f64 or convert)?\n      case TypeKind.F32: return module.unary(UnaryOp.SqrtF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SqrtF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"sqrt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.sqrt, builtin_sqrt);\n\n// trunc<T?>(value: T) -> T\nfunction builtin_trunc(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered truncated\n      case TypeKind.F32: return module.unary(UnaryOp.TruncF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.TruncF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"trunc\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.trunc, builtin_trunc);\n\n// isNaN<T?>(value: T) -> bool\nfunction builtin_isNaN(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  compiler.currentType = Type.bool;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      // never NaN\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: {\n        return hasSideEffects(arg0)\n          ? module.block(null, [\n              module.drop(arg0),\n              module.i32(0)\n            ], NativeType.I32)\n          : module.i32(0);\n      }\n      // (t = arg0) != t\n      case TypeKind.F32: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.NeF32,\n            arg0,\n            module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.NeF32,\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.F32)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.NeF64,\n            arg0,\n            module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.NeF64,\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"isNaN\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.isNaN, builtin_isNaN);\n\n// isFinite<T?>(value: T) -> bool\nfunction builtin_isFinite(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  compiler.currentType = Type.bool;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      // always finite\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: {\n        return hasSideEffects(arg0)\n          ? module.block(null, [\n              module.drop(arg0),\n              module.i32(1)\n            ], NativeType.I32)\n          : module.i32(1);\n      }\n      // (t = arg0) - t == 0\n      case TypeKind.F32: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.EqF32,\n            module.binary(BinaryOp.SubF32,\n              arg0,\n              module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n            ),\n            module.f32(0)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.EqF32,\n          module.binary(BinaryOp.SubF32,\n            module.local_tee(temp.index, arg0),\n            module.local_get(temp.index, NativeType.F32)\n          ),\n          module.f32(0)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.EqF64,\n            module.binary(BinaryOp.SubF64,\n              arg0,\n              module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n            ),\n            module.f64(0)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.EqF64,\n          module.binary(BinaryOp.SubF64,\n            module.local_tee(temp.index, arg0),\n            module.local_get(temp.index, NativeType.F64)\n          ),\n          module.f64(0)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"isFinite\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.isFinite, builtin_isFinite);\n\n// === Memory access ==========================================================================\n\n// load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\nfunction builtin_load(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var outType = (\n    contextualType != Type.auto &&\n    type.is(TypeFlags.INTEGER) &&\n    contextualType.is(TypeFlags.INTEGER) &&\n    contextualType.size > type.size\n  ) ? contextualType : type;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  var immAlign: i32;\n  var naturalAlign = type.byteSize;\n  if (numOperands == 3) {\n    immAlign = evaluateImmediateOffset(operands[2], compiler);\n    if (immAlign < 0) {\n      compiler.currentType = outType;\n      return module.unreachable();\n    }\n    if (immAlign > naturalAlign) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n      );\n      compiler.currentType = outType;\n      return module.unreachable();\n    }\n    if (!isPowerOf2(immAlign)) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_power_of_two,\n        operands[2].range, \"Alignment\"\n      );\n      compiler.currentType = outType;\n      return module.unreachable();\n    }\n  } else {\n    immAlign = naturalAlign;\n  }\n  compiler.currentType = outType;\n  return module.load(\n    type.byteSize,\n    type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n    arg0,\n    outType.toNativeType(),\n    immOffset,\n    immAlign\n  );\n}\nbuiltins.set(BuiltinNames.load, builtin_load);\n\n// store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\nfunction builtin_store(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 4)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.is(TypeFlags.INTEGER)\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.is(TypeFlags.INTEGER) &&\n    (\n      !inType.is(TypeFlags.INTEGER) || // float to int\n      inType.size < type.size          // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var immAlign: i32;\n  var naturalAlign = type.byteSize;\n  if (operands.length == 4) {\n    immAlign = evaluateImmediateOffset(operands[3], compiler);\n    if (immAlign < 0) {\n      compiler.currentType = Type.void;\n      return module.unreachable();\n    }\n    if (immAlign > naturalAlign) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\n      );\n      compiler.currentType = Type.void;\n      return module.unreachable();\n    }\n    if (!isPowerOf2(immAlign)) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_power_of_two,\n        operands[3].range, \"Alignment\"\n      );\n      compiler.currentType = Type.void;\n      return module.unreachable();\n    }\n  } else {\n    immAlign = naturalAlign;\n  }\n  compiler.currentType = Type.void;\n  return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n}\nbuiltins.set(BuiltinNames.store, builtin_store);\n\n// === Atomics ================================================================================\n\n// atomic.load<T!>(offset: usize, immOffset?: usize) -> T*\nfunction builtin_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var outType = (\n    type.is(TypeFlags.INTEGER) &&\n    contextualType.is(TypeFlags.INTEGER) &&\n    contextualType.size > type.size\n  ) ? contextualType : type;\n  if (!type.is(TypeFlags.INTEGER)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.load\", type.toString()\n    );\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  compiler.currentType = outType;\n  return module.atomic_load(\n    type.byteSize,\n    arg0,\n    outType.toNativeType(),\n    immOffset\n  );\n}\nbuiltins.set(BuiltinNames.atomic_load, builtin_atomic_load);\n\n// atomic.store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\nfunction builtin_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.is(TypeFlags.INTEGER)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.store\", type.toString()\n    );\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(\n        operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.is(TypeFlags.INTEGER)\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.is(TypeFlags.INTEGER) &&\n    (\n      !inType.is(TypeFlags.INTEGER) || // float to int\n      inType.size < type.size          // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  compiler.currentType = Type.void;\n  return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n}\nbuiltins.set(BuiltinNames.atomic_store, builtin_atomic_store);\n\n// any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_binary(ctx: BuiltinContext, op: AtomicRMWOp, opName: string): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 2, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, opName, type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0],\n    compiler.options.usizeType,\n    Constraints.CONV_IMPLICIT\n  );\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.is(TypeFlags.INTEGER)\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.is(TypeFlags.INTEGER) &&\n    (\n      !inType.is(TypeFlags.INTEGER) || // float to int\n      inType.size < type.size          // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = inType;\n    return module.unreachable();\n  }\n  compiler.currentType = inType;\n  return module.atomic_rmw(op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType());\n}\n\n// atomic.add<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_add(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Add, \"atomic.add\");\n}\nbuiltins.set(BuiltinNames.atomic_add, builtin_atomic_add);\n\n// atomic.sub<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_sub(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Sub, \"atomic.sub\");\n}\nbuiltins.set(BuiltinNames.atomic_sub, builtin_atomic_sub);\n\n// atomic.and<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_and(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.And, \"atomic.and\");\n}\nbuiltins.set(BuiltinNames.atomic_and, builtin_atomic_and);\n\n// atomic.or<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_or(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Or, \"atomic.or\");\n}\nbuiltins.set(BuiltinNames.atomic_or, builtin_atomic_or);\n\n// atomic.xor<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xor(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Xor, \"atomic.xor\");\n}\nbuiltins.set(BuiltinNames.atomic_xor, builtin_atomic_xor);\n\n// atomic.xchg<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xchg(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Xchg, \"atomic.xchg\");\n}\nbuiltins.set(BuiltinNames.atomic_xchg, builtin_atomic_xchg);\n\n// atomic.cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize) -> T\nfunction builtin_atomic_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 3, 4)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.cmpxchg\", type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0],\n    compiler.options.usizeType,\n    Constraints.CONV_IMPLICIT\n  );\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.is(TypeFlags.INTEGER)\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  var arg2 = compiler.compileExpression(operands[2],\n    inType,\n    Constraints.CONV_IMPLICIT\n  );\n  if (\n    type.is(TypeFlags.INTEGER) &&\n    (\n      !inType.is(TypeFlags.INTEGER) || // float to int\n      inType.size < type.size          // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    arg2 = compiler.convertExpression(arg2,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[2]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = inType;\n    return module.unreachable();\n  }\n  compiler.currentType = inType;\n  return module.atomic_cmpxchg(type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType());\n}\nbuiltins.set(BuiltinNames.atomic_cmpxchg, builtin_atomic_cmpxchg);\n\n// atomic.wait<T!>(ptr: usize, expected: T, timeout: i64) -> i32\nfunction builtin_atomic_wait(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.i64, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  switch (type.kind) {\n    case TypeKind.I32:\n    case TypeKind.I64:\n    case TypeKind.ISIZE:\n    case TypeKind.U32:\n    case TypeKind.U64:\n    case TypeKind.USIZE: return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"atomic.wait\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.atomic_wait, builtin_atomic_wait);\n\n// atomic.notify(ptr: usize, count: i32) -> i32\nfunction builtin_atomic_notify(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  return module.atomic_notify(arg0, arg1);\n}\nbuiltins.set(BuiltinNames.atomic_notify, builtin_atomic_notify);\n\n// atomic.fence() -> void\nfunction builtin_atomic_fence(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  return module.atomic_fence();\n}\nbuiltins.set(BuiltinNames.atomic_fence, builtin_atomic_fence);\n\n// === Control flow ===========================================================================\n\n// select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\nfunction builtin_select(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"select\", type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.makeIsTrueish(\n    compiler.compileExpression(operands[2], Type.bool),\n    compiler.currentType // ^\n  );\n  compiler.currentType = type;\n  return module.select(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.select, builtin_select);\n\n// unreachable() -> *\nfunction builtin_unreachable(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  checkArgsRequired(ctx, 0);\n  return ctx.compiler.module.unreachable();\n}\nbuiltins.set(BuiltinNames.unreachable, builtin_unreachable);\n\n// === Memory =================================================================================\n\n// memory.size() -> i32\nfunction builtin_memory_size(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  return module.host(HostOp.MemorySize);\n}\nbuiltins.set(BuiltinNames.memory_size, builtin_memory_size);\n\n// memory.grow(pages: i32) -> i32\nfunction builtin_memory_grow(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  return module.host(HostOp.MemoryGrow, null, [\n    compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\n  ]);\n}\nbuiltins.set(BuiltinNames.memory_grow, builtin_memory_grow);\n\n// memory.copy(dest: usize, src: usize: n: usize) -> void\nfunction builtin_memory_copy(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n    // use stdlib alternative if not supported\n    let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n    compiler.currentType = Type.void;\n    if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n    return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n  }\n  var usizeType = compiler.options.usizeType;\n  var arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.void;\n  return module.memory_copy(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.memory_copy, builtin_memory_copy);\n\n// memory.fill(dest: usize, value: u8, n: usize) -> void\nfunction builtin_memory_fill(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n    // use stdlib alternative if not supported\n    let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n    compiler.currentType = Type.void;\n    if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n    return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n  }\n  var usizeType = compiler.options.usizeType;\n  var arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.void;\n  return module.memory_fill(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.memory_fill, builtin_memory_fill);\n\n// === Helpers ================================================================================\n\n// changetype<T!>(value: *) -> T\nfunction builtin_changetype(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var toType = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.auto);\n  var fromType = compiler.currentType;\n  compiler.currentType = toType;\n  if (!fromType.isChangeableTo(toType)) {\n    compiler.error(\n      DiagnosticCode.Type_0_cannot_be_changed_to_type_1,\n      ctx.reportNode.range, fromType.toString(), toType.toString()\n    );\n    return module.unreachable();\n  }\n  return arg0;\n}\nbuiltins.set(BuiltinNames.changetype, builtin_changetype);\n\n// assert<T?>(isTrueish: T, message?: string) -> T{!= null}\nfunction builtin_assert(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var typeArguments = ctx.typeArguments;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsOptional(ctx, 1, 2)\n  ) {\n    if (typeArguments) {\n      assert(typeArguments.length); // otherwise invalid, should not been set at all\n      compiler.currentType = typeArguments[0].nonNullableType;\n    }\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var contextualType = ctx.contextualType;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  compiler.currentType = type.nonNullableType;\n\n  // if the assertion can be proven statically, omit it\n  if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n    switch (getExpressionType(arg0)) {\n      case NativeType.I32: {\n        if (getConstValueI32(arg0) != 0) {\n          if (contextualType == Type.void) {\n            compiler.currentType = Type.void;\n            return module.nop();\n          }\n          return arg0;\n        }\n        break;\n      }\n      case NativeType.I64: {\n        if (getConstValueI64Low(arg0) != 0 || getConstValueI64High(arg0) != 0) {\n          if (contextualType == Type.void) {\n            compiler.currentType = Type.void;\n            return module.nop();\n          }\n          return arg0;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        if (getConstValueF32(arg0) != 0) {\n          if (contextualType == Type.void) {\n            compiler.currentType = Type.void;\n            return module.nop();\n          }\n          return arg0;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        if (getConstValueF64(arg0) != 0) {\n          if (contextualType == Type.void) {\n            compiler.currentType = Type.void;\n            return module.nop();\n          }\n          return arg0;\n        }\n        break;\n      }\n    }\n  }\n\n  // return ifTrueish if assertions are disabled\n  if (compiler.options.noAssert) {\n    if (contextualType == Type.void) { // simplify if dropped anyway\n      compiler.currentType = Type.void;\n      return module.nop();\n    }\n    return arg0;\n  }\n\n  // otherwise call abort if the assertion is false-ish\n  var abort = compiler.makeAbort(operands.length == 2 ? operands[1] : null, ctx.reportNode);\n  compiler.currentType = type.nonNullableType;\n  if (contextualType == Type.void) { // simplify if dropped anyway\n    compiler.currentType = Type.void;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.if(module.unary(UnaryOp.EqzI32, arg0), abort);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.if(module.unary(UnaryOp.EqzI64, arg0), abort);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.if(\n          module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.EqzI64\n              : UnaryOp.EqzI32,\n            arg0\n          ),\n          abort\n        );\n      }\n      // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n      case TypeKind.F32: return module.if(module.binary(BinaryOp.EqF32, arg0, module.f32(0)), abort);\n      case TypeKind.F64: return module.if(module.binary(BinaryOp.EqF64, arg0, module.f64(0)), abort);\n    }\n  } else {\n    compiler.currentType = type.nonNullableType;\n    let flow = compiler.currentFlow;\n    switch (compiler.currentType.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: {\n        let temp = flow.getTempLocal(type);\n        flow.setLocalFlag(temp.index, LocalFlags.WRAPPED); // arg0 is wrapped\n        let ret = module.if(\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.I32),\n          abort\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let temp = flow.getTempLocal(Type.i64);\n        let ret = module.if(\n          module.unary(UnaryOp.EqzI64,\n            module.local_tee(temp.index, arg0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.I64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let temp = flow.getTempLocal(compiler.options.usizeType);\n        let ret = module.if(\n          module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.EqzI64\n              : UnaryOp.EqzI32,\n            module.local_tee(temp.index, arg0)\n          ),\n          abort,\n          module.local_get(temp.index, compiler.options.nativeSizeType)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F32: {\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.if(\n          module.binary(BinaryOp.EqF32,\n            module.local_tee(temp.index, arg0),\n            module.f32(0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.F32)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.if(\n          module.binary(BinaryOp.EqF64,\n            module.local_tee(temp.index, arg0),\n            module.f64(0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Not_implemented,\n    ctx.reportNode.typeArgumentsRange\n  );\n  return abort;\n}\nbuiltins.set(BuiltinNames.assert, builtin_assert);\n\n// unchecked(expr: *) -> *\nfunction builtin_unchecked(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var flow = compiler.currentFlow;\n  var alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n  flow.set(FlowFlags.UNCHECKED_CONTEXT);\n  // eliminate unnecessary tees by preferring contextualType(=void)\n  var expr = compiler.compileExpression(ctx.operands[0], ctx.contextualType);\n  if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n  return expr;\n}\nbuiltins.set(BuiltinNames.unchecked, builtin_unchecked);\n\n// instantiate<T!>(...args: *[]) -> T\nfunction builtin_instantiate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var typeArgument = typeArguments[0];\n  var classInstance = typeArgument.classReference;\n  if (!(typeArgument.is(TypeFlags.REFERENCE) && classInstance !== null)) {\n    compiler.error(\n      DiagnosticCode.This_expression_is_not_constructable,\n      ctx.reportNode.expression.range\n    );\n    return module.unreachable();\n  }\n  compiler.currentType = classInstance.type;\n  return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, ctx.reportNode);\n}\nbuiltins.set(BuiltinNames.instantiate, builtin_instantiate);\n\n// === User-defined diagnostics ===============================================================\n\nfunction builtin_diagnostic(ctx: BuiltinContext, category: DiagnosticCategory): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  checkTypeAbsent(ctx);\n  var operands = ctx.operands;\n  var reportNode = ctx.reportNode;\n  compiler.emitDiagnostic(\n    DiagnosticCode.User_defined_0,\n    category,\n    reportNode.range,\n    null,\n    operands.length\n      ? operands[0].range.toString()\n      : reportNode.range.toString()\n  );\n  return category == DiagnosticCategory.ERROR\n    ? module.unreachable()\n    : module.nop();\n}\n\n// ERROR(message?)\nfunction builtin_error(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.ERROR);\n}\nbuiltins.set(BuiltinNames.ERROR, builtin_error);\n\n// WARNING(message?)\nfunction builtin_warning(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.WARNING);\n}\nbuiltins.set(BuiltinNames.WARNING, builtin_warning);\n\n// INFO(message?)\nfunction builtin_info(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.INFO);\n}\nbuiltins.set(BuiltinNames.INFO, builtin_info);\n\n// === Portable type conversions ==============================================================\n\nfunction builtin_conversion(ctx: BuiltinContext, toType: Type): ExpressionRef {\n  var compiler = ctx.compiler;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = toType;\n    return compiler.module.unreachable();\n  }\n  return compiler.compileExpression(ctx.operands[0], toType, Constraints.CONV_EXPLICIT);\n}\n\n// i8(*) -> i8\nfunction builtin_i8(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i8);\n}\nbuiltins.set(BuiltinNames.i8, builtin_i8);\n\n// i16(*) -> i16\nfunction builtin_i16(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i16);\n}\nbuiltins.set(BuiltinNames.i16, builtin_i16);\n\n// i32(*) -> i32\nfunction builtin_i32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i32);\n}\nbuiltins.set(BuiltinNames.i32, builtin_i32);\n\n// i64(*) -> i64\nfunction builtin_i64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i64);\n}\nbuiltins.set(BuiltinNames.i64, builtin_i64);\n\n// isize(*) -> isize\nfunction builtin_isize(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, ctx.compiler.options.isizeType);\n}\nbuiltins.set(BuiltinNames.isize, builtin_isize);\n\n// u8(*) -> u8\nfunction builtin_u8(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u8);\n}\nbuiltins.set(BuiltinNames.u8, builtin_u8);\n\n// u16(*) -> u16\nfunction builtin_u16(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u16);\n}\nbuiltins.set(BuiltinNames.u16, builtin_u16);\n\n// u32(*) -> u32\nfunction builtin_u32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u32);\n}\nbuiltins.set(BuiltinNames.u32, builtin_u32);\n\n// u64(*) -> u64\nfunction builtin_u64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u64);\n}\nbuiltins.set(BuiltinNames.u64, builtin_u64);\n\n// usize(*) -> usize\nfunction builtin_usize(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, ctx.compiler.options.usizeType);\n}\nbuiltins.set(BuiltinNames.usize, builtin_usize);\n\n// bool(*) -> bool\nfunction builtin_bool(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.bool);\n}\nbuiltins.set(BuiltinNames.bool, builtin_bool);\n\n// f32(*) -> f32\nfunction builtin_f32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.f32);\n}\nbuiltins.set(BuiltinNames.f32, builtin_f32);\n\n// f64(*) -> f64\nfunction builtin_f64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.f64);\n}\nbuiltins.set(BuiltinNames.f64, builtin_f64);\n\n// TODO: alias for now, splat input integer perhaps?\nfunction builtin_v128(ctx: BuiltinContext): ExpressionRef {\n  return builtin_i8x16(ctx);\n}\nbuiltins.set(BuiltinNames.v128, builtin_v128);\n\n// === SIMD ===================================================================================\n\n// i8x16(...values: i8[16]) -> v128\nfunction builtin_i8x16(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 16)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 16; ++i) {\n    let value = operands[i];\n    if (value) {\n      let expr = compiler.precomputeExpression(value, Type.i8, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(expr) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          value.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(expr) == NativeType.I32);\n      writeI8(getConstValueI32(expr), bytes, i);\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i8x16, builtin_i8x16);\n\n// i16x8(...values: i16[8]) -> v128\nfunction builtin_i16x8(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 8)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 8; ++i) {\n    let value = operands[i];\n    if (value) {\n      let expr = compiler.precomputeExpression(value, Type.i16, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(expr) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          value.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(expr) == NativeType.I32);\n      writeI16(getConstValueI32(expr), bytes, i << 1);\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i16x8, builtin_i16x8);\n\n// i32x4(...values: i32[4]) -> v128\nfunction builtin_i32x4(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 4)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 4; ++i) {\n    let value = operands[i];\n    if (value) {\n      let expr = compiler.precomputeExpression(value, Type.i32, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(expr) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          value.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(expr) == NativeType.I32);\n      writeI32(getConstValueI32(expr), bytes, i << 2);\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i32x4, builtin_i32x4);\n\n// i64x2(...values: i64[2]) -> v128\nfunction builtin_i64x2(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 2; ++i) {\n    let value = operands[i];\n    if (value) {\n      let expr = compiler.precomputeExpression(value, Type.i64, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(expr) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          value.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(expr) == NativeType.I64);\n      let off = i << 3;\n      writeI32(getConstValueI64Low(expr), bytes, off);\n      writeI32(getConstValueI64High(expr), bytes, off + 4);\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i64x2, builtin_i64x2);\n\n// f32x4(...values: f32[4]) -> v128\nfunction builtin_f32x4(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 4)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 4; ++i) {\n    let value = operands[i];\n    if (value) {\n      let expr = compiler.precomputeExpression(value, Type.f32, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(expr) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          value.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(expr) == NativeType.F32);\n      writeF32(getConstValueF32(expr), bytes, i << 2);\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.f32x4, builtin_f32x4);\n\n// f64x2(...values: f64[2]) -> v128\nfunction builtin_f64x2(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 2; ++i) {\n    let value = operands[i];\n    if (value) {\n      let expr = compiler.precomputeExpression(value, Type.f64, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(expr) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          value.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(expr) == NativeType.F64);\n      writeF64(getConstValueF64(expr), bytes, i << 3);\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.f64x2, builtin_f64x2);\n\n// v128.splat<T!>(x: T) -> v128\nfunction builtin_v128_splat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.SplatI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.SplatI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.SplatI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.SplatI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.SplatI64x2\n            : UnaryOp.SplatI32x4,\n          arg0\n        );\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.SplatF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SplatF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.splat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_splat, builtin_v128_splat);\n\n// v128.extract_lane<T!>(x: v128, idx: u8) -> T\nfunction builtin_v128_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  compiler.currentType = type;\n  var idx = 0;\n  if (getExpressionId(arg1) == ExpressionId.Const) {\n    assert(getExpressionType(arg1) == NativeType.I32);\n    idx = getConstValueI32(arg1);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[1].range\n    );\n  }\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_extract(SIMDExtractOp.ExtractLaneI8x16, arg0, <u8>idx);\n      case TypeKind.U8: return module.simd_extract(SIMDExtractOp.ExtractLaneU8x16, arg0, <u8>idx);\n      case TypeKind.I16: return module.simd_extract(SIMDExtractOp.ExtractLaneI16x8, arg0, <u8>idx);\n      case TypeKind.U16: return module.simd_extract(SIMDExtractOp.ExtractLaneU16x8, arg0, <u8>idx);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_extract(SIMDExtractOp.ExtractLaneI32x4, arg0, <u8>idx);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_extract(SIMDExtractOp.ExtractLaneI64x2, arg0, <u8>idx);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_extract(\n          compiler.options.isWasm64\n            ? SIMDExtractOp.ExtractLaneI64x2\n            : SIMDExtractOp.ExtractLaneI32x4,\n          arg0, <u8>idx\n        );\n      }\n      case TypeKind.F32: return module.simd_extract(SIMDExtractOp.ExtractLaneF32x4, arg0, <u8>idx);\n      case TypeKind.F64: return module.simd_extract(SIMDExtractOp.ExtractLaneF64x2, arg0, <u8>idx);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extract_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extract_lane, builtin_v128_extract_lane);\n\n// v128.replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\nfunction builtin_v128_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  var idx = 0;\n  if (getExpressionId(arg1) == ExpressionId.Const) {\n    assert(getExpressionType(arg1) == NativeType.I32);\n    idx = getConstValueI32(arg1);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[1].range\n    );\n  }\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI8x16, arg0, <u8>idx, arg2);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI16x8, arg0, <u8>idx, arg2);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI32x4, arg0, <u8>idx, arg2);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI64x2, arg0, <u8>idx, arg2);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_replace(\n          compiler.options.isWasm64\n            ? SIMDReplaceOp.ReplaceLaneI64x2\n            : SIMDReplaceOp.ReplaceLaneI32x4,\n          arg0, <u8>idx, arg2\n        );\n      }\n      case TypeKind.F32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF32x4, arg0, <u8>idx, arg2);\n      case TypeKind.F64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF64x2, arg0, <u8>idx, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.replace_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_replace_lane, builtin_v128_replace_lane);\n\n// v128.shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\nfunction builtin_v128_shuffle(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let laneWidth = type.byteSize;\n    let laneCount = 16 / laneWidth;\n    assert(isInteger(laneCount) && isPowerOf2(laneCount));\n    if (\n      checkArgsRequired(ctx, 2 + laneCount)\n    ) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n    let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.F32:\n      case TypeKind.F64: {\n        let mask = new Uint8Array(16);\n        let maxIdx = (laneCount << 1) - 1;\n        for (let i = 0; i < laneCount; ++i) {\n          let operand = operands[2 + i];\n          let argN = compiler.precomputeExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(argN) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              operand.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(argN) == NativeType.I32);\n          let idx = getConstValueI32(argN);\n          if (idx < 0 || idx > maxIdx) {\n            compiler.error(\n              DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n              operand.range, \"Lane index\", \"0\", maxIdx.toString()\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          switch (laneWidth) {\n            case 1: {\n              writeI8(idx, mask, i);\n              break;\n            }\n            case 2: {\n              let off8 = i << 1;\n              let idx8 = idx << 1;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              break;\n            }\n            case 4: {\n              let off8 = i << 2;\n              let idx8 = idx << 2;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              writeI8(idx8 + 2, mask, off8 + 2);\n              writeI8(idx8 + 3, mask, off8 + 3);\n              break;\n            }\n            case 8: {\n              let off8 = i << 3;\n              let idx8 = idx << 3;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              writeI8(idx8 + 2, mask, off8 + 2);\n              writeI8(idx8 + 3, mask, off8 + 3);\n              writeI8(idx8 + 4, mask, off8 + 4);\n              writeI8(idx8 + 5, mask, off8 + 5);\n              writeI8(idx8 + 6, mask, off8 + 6);\n              writeI8(idx8 + 7, mask, off8 + 7);\n              break;\n            }\n            default: assert(false);\n          }\n        }\n        compiler.currentType = Type.v128;\n        return module.simd_shuffle(arg0, arg1, mask);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shuffle\", type.toString()\n  );\n  compiler.currentType = Type.v128;\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shuffle, builtin_v128_shuffle);\n\n// v128.swizzle(a: v128, b: v128) -> v128\nfunction builtin_v128_swizzle(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.binary(BinaryOp.SwizzleV8x16, arg0, arg1);\n}\nbuiltins.set(BuiltinNames.v128_swizzle, builtin_v128_swizzle);\n\n// v128.load_splat<T!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_splat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var immAlign: i32;\n  var naturalAlign = type.byteSize;\n  if (numOperands == 3) {\n    immAlign = evaluateImmediateOffset(operands[2], compiler);\n    if (immAlign < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n  } else {\n    immAlign = naturalAlign;\n  }\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    if (immAlign > naturalAlign) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n      );\n      return module.unreachable();\n    }\n    if (!isPowerOf2(immAlign)) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_power_of_two,\n        operands[2].range, \"Alignment\"\n      );\n      return module.unreachable();\n    }\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV8x16, arg0, immOffset, immAlign);\n      }\n      case TypeKind.I16:\n      case TypeKind.U16: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV16x8, arg0, immOffset, immAlign);\n      }\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.F32: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64:\n      case TypeKind.F64: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV64x2, arg0, immOffset, immAlign);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_splat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_splat, builtin_v128_load_splat);\n\n// v128.load_ext<TFrom!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_ext(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var immAlign: i32;\n  var naturalAlign = type.byteSize;\n  if (numOperands == 3) {\n    immAlign = evaluateImmediateOffset(operands[2], compiler);\n    if (immAlign < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n  } else {\n    immAlign = naturalAlign;\n  }\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    if (immAlign > naturalAlign) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n      );\n      return module.unreachable();\n    }\n    if (!isPowerOf2(immAlign)) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_power_of_two,\n        operands[2].range, \"Alignment\"\n      );\n      return module.unreachable();\n    }\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_load(SIMDLoadOp.LoadI8ToI16x8, arg0, immOffset, immAlign);\n      case TypeKind.U8: return module.simd_load(SIMDLoadOp.LoadU8ToU16x8, arg0, immOffset, immAlign);\n      case TypeKind.I16: return module.simd_load(SIMDLoadOp.LoadI16ToI32x4, arg0, immOffset, immAlign);\n      case TypeKind.U16: return module.simd_load(SIMDLoadOp.LoadU16ToU32x4, arg0, immOffset, immAlign);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.simd_load(SIMDLoadOp.LoadI32ToI64x2, arg0, immOffset, immAlign);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.simd_load(SIMDLoadOp.LoadU32ToU64x2, arg0, immOffset, immAlign);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_ext\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_ext, builtin_v128_load_ext);\n\n// v128.add<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.AddI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.AddI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.AddI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.AddI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.AddI64x2\n            : BinaryOp.AddI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.AddF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.AddF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.add\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_add, builtin_v128_add);\n\n// v128.sub<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.SubI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.SubI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.SubI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.SubI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.SubI64x2\n            : BinaryOp.SubI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.SubF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.SubF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sub\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sub, builtin_v128_sub);\n\n// v128.mul<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_mul(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.MulI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.MulI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MulF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MulF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.mul\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_mul, builtin_v128_mul);\n\n// v128.div<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_div(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.DivF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.DivF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.div\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_div, builtin_v128_div);\n\n// v128.add_saturate<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add_saturate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.AddSatI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.AddSatU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.AddSatI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.AddSatU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.add_saturate\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_add_saturate, builtin_v128_add_saturate);\n\n// v128.sub_saturate<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub_saturate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.SubSatI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.SubSatU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.SubSatI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.SubSatU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sub_saturate\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sub_saturate, builtin_v128_sub_saturate);\n\n// v128.min<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_min(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.MinI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.MinU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.MinI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.MinU16x8, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.MinI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.MinU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MinF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MinF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.min\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_min, builtin_v128_min);\n\n// v128.max<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_max(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.MaxI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.MaxU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.MaxI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.MaxU16x8, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.MaxI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.MaxU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MaxF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MaxF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.max\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_max, builtin_v128_max);\n\n// v128.dot<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_dot(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.DotI16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.dot\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_dot, builtin_v128_dot);\n\n// v128.avgr<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_avgr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.U8:  return module.binary(BinaryOp.AvgrU8x16, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.AvgrU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.avgr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_avgr, builtin_v128_avgr);\n\n// v128.eq<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_eq(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n        case TypeKind.U8: return module.binary(BinaryOp.EqI8x16, arg0, arg1);\n        case TypeKind.I16:\n        case TypeKind.U16: return module.binary(BinaryOp.EqI16x8, arg0, arg1);\n        case TypeKind.I32:\n        case TypeKind.U32: return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          if (!compiler.options.isWasm64) {\n            return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n          }\n          break;\n        }\n        case TypeKind.F32: return module.binary(BinaryOp.EqF32x4, arg0, arg1);\n        case TypeKind.F64: return module.binary(BinaryOp.EqF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.eq\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_eq, builtin_v128_eq);\n\n// v128.ne<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ne(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n        case TypeKind.U8: return module.binary(BinaryOp.NeI8x16, arg0, arg1);\n        case TypeKind.I16:\n        case TypeKind.U16: return module.binary(BinaryOp.NeI16x8, arg0, arg1);\n        case TypeKind.I32:\n        case TypeKind.U32: return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          if (!compiler.options.isWasm64) {\n            return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n          }\n          break;\n        }\n        case TypeKind.F32: return module.binary(BinaryOp.NeF32x4, arg0, arg1);\n        case TypeKind.F64: return module.binary(BinaryOp.NeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ne\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ne, builtin_v128_ne);\n\n// v128.lt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_lt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.LtI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.LtU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.LtI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.LtU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.LtF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.LtF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.lt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_lt, builtin_v128_lt);\n\n// v128.le<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_le(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.LeI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.LeU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.LeI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.LeU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.LeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.LeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.le\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_le, builtin_v128_le);\n\n// v128.gt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_gt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.GtI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.GtU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.GtI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.GtU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.GtF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.GtF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.gt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_gt, builtin_v128_gt);\n\n// v128.ge<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ge(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.GeI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.GeU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.GeI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.GeU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.GeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.GeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ge\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ge, builtin_v128_ge);\n\n// v128.narrow<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_narrow(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.NarrowI16x8ToI8x16, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.NarrowU16x8ToU8x16, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.NarrowI32x4ToI16x8, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.NarrowU32x4ToU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.narrow\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_narrow, builtin_v128_narrow);\n\n// v128.neg<T!>(a: v128) -> v128\nfunction builtin_v128_neg(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.NegI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.NegI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.NegI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.NegI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.NegI64x2\n            : UnaryOp.NegI32x4,\n          arg0\n        );\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.NegF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NegF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.neg\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_neg, builtin_v128_neg);\n\n// v128.abs<T!>(a: v128) -> v128\nfunction builtin_v128_abs(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.AbsF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.AbsF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.abs\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_abs, builtin_v128_abs);\n\n// v128.sqrt<T!>(a: v128) -> v128\nfunction builtin_v128_sqrt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.SqrtF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SqrtF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sqrt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sqrt, builtin_v128_sqrt);\n\n// v128.convert<T!>(a: v128) -> v128\nfunction builtin_v128_convert(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I32: return module.unary(UnaryOp.ConvertI32x4ToF32x4, arg0);\n      case TypeKind.U32: return module.unary(UnaryOp.ConvertU32x4ToF32x4, arg0);\n      case TypeKind.I64: return module.unary(UnaryOp.ConvertI64x2ToF64x2, arg0);\n      case TypeKind.U64: return module.unary(UnaryOp.ConvertU64x2ToF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.convert\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_convert, builtin_v128_convert);\n\n// v128.trunc_sat<T!>(a: v128) -> v128\nfunction builtin_v128_trunc_sat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I32: return module.unary(UnaryOp.TruncSatF32x4ToI32x4, arg0);\n      case TypeKind.U32: return module.unary(UnaryOp.TruncSatF32x4ToU32x4, arg0);\n      case TypeKind.I64: return module.unary(UnaryOp.TruncSatF64x2ToI64x2, arg0);\n      case TypeKind.U64: return module.unary(UnaryOp.TruncSatF64x2ToU64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.trunc_sat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_trunc_sat, builtin_v128_trunc_sat);\n\n// v128.widen_low<T!>(a: v128) -> v128\nfunction builtin_v128_widen_low(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.WidenLowI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.WidenLowU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.WidenLowI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.WidenLowU16x8ToU32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.widen_low\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_widen_low, builtin_v128_widen_low);\n\n// v128.widen_high<T!>(a: v128) -> v128\nfunction builtin_v128_widen_high(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.WidenHighI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.WidenHighU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.WidenHighI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.WidenHighU16x8ToU32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.widen_high\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_widen_high, builtin_v128_widen_high);\n\n// v128.shl<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shl(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShlI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShlI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShlI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShlI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShlI64x2\n            : SIMDShiftOp.ShlI32x4,\n          arg0, arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shl\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shl, builtin_v128_shl);\n\n// v128.shr<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_shift(SIMDShiftOp.ShrI8x16, arg0, arg1);\n      case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShrU8x16, arg0, arg1);\n      case TypeKind.I16: return module.simd_shift(SIMDShiftOp.ShrI16x8, arg0, arg1);\n      case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShrU16x8, arg0, arg1);\n      case TypeKind.I32: return module.simd_shift(SIMDShiftOp.ShrI32x4, arg0, arg1);\n      case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShrU32x4, arg0, arg1);\n      case TypeKind.I64: return module.simd_shift(SIMDShiftOp.ShrI64x2, arg0, arg1);\n      case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShrU64x2, arg0, arg1);\n      case TypeKind.ISIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShrI64x2\n            : SIMDShiftOp.ShrI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.USIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShrU64x2\n            : SIMDShiftOp.ShrU32x4,\n          arg0, arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shr, builtin_v128_shr);\n\nfunction builtin_v128_bitwise_binary(ctx: BuiltinContext, op: BinaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.binary(op, arg0, arg1);\n}\n\n// v128.and(a: v128, b: v128) -> v128\nfunction builtin_v128_and(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.AndV128);\n}\nbuiltins.set(BuiltinNames.v128_and, builtin_v128_and);\n\n// v128.or(a: v128, b: v128) -> v128\nfunction builtin_v128_or(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.OrV128);\n}\nbuiltins.set(BuiltinNames.v128_or, builtin_v128_or);\n\n// v128.xor(a: v128, b: v128) -> v128\nfunction builtin_v128_xor(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.XorV128);\n}\nbuiltins.set(BuiltinNames.v128_xor, builtin_v128_xor);\n\n// v128.andnot(a: v128, b: v128) -> v128\nfunction builtin_v128_andnot(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.AndNotV128);\n}\nbuiltins.set(BuiltinNames.v128_andnot, builtin_v128_andnot);\n\nfunction builtin_v128_bitwise_unary(ctx: BuiltinContext, op: UnaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.unary(op, arg0);\n}\n\n// v128.not(a: v128) -> v128\nfunction builtin_v128_not(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_unary(ctx, UnaryOp.NotV128);\n}\nbuiltins.set(BuiltinNames.v128_not, builtin_v128_not);\n\nfunction builtin_v128_bitwise_ternary(ctx: BuiltinContext, op: SIMDTernaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.simd_ternary(op, arg0, arg1, arg2);\n}\n\n// v128.bitselect(v1: v128, v2: v128, c: v128) -> v128\nfunction builtin_v128_bitselect(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_ternary(ctx, SIMDTernaryOp.Bitselect);\n}\nbuiltins.set(BuiltinNames.v128_bitselect, builtin_v128_bitselect);\n\n// v128.any_true<T!>(a: v128) -> bool\nfunction builtin_v128_any_true(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.bool;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.AnyTrueI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.AnyTrueI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.AnyTrueI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.AnyTrueI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.AnyTrueI64x2\n            : UnaryOp.AnyTrueI32x4,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.any_true\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_any_true, builtin_v128_any_true);\n\n// v128.all_true<T!>(a: v128) -> bool\nfunction builtin_v128_all_true(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.bool;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.AllTrueI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.AllTrueI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.AllTrueI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.AllTrueI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.AllTrueI64x2\n            : UnaryOp.AllTrueI32x4,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.all_true\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_all_true, builtin_v128_all_true);\n\n// v128.qfma<T!>(a: v128, b: v128, c: v128) -> v128\nfunction builtin_v128_qfma(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMAF32x4, arg0, arg1, arg2);\n      case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMAF64x2, arg0, arg1, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.qfma\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_qfma, builtin_v128_qfma);\n\n// v128.qfms<T!>(a: v128, b: v128, c: v128) -> v128\nfunction builtin_v128_qfms(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMSF32x4, arg0, arg1, arg2);\n      case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMSF64x2, arg0, arg1, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.qfms\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_qfms, builtin_v128_qfms);\n\n// === Internal runtime =======================================================================\n\n// __visit_globals(cookie: u32) -> void\nfunction builtin_visit_globals(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1) // cookie\n  ) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n  compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n  compiler.currentType = Type.void;\n  return module.call(BuiltinNames.visit_globals, [ arg0 ], NativeType.None);\n}\nbuiltins.set(BuiltinNames.visit_globals, builtin_visit_globals);\n\n// __visit_members(ref: usize, cookie: u32) -> void\nfunction builtin_visit_members(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2) // ref, cookie\n  ) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n  compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n  compiler.currentType = Type.void;\n  return module.call(BuiltinNames.visit_members, [ arg0, arg1 ], NativeType.None);\n}\nbuiltins.set(BuiltinNames.visit_members, builtin_visit_members);\n\n// === Inline assembler =======================================================================\n\n// TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n//   add, sub, mul, div_s, div_u, rem_s, rem_u\n//   and, or, xor, shl, shr_u, shr_s\n//   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n// i32.clz -> clz<i32>\nfunction builtin_i32_clz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_clz(ctx);\n}\nbuiltins.set(BuiltinNames.i32_clz, builtin_i32_clz);\n\n// i64.clz -> clz<i64>\nfunction builtin_i64_clz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_clz(ctx);\n}\nbuiltins.set(BuiltinNames.i64_clz, builtin_i64_clz);\n\n// i32.ctz -> ctz<i32>\nfunction builtin_i32_ctz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_ctz(ctx);\n}\nbuiltins.set(BuiltinNames.i32_ctz, builtin_i32_ctz);\n\n// i64.ctz -> ctz<i64>\nfunction builtin_i64_ctz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_ctz(ctx);\n}\nbuiltins.set(BuiltinNames.i64_ctz, builtin_i64_ctz);\n\n// i32.popcnt -> popcnt<i32>\nfunction builtin_i32_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i32_popcnt, builtin_i32_popcnt);\n\n// i64.popcnt -> popcnt<i64>\nfunction builtin_i64_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i64_popcnt, builtin_i64_popcnt);\n\n// i32.rotl -> rotl<i32>\nfunction builtin_i32_rotl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rotl(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rotl, builtin_i32_rotl);\n\n// i64.rotl -> rotl<i64>\nfunction builtin_i64_rotl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rotl(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rotl, builtin_i64_rotl);\n\n// i32.rotr -> rotr<i32>\nfunction builtin_i32_rotr(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rotr(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rotr, builtin_i32_rotr);\n\n// i64.rotr -> rotr<i64>\nfunction builtin_i64_rotr(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rotr(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rotr, builtin_i64_rotr);\n\n// f32.abs -> abs<f32>\nfunction builtin_f32_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f32_abs, builtin_f32_abs);\n\n// f64.abs -> abs<f64>\nfunction builtin_f64_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f64_abs, builtin_f64_abs);\n\n// f32.max -> max<f32>\nfunction builtin_f32_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_max(ctx);\n}\nbuiltins.set(BuiltinNames.f32_max, builtin_f32_max);\n\n// f64.max -> max<f64>\nfunction builtin_f64_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_max(ctx);\n}\nbuiltins.set(BuiltinNames.f64_max, builtin_f64_max);\n\n// f32.min -> min<f32>\nfunction builtin_f32_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_min(ctx);\n}\nbuiltins.set(BuiltinNames.f32_min, builtin_f32_min);\n\n// f64.min -> min<f64>\nfunction builtin_f64_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_min(ctx);\n}\nbuiltins.set(BuiltinNames.f64_min, builtin_f64_min);\n\n// f32.ceil -> ceil<f32>\nfunction builtin_f32_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f32_ceil, builtin_f32_ceil);\n\n// f64.ceil -> ceil<f64>\nfunction builtin_f64_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f64_ceil, builtin_f64_ceil);\n\n// f32.floor -> floor<f32>\nfunction builtin_f32_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f32_floor, builtin_f32_floor);\n\n// f64.floor -> floor<f64>\nfunction builtin_f64_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f64_floor, builtin_f64_floor);\n\n// f32.copysign -> copysign<f32>\nfunction builtin_f32_copysign(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_copysign(ctx);\n}\nbuiltins.set(BuiltinNames.f32_copysign, builtin_f32_copysign);\n\n// f64.copysign -> copysign<f64>\nfunction builtin_f64_copysign(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_copysign(ctx);\n}\nbuiltins.set(BuiltinNames.f64_copysign, builtin_f64_copysign);\n\n// f32.nearest -> nearest<f32>\nfunction builtin_f32_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f32_nearest, builtin_f32_nearest);\n\n// f64.nearest -> nearest<f64>\nfunction builtin_f64_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f64_nearest, builtin_f64_nearest);\n\n// i32.reinterpret_f32 -> reinterpret<i32>\nfunction builtin_i32_reinterpret_f32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.i32_reinterpret_f32, builtin_i32_reinterpret_f32);\n\n// i64.reinterpret_f64 -> reinterpret<i64>\nfunction builtin_i64_reinterpret_f64(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.i64_reinterpret_f64, builtin_i64_reinterpret_f64);\n\n// f32.reinterpret_i32 -> reinterpret<f32>\nfunction builtin_f32_reinterpret_i32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.f32_reinterpret_i32, builtin_f32_reinterpret_i32);\n\n// f64.reinterpret_i64 -> reinterpret<f64>\nfunction builtin_f64_reinterpret_i64(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.f64_reinterpret_i64, builtin_f64_reinterpret_i64);\n\n// f32.sqrt -> sqrt<f32>\nfunction builtin_f32_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f32_sqrt, builtin_f32_sqrt);\n\n// f64.sqrt -> sqrt<f64>\nfunction builtin_f64_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f64_sqrt, builtin_f64_sqrt);\n\n// f32.trunc -> trunc<f32>\nfunction builtin_f32_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f32_trunc, builtin_f32_trunc);\n\n// f64.trunc -> trunc<f64>\nfunction builtin_f64_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f64_trunc, builtin_f64_trunc);\n\n// i32.load8_s -> <i32>load<i8>\nfunction builtin_i32_load8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load8_s, builtin_i32_load8_s);\n\n// i32.load8_u -> <i32>load<u8>\nfunction builtin_i32_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load8_u, builtin_i32_load8_u);\n\n// i32.load16_s -> <i32>load<i16>\nfunction builtin_i32_load16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load16_s, builtin_i32_load16_s);\n\n// i32.load16_u -> <i32>load<u16>\nfunction builtin_i32_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load16_u, builtin_i32_load16_u);\n\n// i32.load -> <i32>load<i32>\nfunction builtin_i32_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load, builtin_i32_load);\n\n// i64.load8_s -> <i64>load<i8>\nfunction builtin_i64_load8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load8_s, builtin_i64_load8_s);\n\n// i64.load8_u -> <i64>load<u8>\nfunction builtin_i64_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load8_u, builtin_i64_load8_u);\n\n// i64.load16_s -> <i64>load<i16>\nfunction builtin_i64_load16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load16_s, builtin_i64_load16_s);\n\n// i64.load16_u -> <i64>load<u16>\nfunction builtin_i64_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load16_u, builtin_i64_load16_u);\n\n// i64.load32_s -> <i64>load<i32>\nfunction builtin_i64_load32_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load32_s, builtin_i64_load32_s);\n\n// i64.load32_u -> <i64>load<u32>\nfunction builtin_i64_load32_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load32_u, builtin_i64_load32_u);\n\n// i64.load -> <i64>load<i64>\nfunction builtin_i64_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load, builtin_i64_load);\n\n// f32.load -> <f32>load<f32>\nfunction builtin_f32_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.f32_load, builtin_f32_load);\n\n// f64.load -> <f64>load<f64>\nfunction builtin_f64_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.f64_load, builtin_f64_load);\n\n// i32.store8 -> store<i8 from i32>\nfunction builtin_i32_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store8, builtin_i32_store8);\n\n// i32.store16 -> store<i16 from i32>\nfunction builtin_i32_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store16, builtin_i32_store16);\n\n// i32.store -> store<i32 from i32>\nfunction builtin_i32_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store, builtin_i32_store);\n\n// i64.store8 -> store<i8 from i64>\nfunction builtin_i64_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store8, builtin_i64_store8);\n\n// i64.store16 -> store<i16 from i64>\nfunction builtin_i64_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store16, builtin_i64_store16);\n\n// i64.store32 -> store<i32 from i64>\nfunction builtin_i64_store32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store32, builtin_i64_store32);\n\n// i64.store -> store<i64 from i64>\nfunction builtin_i64_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store, builtin_i64_store);\n\n// f32.store -> store<f32 from f64>\nfunction builtin_f32_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.f32_store, builtin_f32_store);\n\n// f64.store -> store<f64 from f64>\nfunction builtin_f64_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.f64_store, builtin_f64_store);\n\n// i32.atomic.load8_u -> <i32>atomic.load<u8>\nfunction builtin_i32_atomic_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load8_u, builtin_i32_atomic_load8_u);\n\n// i32.atomic.load16_u -> <i32>atomic.load<u16>\nfunction builtin_i32_atomic_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load16_u, builtin_i32_atomic_load16_u);\n\n// i32.atomic.load -> <i32>atomic.load<i32>\nfunction builtin_i32_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load, builtin_i32_atomic_load);\n\n// i64.atomic.load8_u -> <i64>atomic.load<u8>\nfunction builtin_i64_atomic_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load8_u, builtin_i64_atomic_load8_u);\n\n// i64.atomic.load16_u -> <i64>atomic.load<u16>\nfunction builtin_i64_atomic_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load16_u, builtin_i64_atomic_load16_u);\n\n// i64.atomic.load32_u -> <i64>atomic.load<u32>\nfunction builtin_i64_atomic_load32_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load32_u, builtin_i64_atomic_load32_u);\n\n// i64.atomic.load -> <i64>atomic.load<i64>\nfunction builtin_i64_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load, builtin_i64_atomic_load);\n\n// i32.atomic.store8 -> atomic.store<i8 from i32>\nfunction builtin_i32_atomic_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store8, builtin_i32_atomic_store8);\n\n// i32.atomic.store16 -> atomic.store<i16 from i32>\nfunction builtin_i32_atomic_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store16, builtin_i32_atomic_store16);\n\n// i32.atomic.store -> atomic.store<i32 from i32>\nfunction builtin_i32_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store, builtin_i32_atomic_store);\n\n// i64.atomic.store8 -> atomic.store<i8 from i64>\nfunction builtin_i64_atomic_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store8, builtin_i64_atomic_store8);\n\n// i64.atomic.store16 -> atomic.store<i16 from i64>\nfunction builtin_i64_atomic_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store16, builtin_i64_atomic_store16);\n\n// i64.atomic.store32 -> atomic.store<i32 from i64>\nfunction builtin_i64_atomic_store32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store32, builtin_i64_atomic_store32);\n\n// i64.atomic.store -> atomic.store<i64 from i64>\nfunction builtin_i64_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store, builtin_i64_atomic_store);\n\n// i32.atomic.rmw8.add_u -> <i32>atomic.add<u8 from i32>\nfunction builtin_i32_atomic_rmw8_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_add_u, builtin_i32_atomic_rmw8_add_u);\n\n// i32.atomic.rmw16.add_u -> <i32>atomic.add<u16 from i32>\nfunction builtin_i32_atomic_rmw16_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_add_u, builtin_i32_atomic_rmw16_add_u);\n\n// i32.atomic.rmw.add -> <i32>atomic.add<i32 from i32>\nfunction builtin_i32_atomic_rmw_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_add, builtin_i32_atomic_rmw_add);\n\n// i64.atomic.rmw8.add_u -> <i64>atomic.add<u8 from i64>\nfunction builtin_i64_atomic_rmw8_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_add_u, builtin_i64_atomic_rmw8_add_u);\n\n// i64.atomic.rmw16.add_u -> <i64>atomic.add<u16 from i64>\nfunction builtin_i64_atomic_rmw16_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_add_u, builtin_i64_atomic_rmw16_add_u);\n\n// i64.atomic.rmw32.add_u -> <i64>atomic.add<u32 from i64>\nfunction builtin_i64_atomic_rmw32_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_add_u, builtin_i64_atomic_rmw32_add_u);\n\n// i64.atomic.rmw.add -> <i64>atomic.add<i64 from i64>\nfunction builtin_i64_atomic_rmw_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_add, builtin_i64_atomic_rmw_add);\n\n// i32.atomic.rmw8.sub_u -> <i32>atomic.sub<u8 from i32>\nfunction builtin_i32_atomic_rmw8_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_sub_u, builtin_i32_atomic_rmw8_sub_u);\n\n// i32.atomic.rmw16.sub_u -> <i32>atomic.sub<u16 from i32>\nfunction builtin_i32_atomic_rmw16_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_sub_u, builtin_i32_atomic_rmw16_sub_u);\n\n// i32.atomic.rmw.sub -> <i32>atomic.sub<i32 from i32>\nfunction builtin_i32_atomic_rmw_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_sub, builtin_i32_atomic_rmw_sub);\n\n// i64.atomic.rmw8.sub_u -> <i64>atomic.sub<u8 from i64>\nfunction builtin_i64_atomic_rmw8_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_sub_u, builtin_i64_atomic_rmw8_sub_u);\n\n// i64.atomic.rmw16.sub_u -> <i64>atomic.sub<u16 from i64>\nfunction builtin_i64_atomic_rmw16_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_sub_u, builtin_i64_atomic_rmw16_sub_u);\n\n// i64.atomic.rmw32.sub_u -> <i64>atomic.sub<u32 from i64>\nfunction builtin_i64_atomic_rmw32_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_sub_u, builtin_i64_atomic_rmw32_sub_u);\n\n// i64.atomic.rmw.sub -> <i64>atomic.sub<i64 from i64>\nfunction builtin_i64_atomic_rmw_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_sub, builtin_i64_atomic_rmw_sub);\n\n// i32.atomic.rmw8.and_u -> <i32>atomic.and<u8 from i32>\nfunction builtin_i32_atomic_rmw8_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_and_u, builtin_i32_atomic_rmw8_and_u);\n\n// i32.atomic.rmw16.and_u -> <i32>atomic.and<u16 from i32>\nfunction builtin_i32_atomic_rmw16_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_and_u, builtin_i32_atomic_rmw16_and_u);\n\n// i32.atomic.rmw.and -> <i32>atomic.and<i32 from i32>\nfunction builtin_i32_atomic_rmw_and(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_and, builtin_i32_atomic_rmw_and);\n\n// i64.atomic.rmw8.and_u -> <i64>atomic.and<u8 from i64>\nfunction builtin_i64_atomic_rmw8_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_and_u, builtin_i64_atomic_rmw8_and_u);\n\n// i64.atomic.rmw16.and_u -> <i64>atomic.and<u16 from i64>\nfunction builtin_i64_atomic_rmw16_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_and_u, builtin_i64_atomic_rmw16_and_u);\n\n// i64.atomic.rmw32.and_u -> <i64>atomic.and<u32 from i64>\nfunction builtin_i64_atomic_rmw32_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_and_u, builtin_i64_atomic_rmw32_and_u);\n\n// i64.atomic.rmw.and -> <i64>atomic.and<i64 from i64>\nfunction builtin_i64_atomic_rmw_and(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_and, builtin_i64_atomic_rmw_and);\n\n// i32.atomic.rmw8.or_u -> <i32>atomic.or<u8 from i32>\nfunction builtin_i32_atomic_rmw8_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_or_u, builtin_i32_atomic_rmw8_or_u);\n\n// i32.atomic.rmw16.or_u -> <i32atomic.or<u16 from i32>\nfunction builtin_i32_atomic_rmw16_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_or_u, builtin_i32_atomic_rmw16_or_u);\n\n// i32.atomic.rmw.or -> <i32>atomic.or<i32 from i32>\nfunction builtin_i32_atomic_rmw_or(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_or, builtin_i32_atomic_rmw_or);\n\n// i64.atomic.rmw8.or_u -> <i64>atomic.or<u8 from i64>\nfunction builtin_i64_atomic_rmw8_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_or_u, builtin_i64_atomic_rmw8_or_u);\n\n// i64.atomic.rmw16.or_u -> <i64>atomic.or<u16 from i64>\nfunction builtin_i64_atomic_rmw16_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_or_u, builtin_i64_atomic_rmw16_or_u);\n\n// i64.atomic.rmw32.or_u -> <i64>atomic.or<u32 from i64>\nfunction builtin_i64_atomic_rmw32_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_or_u, builtin_i64_atomic_rmw32_or_u);\n\n// i64.atomic.rmw.or -> <i64>atomic.or<i64 from i64>\nfunction builtin_i64_atomic_rmw_or(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_or, builtin_i64_atomic_rmw_or);\n\n// i32.atomic.rmw8.xor_u -> <i32>atomic.xor<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_xor_u, builtin_i32_atomic_rmw8_xor_u);\n\n// i32.atomic.rmw16.xor_u -> <i32>atomic.xor<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_xor_u, builtin_i32_atomic_rmw16_xor_u);\n\n// i32.atomic.rmw.xor -> <i32>atomic.xor<i32 from i32>\nfunction builtin_i32_atomic_rmw_xor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_xor, builtin_i32_atomic_rmw_xor);\n\n// i64.atomic.rmw8.xor_u -> <i64>atomic.xor<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_xor_u, builtin_i64_atomic_rmw8_xor_u);\n\n// i64.atomic.rmw16.xor_u -> <i64>atomic.xor<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_xor_u, builtin_i64_atomic_rmw16_xor_u);\n\n// i64.atomic.rmw32.xor_u -> <i64>atomic.xor<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_xor_u, builtin_i64_atomic_rmw32_xor_u);\n\n// i64.atomic.rmw.xor -> <i64>atomic.xor<i64 from i64>\nfunction builtin_i64_atomic_rmw_xor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_xor, builtin_i64_atomic_rmw_xor);\n\n// i32.atomic.rmw8.xchg_u -> <i32>atomic.xchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_xchg_u, builtin_i32_atomic_rmw8_xchg_u);\n\n// i32.atomic.rmw16.xchg_u -> <i32>atomic.xchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_xchg_u, builtin_i32_atomic_rmw16_xchg_u);\n\n// i32.atomic.rmw.xchg -> <i32>atomic.xchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_xchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_xchg, builtin_i32_atomic_rmw_xchg);\n\n// i64.atomic.rmw8.xchg_u -> <i64>atomic.xchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_xchg_u, builtin_i64_atomic_rmw8_xchg_u);\n\n// i64.atomic.rmw16.xchg_u -> <i64>atomic.xchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_xchg_u, builtin_i64_atomic_rmw16_xchg_u);\n\n// i64.atomic.rmw32.xchg_u -> <i64>atomic.xchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_xchg_u, builtin_i64_atomic_rmw32_xchg_u);\n\n// i64.atomic.rmw.xchg -> <i64>atomic.xchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_xchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_xchg, builtin_i64_atomic_rmw_xchg);\n\n// i32.atomic.rmw8.cmpxchg_u -> <i32>atomic.cmpxchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_cmpxchg_u, builtin_i32_atomic_rmw8_cmpxchg_u);\n\n// i32.atomic.rmw16.cmpxchg_u -> <i32>atomic.cmpxchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_cmpxchg_u, builtin_i32_atomic_rmw16_cmpxchg_u);\n\n// i32.atomic.rmw.cmpxchg -> <i32>atomic.cmpxchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_cmpxchg, builtin_i32_atomic_rmw_cmpxchg);\n\n// i64.atomic.rmw8.cmpxchg_u -> <i64>atomic.cmpxchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_cmpxchg_u, builtin_i64_atomic_rmw8_cmpxchg_u);\n\n// i64.atomic.rmw16.cmpxchg_u -> <i64>atomic.cmpxchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_cmpxchg_u, builtin_i64_atomic_rmw16_cmpxchg_u);\n\n// i64.atomic.rmw32.cmpxchg_u -> <i64>atomic.cmpxchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_cmpxchg_u, builtin_i64_atomic_rmw32_cmpxchg_u);\n\n// i64.atomic.rmw.cmpxchg -> <i64>atomic.cmpxchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_cmpxchg, builtin_i64_atomic_rmw_cmpxchg);\n\n// i32.wait -> atomic.wait<i32>\nfunction builtin_i32_wait(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  return builtin_atomic_wait(ctx);\n}\nbuiltins.set(BuiltinNames.i32_wait, builtin_i32_wait);\n\n// i64.wait -> atomic.wait<i64>\nfunction builtin_i64_wait(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_wait(ctx);\n}\nbuiltins.set(BuiltinNames.i64_wait, builtin_i64_wait);\n\n// v128.load -> load<v128>\nfunction builtin_v128_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.v128 ];\n  ctx.contextualType = Type.v128;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load, builtin_v128_load);\n\n// v128.store -> store<v128 from v128>\nfunction builtin_v128_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.v128 ];\n  ctx.contextualType = Type.v128;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.v128_store, builtin_v128_store);\n\n// i8x16_splat -> v128.splat<i8>\nfunction builtin_i8x16_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_splat, builtin_i8x16_splat);\n\n// i8x16.extract_lane_s -> <i32>v128.extract_lane<i8>\nfunction builtin_i8x16_extract_lane_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_extract_lane_s, builtin_i8x16_extract_lane_s);\n\n// i8x16.extract_lane_u -> <i32>v128.extract_lane<u8>\nfunction builtin_i8x16_extract_lane_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_extract_lane_u, builtin_i8x16_extract_lane_u);\n\n// i8x16.replace_lane -> v128.replace_lane<i8>\nfunction builtin_i8x16_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_replace_lane, builtin_i8x16_replace_lane);\n\n// i8x16.add -> v128.add<i8>\nfunction builtin_i8x16_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add, builtin_i8x16_add);\n\n// i8x16.sub -> v128.sub<i8>\nfunction builtin_i8x16_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub, builtin_i8x16_sub);\n\n// i8x16.mul -> v128.mul<i8>\nfunction builtin_i8x16_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_mul, builtin_i8x16_mul);\n\n// i8x16.min_s -> v128.min<i8>\nfunction builtin_i8x16_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_min_s, builtin_i8x16_min_s);\n\n// i8x16.min_u -> v128.min<u8>\nfunction builtin_i8x16_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_min_u, builtin_i8x16_min_u);\n\n// i8x16.max_s -> v128.max<i8>\nfunction builtin_i8x16_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_max_s, builtin_i8x16_max_s);\n\n// i8x16.max_u -> v128.max<u8>\nfunction builtin_i8x16_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_max_u, builtin_i8x16_max_u);\n\n// i8x16.avgr_u -> v128.avgr<u8>\nfunction builtin_i8x16_avgr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_avgr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_avgr_u, builtin_i8x16_avgr_u);\n\n// i8x16.neg -> v128.neg<i8>\nfunction builtin_i8x16_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_neg, builtin_i8x16_neg);\n\n// i8x16.add_saturate_s -> v128.add_saturate<i8>\nfunction builtin_i8x16_add_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add_saturate_s, builtin_i8x16_add_saturate_s);\n\n// i8x16.add_saturate_u -> v128.add_saturate<u8>\nfunction builtin_i8x16_add_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add_saturate_u, builtin_i8x16_add_saturate_u);\n\n// i8x16.sub_saturate_s -> v128.sub_saturate<i8>\nfunction builtin_i8x16_sub_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub_saturate_s, builtin_i8x16_sub_saturate_s);\n\n// i8x16.sub_saturate_u -> v128.sub_saturate<u8>\nfunction builtin_i8x16_sub_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub_saturate_u, builtin_i8x16_sub_saturate_u);\n\n// i8x16.shl -> v128.shl<i8>\nfunction builtin_i8x16_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shl, builtin_i8x16_shl);\n\n// i8x16.shr_s -> v128.shr<i8>\nfunction builtin_i8x16_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shr_s, builtin_i8x16_shr_s);\n\n// i8x16.shr_u -> v128.shr<u8>\nfunction builtin_i8x16_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shr_u, builtin_i8x16_shr_u);\n\n// i8x16.any_true -> v128.any_true<i8>\nfunction builtin_i8x16_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_any_true, builtin_i8x16_any_true);\n\n// i8x16.all_true -> v128.all_true<i8>\nfunction builtin_i8x16_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_all_true, builtin_i8x16_all_true);\n\n// i8x16.eq -> v128.eq<i8>\nfunction builtin_i8x16_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_eq, builtin_i8x16_eq);\n\n// i8x16.ne -> v128.ne<i8>\nfunction builtin_i8x16_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ne, builtin_i8x16_ne);\n\n// i8x16.lt_s -> v128.lt<i8>\nfunction builtin_i8x16_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_lt_s, builtin_i8x16_lt_s);\n\n// i8x16.lt_u -> v128.lt<u8>\nfunction builtin_i8x16_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_lt_u, builtin_i8x16_lt_u);\n\n// i8x16.le_s -> v128.le<i8>\nfunction builtin_i8x16_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_le_s, builtin_i8x16_le_s);\n\n// i8x16.le_u -> v128.le<u8>\nfunction builtin_i8x16_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_le_u, builtin_i8x16_le_u);\n\n// i8x16.gt_s -> v128.gt<i8>\nfunction builtin_i8x16_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_gt_s, builtin_i8x16_gt_s);\n\n// i8x16.gt_u -> v128.gt<u8>\nfunction builtin_i8x16_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_gt_u, builtin_i8x16_gt_u);\n\n// i8x16.ge_s -> v128.ge<i8>\nfunction builtin_i8x16_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ge_s, builtin_i8x16_ge_s);\n\n// i8x16.ge_u -> v128.ge<u8>\nfunction builtin_i8x16_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ge_u, builtin_i8x16_ge_u);\n\n// i8x16.narrow_i16x8_s -> v128.narrow<i16>\nfunction builtin_i8x16_narrow_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_narrow_i16x8_s, builtin_i8x16_narrow_i16x8_s);\n\n// i8x16.narrow_i16x8_u -> v128.narrow<u16>\nfunction builtin_i8x16_narrow_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_narrow_i16x8_u, builtin_i8x16_narrow_i16x8_u);\n\n// i16x8.splat -> v128.splat<i16>\nfunction builtin_i16x8_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_splat, builtin_i16x8_splat);\n\n// i16x8.extract_lane_s -> v128.extract_lane<i16>\nfunction builtin_i16x8_extract_lane_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extract_lane_s, builtin_i16x8_extract_lane_s);\n\n// i16x8..extract_lane_u -> v128.extract_lane<u16>\nfunction builtin_i16x8_extract_lane_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extract_lane_u, builtin_i16x8_extract_lane_u);\n\n// i16x8.replace_lane -> v128.replace_lane<i16>\nfunction builtin_i16x8_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_replace_lane, builtin_i16x8_replace_lane);\n\n// i16x8.add -> v128.add<i16>\nfunction builtin_i16x8_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add, builtin_i16x8_add);\n\n// i16x8.sub -> v128.sub<i16>\nfunction builtin_i16x8_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub, builtin_i16x8_sub);\n\n// i16x8.mul -> v128.mul<i16>\nfunction builtin_i16x8_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_mul, builtin_i16x8_mul);\n\n// i16x8.min_s -> v128.min<i16>\nfunction builtin_i16x8_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_min_s, builtin_i16x8_min_s);\n\n// i16x8.min_u -> v128.min<u16>\nfunction builtin_i16x8_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_min_u, builtin_i16x8_min_u);\n\n// i16x8.max_s -> v128.max<i16>\nfunction builtin_i16x8_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_max_s, builtin_i16x8_max_s);\n\n// i16x8.max_u -> v128.max<u16>\nfunction builtin_i16x8_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_max_u, builtin_i16x8_max_u);\n\n// i16x8.avgr_u -> v128.avgr<u16>\nfunction builtin_i16x8_avgr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_avgr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_avgr_u, builtin_i16x8_avgr_u);\n\n// i16x8.neg -> v128.neg<i16>\nfunction builtin_i16x8_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_neg, builtin_i16x8_neg);\n\n// i16x8.add_saturate_s -> v128.add_saturate<i16>\nfunction builtin_i16x8_add_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add_saturate_s, builtin_i16x8_add_saturate_s);\n\n// i16x8.add_saturate_u -> v128.add_saturate<u16>\nfunction builtin_i16x8_add_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add_saturate_u, builtin_i16x8_add_saturate_u);\n\n// i16x8.sub_saturate_s -> v128.sub_saturate<i16>\nfunction builtin_i16x8_sub_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub_saturate_s, builtin_i16x8_sub_saturate_s);\n\n// i16x8.sub_saturate_u -> v128.sub_saturate<u16>\nfunction builtin_i16x8_sub_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub_saturate_u, builtin_i16x8_sub_saturate_u);\n\n// i16x8.shl -> v128.shl<i16>\nfunction builtin_i16x8_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shl, builtin_i16x8_shl);\n\n// i16x8.shr_s -> v128.shr<i16>\nfunction builtin_i16x8_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shr_s, builtin_i16x8_shr_s);\n\n// i16x8.shr_u -> v128.shr<u16>\nfunction builtin_i16x8_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shr_u, builtin_i16x8_shr_u);\n\n// i16x8.any_true -> v128.any_true<i16>\nfunction builtin_i16x8_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_any_true, builtin_i16x8_any_true);\n\n// i16x8.all_true -> v128.all_true<i16>\nfunction builtin_i16x8_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_all_true, builtin_i16x8_all_true);\n\n// i16x8.eq -> v128.eq<i16>\nfunction builtin_i16x8_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_eq, builtin_i16x8_eq);\n\n// i16x8.ne -> v128.ne<i16>\nfunction builtin_i16x8_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ne, builtin_i16x8_ne);\n\n// i16x8.lt_s -> v128.lt<i16>\nfunction builtin_i16x8_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_lt_s, builtin_i16x8_lt_s);\n\n// i16x8.lt_u -> v128.lt<u16>\nfunction builtin_i16x8_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_lt_u, builtin_i16x8_lt_u);\n\n// i16x8.le_s -> v128.le<i16>\nfunction builtin_i16x8_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_le_s, builtin_i16x8_le_s);\n\n// i16x8.le_u -> v128.le<u16>\nfunction builtin_i16x8_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_le_u, builtin_i16x8_le_u);\n\n// i16x8.gt_s -> v128.gt<i16>\nfunction builtin_i16x8_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_gt_s, builtin_i16x8_gt_s);\n\n// i16x8.gt_u -> v128.gt<u16>\nfunction builtin_i16x8_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_gt_u, builtin_i16x8_gt_u);\n\n// i16x8.ge_s -> v128.ge<i16>\nfunction builtin_i16x8_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ge_s, builtin_i16x8_ge_s);\n\n// i16x8.ge_u -> v128.ge<u16>\nfunction builtin_i16x8_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ge_u, builtin_i16x8_ge_u);\n\n// i16x8.narrow_i32x4_s -> v128.narrow<i32>\nfunction builtin_i16x8_narrow_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_narrow_i32x4_s, builtin_i16x8_narrow_i32x4_s);\n\n// i16x8.narrow_i32x4_u -> v128.narrow<u32>\nfunction builtin_i16x8_narrow_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_narrow_i32x4_u, builtin_i16x8_narrow_i32x4_u);\n\n// i16x8.widen_low_i8x16_s -> v128.widen_low<i8>\nfunction builtin_i16x8_widen_low_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_low_i8x16_s, builtin_i16x8_widen_low_i8x16_s);\n\n// i16x8.widen_low_i8x16_u -> v128.widen_low<u8>\nfunction builtin_i16x8_widen_low_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_low_i8x16_u, builtin_i16x8_widen_low_i8x16_u);\n\n// i16x8.widen_high_i8x16_s -> v128.widen_high<i8>\nfunction builtin_i16x8_widen_high_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_high_i8x16_s, builtin_i16x8_widen_high_i8x16_s);\n\n// i16x8.widen_high_i8x16_u -> v128.widen_high<u8>\nfunction builtin_i16x8_widen_high_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_high_i8x16_u, builtin_i16x8_widen_high_i8x16_u);\n\n// i16x8.load8x8_s -> v128.load_ext<i8>\nfunction builtin_i16x8_load8x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_load8x8_s, builtin_i16x8_load8x8_s);\n\n// i16x8.load8x8_u -> v128.load_ext<u8>\nfunction builtin_i16x8_load8x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_load8x8_u, builtin_i16x8_load8x8_u);\n\n// i32x4.splat -> v128.splat<i32>\nfunction builtin_i32x4_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_splat, builtin_i32x4_splat);\n\n// i32x4.extract_lane -> <i32>v128.extract_lane<i32>\nfunction builtin_i32x4_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extract_lane, builtin_i32x4_extract_lane);\n\n// i32x4.replace_lane -> v128.replace_lane<i32>\nfunction builtin_i32x4_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_replace_lane, builtin_i32x4_replace_lane);\n\n// i32x4.add -> v128.add<i32>\nfunction builtin_i32x4_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_add, builtin_i32x4_add);\n\n// i32x4.sub -> v128.sub<i32>\nfunction builtin_i32x4_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_sub, builtin_i32x4_sub);\n\n// i32x4.mul -> v128.mul<i32>\nfunction builtin_i32x4_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_mul, builtin_i32x4_mul);\n\n// i32x4.min_s -> v128.min<i32>\nfunction builtin_i32x4_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_min_s, builtin_i32x4_min_s);\n\n// i32x4.min_u -> v128.min<u32>\nfunction builtin_i32x4_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_min_u, builtin_i32x4_min_u);\n\n// i32x4.max_s -> v128.max<i32>\nfunction builtin_i32x4_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_max_s, builtin_i32x4_max_s);\n\n// i32x4.max_u -> v128.max<u32>\nfunction builtin_i32x4_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_max_u, builtin_i32x4_max_u);\n\n// i32x4.dot_i16x8_s -> v128.dot<i16>\nfunction builtin_i32x4_dot_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_dot(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_dot_i16x8_s, builtin_i32x4_dot_i16x8_s);\n\n// i32x4.neg -> v128.neg<i32>\nfunction builtin_i32x4_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_neg, builtin_i32x4_neg);\n\n// i32x4.shl -> v128.shl<i32>\nfunction builtin_i32x4_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shl, builtin_i32x4_shl);\n\n// i32x4.shr_s -> v128.shr<i32>\nfunction builtin_i32x4_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shr_s, builtin_i32x4_shr_s);\n\n// i32x4.shr_u -> v128.shr<u32>\nfunction builtin_i32x4_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shr_u, builtin_i32x4_shr_u);\n\n// i32x4.any_true -> v128.any_true<i32>\nfunction builtin_i32x4_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_any_true, builtin_i32x4_any_true);\n\n// i32x4.all_true -> v128.all_true<i32>\nfunction builtin_i32x4_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_all_true, builtin_i32x4_all_true);\n\n// i32x4.eq -> v128.eq<i32>\nfunction builtin_i32x4_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_eq, builtin_i32x4_eq);\n\n// i32x4.ne -> v128.ne<i32>\nfunction builtin_i32x4_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ne, builtin_i32x4_ne);\n\n// i32x4.lt_s -> v128.lt<i32>\nfunction builtin_i32x4_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_lt_s, builtin_i32x4_lt_s);\n\n// i32x4.lt_u -> v128.lt<u32>\nfunction builtin_i32x4_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_lt_u, builtin_i32x4_lt_u);\n\n// i32x4.le_s -> v128.le<i32>\nfunction builtin_i32x4_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_le_s, builtin_i32x4_le_s);\n\n// i32x4.le_u -> v128.le<u32>\nfunction builtin_i32x4_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_le_u, builtin_i32x4_le_u);\n\n// i32x4.gt_s -> v128.gt<i32>\nfunction builtin_i32x4_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_gt_s, builtin_i32x4_gt_s);\n\n// i32x4.gt_u -> v128.gt<u32>\nfunction builtin_i32x4_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_gt_u, builtin_i32x4_gt_u);\n\n// i32x4.ge_s -> v128.ge<i32>\nfunction builtin_i32x4_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ge_s, builtin_i32x4_ge_s);\n\n// i32x4.ge_u -> v128.ge<u32>\nfunction builtin_i32x4_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ge_u, builtin_i32x4_ge_u);\n\n// i32x4.trunc_sat_f32x4_s -> v128.trunc_sat<i32>\nfunction builtin_i32x4_trunc_sat_f32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f32x4_s, builtin_i32x4_trunc_sat_f32x4_s);\n\n// i32x4.trunc_sat_f32x4_u -> v128.trunc_sat<u32>\nfunction builtin_i32x4_trunc_sat_f32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f32x4_u, builtin_i32x4_trunc_sat_f32x4_u);\n\n// i32x4.widen_low_i16x8_s -> // v128.widen_low<i16>\nfunction builtin_i32x4_widen_low_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_low_i16x8_s, builtin_i32x4_widen_low_i16x8_s);\n\n// i32x4.widen_low_i16x8_u -> v128.widen_low<u16>\nfunction builtin_i32x4_widen_low_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_low_i16x8_u, builtin_i32x4_widen_low_i16x8_u);\n\n// i32x4.widen_high_i16x8_s -> v128.widen_high<i16>\nfunction builtin_i32x4_widen_high_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_high_i16x8_s, builtin_i32x4_widen_high_i16x8_s);\n\n// i32x4.widen_high_i16x8_u -> v128.widen_high<u16>\nfunction builtin_i32x4_widen_high_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_high_i16x8_u, builtin_i32x4_widen_high_i16x8_u);\n\n// i32x4.load16x4_s -> v128.load_ext<i16>\nfunction builtin_i32x4_load16x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_load16x4_s, builtin_i32x4_load16x4_s);\n\n// i32x4.load16x4_u -> v128.load_ext<u16>\nfunction builtin_i32x4_load16x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_load16x4_u, builtin_i32x4_load16x4_u);\n\n// i64x2.splat -> v128.splat<i64>\nfunction builtin_i64x2_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_splat, builtin_i64x2_splat);\n\n// i64x2.extract_lane -> <i64>v128.extract_lane<i64>\nfunction builtin_i64x2_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extract_lane, builtin_i64x2_extract_lane);\n\n// i64x2.replace_lane -> v128.replace_lane<i64>\nfunction builtin_i64x2_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_replace_lane, builtin_i64x2_replace_lane);\n\n// i64x2.add -> v128.add<i64>\nfunction builtin_i64x2_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_add, builtin_i64x2_add);\n\n// i64x2.sub -> v128.sub<i64>\nfunction builtin_i64x2_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_sub, builtin_i64x2_sub);\n\n// i64x2.neg -> v128.neg<i64>\nfunction builtin_i64x2_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_neg, builtin_i64x2_neg);\n\n// i64x2.shl -> v128.shl<i64>\nfunction builtin_i64x2_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shl, builtin_i64x2_shl);\n\n// i64x2.shr_s -> v128.shr<i64>\nfunction builtin_i64x2_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shr_s, builtin_i64x2_shr_s);\n\n// i64x2.shr_u -> v128.shr<u64>\nfunction builtin_i64x2_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shr_u, builtin_i64x2_shr_u);\n\n// i64x2.any_true -> v128.any_true<i64>\nfunction builtin_i64x2_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_any_true, builtin_i64x2_any_true);\n\n// i64x2.all_true -> v128.all_true<i64>\nfunction builtin_i64x2_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_all_true, builtin_i64x2_all_true);\n\n// i64x2.trunc_sat_f64x2_s -> v128.trunc_sat<i64>\nfunction builtin_i64x2_trunc_sat_f64x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_trunc_sat_f64x2_s, builtin_i64x2_trunc_sat_f64x2_s);\n\n// i64x2.trunc_sat_f64x2_u -> v128.trunc_sat<u64>\nfunction builtin_i64x2_trunc_sat_f64x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_trunc_sat_f64x2_u, builtin_i64x2_trunc_sat_f64x2_u);\n\n// i64x2.load32x2_s -> v128.load_ext<i32>\nfunction builtin_i64x2_load32x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_load32x2_s, builtin_i64x2_load32x2_s);\n\n// i64x2.load32x2_u -> v128.load_ext<u32>\nfunction builtin_i64x2_load32x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_load32x2_u, builtin_i64x2_load32x2_u);\n\n// f32x4.splat -> v128.splat<f32>\nfunction builtin_f32x4_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_splat, builtin_f32x4_splat);\n\n// f32x4.extract_lane -> <f32>v128.extract_lane<f32>\nfunction builtin_f32x4_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_extract_lane, builtin_f32x4_extract_lane);\n\n// f32x4.replace_lane -> v128.replace_lane<f32>\nfunction builtin_f32x4_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_replace_lane, builtin_f32x4_replace_lane);\n\n// f32x4.add -> v128.add<f32>\nfunction builtin_f32x4_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_add, builtin_f32x4_add);\n\n// f32x4.sub -> v128.sub<f32>\nfunction builtin_f32x4_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_sub, builtin_f32x4_sub);\n\n// f32x4.mul -> v128.mul<f32>\nfunction builtin_f32x4_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_mul, builtin_f32x4_mul);\n\n// f32x4.div -> v128.div<f32>\nfunction builtin_f32x4_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_div(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_div, builtin_f32x4_div);\n\n// f32x4.neg -> v128.neg<f32>\nfunction builtin_f32x4_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_neg, builtin_f32x4_neg);\n\n// f32x4.min -> v128.min<f32>\nfunction builtin_f32x4_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_min, builtin_f32x4_min);\n\n// f32x4.max -> v128.max<f32>\nfunction builtin_f32x4_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_max, builtin_f32x4_max);\n\n// f32x4.abs -> v128.abs<f32>\nfunction builtin_f32x4_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_abs, builtin_f32x4_abs);\n\n// f32x4.sqrt -> v128.sqrt<f32>\nfunction builtin_f32x4_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_sqrt, builtin_f32x4_sqrt);\n\n// f32x4.eq -> v128.eq<f32>\nfunction builtin_f32x4_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_eq, builtin_f32x4_eq);\n\n// f32x4.ne -> v128.ne<f32>\nfunction builtin_f32x4_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ne, builtin_f32x4_ne);\n\n// f32x4.lt -> v128.lt<f32>\nfunction builtin_f32x4_lt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_lt, builtin_f32x4_lt);\n\n// f32x4.le -> v128.le<f32>\nfunction builtin_f32x4_le(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_le, builtin_f32x4_le);\n\n// f32x4.gt -> v128.gt<f32>\nfunction builtin_f32x4_gt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_gt, builtin_f32x4_gt);\n\n// f32x4.ge -> v128.ge<f32>\nfunction builtin_f32x4_ge(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ge, builtin_f32x4_ge);\n\n// f32x4.convert_i32x4_s -> v128.convert<i32>\nfunction builtin_f32x4_convert_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_convert_i32x4_s, builtin_f32x4_convert_i32x4_s);\n\n// f32x4.convert_i32x4_u -> v128.convert<u32>\nfunction builtin_f32x4_convert_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_convert_i32x4_u, builtin_f32x4_convert_i32x4_u);\n\n// f32x4.qfma -> v128.qfma<f32>\nfunction builtin_f32x4_qfma(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfma(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_qfma, builtin_f32x4_qfma);\n\n// f32x4.qfms -> v128.qfms<f32>\nfunction builtin_f32x4_qfms(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfms(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_qfms, builtin_f32x4_qfms);\n\n// f64x2.splat -> v128.splat<f64>\nfunction builtin_f64x2_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_splat, builtin_f64x2_splat);\n\n// f64x2.extract_lane -> <f64>v128.extract_lane<f64>\nfunction builtin_f64x2_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_extract_lane, builtin_f64x2_extract_lane);\n\n// f64x2.replace_lane -> v128.replace_lane\nfunction builtin_f64x2_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_replace_lane, builtin_f64x2_replace_lane);\n\n// f64x2.add -> v128.add<f64>\nfunction builtin_f64x2_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_add, builtin_f64x2_add);\n\n// f64x2.sub -> v128.sub<f64>\nfunction builtin_f64x2_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_sub, builtin_f64x2_sub);\n\n// f64x2.mul -> v128.mul<f64>\nfunction builtin_f64x2_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_mul, builtin_f64x2_mul);\n\n// f64x2.div -> v128.div<f64>\nfunction builtin_f64x2_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_div(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_div, builtin_f64x2_div);\n\n// f64x2.neg -> v128.neg<f64>\nfunction builtin_f64x2_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_neg, builtin_f64x2_neg);\n\n// f64x2.min -> v128.min<f64>\nfunction builtin_f64x2_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_min, builtin_f64x2_min);\n\n// f64x2.max -> v128.max<f64>\nfunction builtin_f64x2_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_max, builtin_f64x2_max);\n\n// f64x2.abs -> v128.abs<f64>\nfunction builtin_f64x2_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_abs, builtin_f64x2_abs);\n\n// f64x2.sqrt -> v128.sqrt<f64>\nfunction builtin_f64x2_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_sqrt, builtin_f64x2_sqrt);\n\n// f64x2.eq -> v128.eq<f64>\nfunction builtin_f64x2_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_eq, builtin_f64x2_eq);\n\n// f64x2.ne -> v128.ne<f64>\nfunction builtin_f64x2_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ne, builtin_f64x2_ne);\n\n// f64x2.lt -> v128.lt<f64>\nfunction builtin_f64x2_lt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_lt, builtin_f64x2_lt);\n\n// f64x2.le -> v128.le<f64>\nfunction builtin_f64x2_le(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_le, builtin_f64x2_le);\n\n// f64x2.gt -> v128.gt<f64>\nfunction builtin_f64x2_gt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_gt, builtin_f64x2_gt);\n\n// f64x2.ge -> v128.ge<f64>\nfunction builtin_f64x2_ge(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ge, builtin_f64x2_ge);\n\n// f64x2.convert_i64x2_s -> v128.convert<i64>\nfunction builtin_f64x2_convert_i64x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_convert_i64x2_s, builtin_f64x2_convert_i64x2_s);\n\n// f64x2.convert_i64x2_u -> v128.convert<u64>\nfunction builtin_f64x2_convert_i64x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_convert_i64x2_u, builtin_f64x2_convert_i64x2_u);\n\n// f64x2.qfma -> v128.qfma<f64>\nfunction builtin_f64x2_qfma(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfma(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_qfma, builtin_f64x2_qfma);\n\n// f64x2.qfms -> v128.qfms<f64>\nfunction builtin_f64x2_qfms(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfms(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_qfms, builtin_f64x2_qfms);\n\n// v8x16.shuffle -> v128.shuffle<i8>\nfunction builtin_v8x16_shuffle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shuffle(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_shuffle, builtin_v8x16_shuffle);\n\n// v8x16.swizzle -> v128.swizzle\nfunction builtin_v8x16_swizzle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = null;\n  ctx.contextualType = Type.v128;\n  return builtin_v128_swizzle(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_swizzle, builtin_v8x16_swizzle);\n\n// v8x16.load_splat -> v128.load_splat<u8>\nfunction builtin_v8x16_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_load_splat, builtin_v8x16_load_splat);\n\n// v16x8.load_splat -> v128.load_splat<u16>\nfunction builtin_v16x8_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v16x8_load_splat, builtin_v16x8_load_splat);\n\n// v32x4.load_splat -> v128.load_splat<u32>\nfunction builtin_v32x4_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v32x4_load_splat, builtin_v32x4_load_splat);\n\n// v64x2.load_splat -> v128.load_splat<u64>\nfunction builtin_v64x2_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v64x2_load_splat, builtin_v64x2_load_splat);\n\n// === Internal helpers =======================================================================\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  // this function is @lazy: make sure it exists\n  compiler.compileFunction(visitInstance, true);\n\n  // TODO: for (let element of compiler.program.elementsByName.values()) {\n  for (let _values = Map_values(compiler.program.elementsByName), i = 0, k = _values.length; i < k; ++i) {\n    let element = unchecked(_values[i]);\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let globalType = global.type;\n    let classType = globalType.classReference;\n    if (\n      globalType.is(TypeFlags.REFERENCE) &&\n      classType !== null &&\n      !classType.hasDecorator(DecoratorFlags.UNMANAGED) &&\n      global.is(CommonFlags.COMPILED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinNames.visit_globals,\n    NativeType.I32,  // cookie\n    NativeType.None, // => void\n    [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  // this function is @lazy: make sure it exists\n  compiler.compileFunction(visitInstance, true);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = _keys[i];\n    let instance = assert(managedClasses.get(instanceId));\n    assert(instance.type.isManaged);\n    assert(instanceId == lastId++);\n\n    let visitImpl: Element | null;\n    let code = new Array<ExpressionRef>();\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\")) !== null) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        code.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        let visitThisType = assert(visitSig.thisType);\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          instance.type.isStrictlyAssignableTo(visitThisType) // incl. implemented on super\n        );\n        code.push(\n          module.call(visitFunc.internalName, [\n            module.local_get(0, nativeSizeType), // ref\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n\n    // otherwise generate traversal logic for own fields\n    } else {\n      let members = instance.members;\n      if (members) {\n        // TODO: for (let member of members.values()) {\n        for (let _values = Map_values(members), j = 0, l = _values.length; j < l; ++j) {\n          let member = unchecked(_values[j]);\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!instance.base) code.push(module.return());\n    let block = relooper.addBlock(\n      module.flatten(code)\n    );\n    relooper.addBranchForSwitch(outer, block, [ instanceId ]);\n    blocks.push(block);\n  }\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = unchecked(_keys[i]);\n    let instance = assert(managedClasses.get(instanceId));\n    let base = instance.base;\n    if (base) relooper.addBranch(blocks[instanceId], blocks[base.id]);\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinNames.visit_members,\n    createType([ usizeType.toNativeType(), NativeType.I32 ]), // ref, cookie\n    NativeType.None, // => void\n    [ nativeSizeType ],\n    relooper.renderAndDispose(outer, 2)\n  );\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var lastId = 0;\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = unchecked(_keys[i]);\n    let instance = assert(managedClasses.get(instanceId));\n    assert(instanceId == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      if (instance.extends(arrayPrototype)) flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinNames.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinNames.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n/** Compiles a class-specific instanceof helper, checking a ref against all concrete instances. */\nexport function compileClassInstanceOf(compiler: Compiler, prototype: ClassPrototype): void {\n  var module = compiler.module;\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var instanceofInstance = assert(prototype.program.instanceofInstance);\n  compiler.compileFunction(instanceofInstance);\n\n  var stmts = new Array<ExpressionRef>();\n\n  // if (!ref) return false\n  stmts.push(\n    module.if(\n      module.unary(\n        nativeSizeType == NativeType.I64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.local_get(0, nativeSizeType)\n      ),\n      module.return(\n        module.i32(0)\n      )\n    )\n  );\n\n  // if (__instanceof(ref, ID[i])) return true\n  var instances = prototype.instances;\n  if (instances !== null && instances.size > 0) {\n    // TODO: for (let instance of instances.values()) {\n    for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      stmts.push(\n        module.if(\n          module.call(instanceofInstance.internalName, [\n            module.local_get(0, nativeSizeType),\n            module.i32(instance.id)\n          ], NativeType.I32),\n          module.return(\n            module.i32(1)\n          )\n        )\n      );\n    }\n  }\n\n  // return false\n  stmts.push(\n    module.return(\n      module.i32(0)\n    )\n  );\n\n  module.addFunction(prototype.internalName + \"~instanceof\", nativeSizeType, NativeType.I32, null, module.flatten(stmts));\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(ctx: BuiltinContext): Type | null {\n  var compiler = ctx.compiler;\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        ctx.reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length > 0) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString()\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments !== null && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString()\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    ctx.reportNode.argumentsRange, \"1\", operands.length.toString()\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Checks that the specified feature is enabled. */\nfunction checkFeatureEnabled(ctx: BuiltinContext, feature: Feature): i32 {\n  var compiler = ctx.compiler;\n  if (!compiler.options.hasFeature(feature)) {\n    compiler.error(\n      DiagnosticCode.Feature_0_is_not_enabled,\n      ctx.reportNode.range, featureToString(feature)\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(ctx: BuiltinContext, setCurrentTypeOnError: bool = false): i32 {\n  var compiler = ctx.compiler;\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(ctx: BuiltinContext, setCurrentTypeOnError: bool = false): i32 {\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let compiler = ctx.compiler;\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(ctx: BuiltinContext): i32 {\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let prototype = ctx.prototype;\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      ctx.reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(ctx: BuiltinContext, expected: i32): i32 {\n  var operands = ctx.operands;\n  if (operands.length != expected) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      ctx.reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(ctx: BuiltinContext, expectedMinimum: i32, expectedMaximum: i32): i32 {\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      ctx.reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      ctx.reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Makes an usize constant matching contextual type if reasonable. */\nfunction contextualUsize(compiler: Compiler, value: i64, contextualType: Type): ExpressionRef {\n  var module = compiler.module;\n  // Check if contextual type fits\n  if (contextualType != Type.auto && contextualType.is(TypeFlags.INTEGER | TypeFlags.VALUE)) {\n    switch (contextualType.kind) {\n      case TypeKind.I32: {\n        if (i64_is_i32(value)) {\n          compiler.currentType = Type.i32;\n          return module.i32(i64_low(value));\n        }\n        break;\n      }\n      case TypeKind.U32: {\n        if (i64_is_u32(value)) {\n          compiler.currentType = Type.u32;\n          return module.i32(i64_low(value));\n        }\n        break;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        compiler.currentType = contextualType;\n        return module.i64(i64_low(value), i64_high(value));\n      }\n      // isize/usize falls through\n      // small int is probably not intended\n    }\n  }\n  // Default to usize\n  if (compiler.options.isWasm64) {\n    compiler.currentType = Type.usize64;\n    return module.i64(i64_low(value), i64_high(value));\n  } else {\n    compiler.currentType = Type.usize32;\n    assert(!i64_high(value));\n    return module.i32(i64_low(value));\n  }\n}\n","/**\n * @fileoverview Generated from diagnosticsMessages.json. Do not edit.\n * @license Apache-2.0\n */\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Not_implemented = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Feature_0_is_not_enabled = 103,\n  Function_0_is_possibly_called_virtually_which_is_not_yet_supported = 104,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Operation_0_cannot_be_applied_to_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Expression_is_never_null = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  Type_0_is_illegal_in_this_context = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Type_0_is_not_a_function_index_or_function_reference = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  _0_is_not_a_valid_operator = 224,\n  Expression_cannot_be_represented_by_a_type = 225,\n  Expression_resolves_to_unusual_type_0 = 226,\n  Type_0_is_cyclic_Module_will_include_deferred_garbage_collection = 900,\n  Importing_the_table_disables_some_indirect_call_optimizations = 901,\n  Exporting_the_table_disables_some_indirect_call_optimizations = 902,\n  Expression_compiles_to_a_dynamic_check_at_runtime = 903,\n  Indexed_access_may_involve_bounds_checking = 904,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  Type_argument_list_cannot_be_empty = 1099,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer = 1190,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  This_expression_is_not_constructable = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly = 2453,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  _0_is_referenced_directly_or_indirectly_in_its_own_base_expression = 2506,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  The_this_types_of_each_signature_are_incompatible = 2685,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  Type_0_has_no_call_signatures = 2757,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Not implemented.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 103: return \"Feature '{0}' is not enabled.\";\n    case 104: return \"Function '{0}' is possibly called virtually, which is not yet supported.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Operation '{0}' cannot be applied to type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Expression is never 'null'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"Type '{0}' is illegal in this context.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Type '{0}' is not a function index or function reference.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"'{0}' is not a valid operator.\";\n    case 225: return \"Expression cannot be represented by a type.\";\n    case 226: return \"Expression resolves to unusual type '{0}'.\";\n    case 900: return \"Type '{0}' is cyclic. Module will include deferred garbage collection.\";\n    case 901: return \"Importing the table disables some indirect call optimizations.\";\n    case 902: return \"Exporting the table disables some indirect call optimizations.\";\n    case 903: return \"Expression compiles to a dynamic check at runtime.\";\n    case 904: return \"Indexed access may involve bounds checking.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1099: return \"Type argument list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1190: return \"The variable declaration of a 'for...of' statement cannot have an initializer.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"This expression is not constructable.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2453: return \"The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2506: return \"'{0}' is referenced directly or indirectly in its own base expression.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2685: return \"The 'this' types of each signature are incompatible.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 2757: return \"Type '{0}' has no call signatures.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * @fileoverview A TypeScript parser for the AssemblyScript subset.\n *\n * Takes the tokens produced by the `Tokenizer` and builds an abstract\n * syntax tree composed of `Node`s wrapped in a `Source` out of it.\n *\n * @license Apache-2.0\n */\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  TypeName,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForOfStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n  /** Current file being parsed. */\n  currentSource: Source;\n  /** Dependency map **/\n  dependees: Map<string, Source> = new Map();\n\n  /** Constructs a new parser. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    /** Source text of the file. */\n    text: string,\n    /** Normalized path of the file. */\n    path: string,\n    /** Whether this is an entry file. */\n    isEntry: bool\n  ): void {\n    // the frontend gives us paths with .ts endings\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.USER_ENTRY\n        : path.startsWith(LIBRARY_PREFIX)\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n            ? SourceKind.LIBRARY_ENTRY\n            : SourceKind.LIBRARY\n          : SourceKind.USER\n    );\n    var program = this.program;\n    program.sources.push(source);\n    this.currentSource = source;\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    var defaultStart: i32 = 0;\n    var defaultEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? assert(backlog.shift()) : null;\n  }\n\n  /** Obtains the dependee of the given imported file. */\n  getDependee(dependent: string): string | null {\n    var source = this.dependees.get(dependent);\n    if (source) return source.internalPath;\n    return null;\n  }\n\n  /** Finishes parsing. */\n  finish(): void {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    this.dependees.clear();\n  }\n\n  // types\n\n  /** Parses a type name. */\n  parseTypeName(\n    tn: Tokenizer\n  ): TypeName | null {\n\n    // at: Identifier ('.' Identifier)*\n\n    var first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n    var current = first;\n    while (tn.skip(Token.DOT)) {\n      if (tn.skip(Token.IDENTIFIER)) {\n        let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n        current.next = next;\n        current = next;\n      } else {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range(tn.pos)\n        );\n        return null;\n      }\n    }\n    return first;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // before: Type\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \")\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let name = this.parseTypeName(tn);\n      if (!name) return null;\n      let parameters: TypeNode[] | null = null;\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [ parameter ];\n          else parameters.push(parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      if (!parameters) parameters = [];\n      type = Node.createNamedType(name, parameters, nullable, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n    var firstParamNameNoType: IdentifierExpression | null = null;\n    var firstParamKind: ParameterKind = ParameterKind.DEFAULT;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (!isSignature) {\n              if (tn.peek() == Token.COMMA) {\n                isSignature = true;\n                tn.discard(state);\n              }\n            }\n            if (isSignature) {\n              let param = new ParameterNode();\n              param.parameterKind = kind;\n              param.name = name;\n              param.type = Node.createOmittedType(tn.range().atEnd);\n              if (!parameters) parameters = [ param ];\n              else parameters.push(param);\n              this.error(\n                DiagnosticCode.Type_expected,\n                param.type.range\n              ); // recoverable\n            } else if (!parameters) {\n              // on '(' Identifier ^',' we don't yet know whether this is a\n              // parenthesized or a function type, hence we have to delay the\n              // respective diagnostic until we know for sure.\n              firstParamNameNoType = name;\n              firstParamKind = kind;\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      if (!isSignature) {\n        isSignature = true;\n        tn.discard(state);\n        if (firstParamNameNoType) { // now we know\n          let param = new ParameterNode();\n          param.parameterKind = firstParamKind;\n          param.name = firstParamNameNoType;\n          param.type = Node.createOmittedType(firstParamNameNoType.range.atEnd);\n          if (!parameters) parameters = [ param ];\n          else parameters.push(param);\n          this.error(\n            DiagnosticCode.Type_expected,\n            param.type.range\n          ); // recoverable\n        }\n      }\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    if (!parameters) parameters = [];\n    return Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier(IdentifierHandling.PREFER)) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32,\n    isFor: bool = false\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators, isFor);\n      if (!member) return null;\n      members.push(member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null,\n    isFor: bool = false\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn, true);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else if (!isFor) {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) != 0 && initializer !== null) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    var seenOptional = false;\n    var start = tn.tokenPos;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!typeParameters.length) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range(start, tn.pos)\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>t;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest !== null && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(assert(startRange), tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length > 0 && parameters[0].initializer !== null) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>t;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (type.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            type.range\n          );\n          return null;\n        }\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = new Array();\n        decorators.push(decorator);\n      } while (tn.skip(Token.AT));\n      if (decorators !== null && isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, flags, decorators);\n        if (!retIndex) {\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n          return null;\n        }\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length > 0 && parameters[0].initializer !== null) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & (CommonFlags.AMBIENT | CommonFlags.ABSTRACT)) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) != 0 && ((flags & CommonFlags.STATIC) != 0 || isInterface || initializer !== null)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n  ): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators !== null && decorators.length > 0) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              if (valueType.kind != NodeKind.NAMEDTYPE) {\n                this.error(\n                  DiagnosticCode.Identifier_expected,\n                  valueType.range\n                );\n                return null;\n              }\n              return Node.createIndexSignatureDeclaration(<NamedTypeNode>keyType, valueType, flags, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.dependees.set(internalPath, this.currentSource);\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          let exportPaths = source.exportPaths;\n          if (!exportPaths) source.exportPaths = [ internalPath ];\n          else if (!exportPaths.includes(internalPath)) exportPaths.push(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.dependees.set(internalPath, this.currentSource);\n            this.backlog.push(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      if (asIdentifier) {\n        return Node.createExportMember(\n          identifier,\n          asIdentifier,\n          Range.join(identifier.range, asIdentifier.range)\n        );\n      }\n      return Node.createExportMember(\n        identifier,\n        null,\n        identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Not_implemented,\n          tn.range()\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, this.currentSource);\n          this.backlog.push(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      if (asIdentifier) {\n        return Node.createImportDeclaration(\n          identifier,\n          asIdentifier,\n          Range.join(identifier.range, asIdentifier.range)\n        );\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        null,\n        identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(statement, condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): Statement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos, true);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos, true);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos, true);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (initializer) {\n        if (tn.skip(Token.OF)) {\n          // TODO: for (let [key, val] of ...)\n          if (initializer.kind == NodeKind.EXPRESSION) {\n            if ((<ExpressionStatement>initializer).expression.kind != NodeKind.IDENTIFIER) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                initializer.range\n              );\n              return null;\n            }\n            return this.parseForOfStatement(tn, startPos, initializer);\n          }\n          if (initializer.kind == NodeKind.VARIABLE) {\n            let declarations = (<VariableStatement>initializer).declarations;\n            for (let i = 0, k = declarations.length; i < k; ++i) {\n              let declaration = declarations[i];\n              let initializer = declaration.initializer;\n              if (initializer) {\n                this.error(\n                  DiagnosticCode.The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer,\n                  initializer.range\n                ); // recoverable\n              }\n            }\n            return this.parseForOfStatement(tn, startPos, initializer);\n          }\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            initializer.range\n          );\n          return null;\n        }\n        // non-for..of needs type or initializer\n        if (initializer.kind == NodeKind.VARIABLE) {\n          let declarations = (<VariableStatement>initializer).declarations;\n          for (let i = 0, k = declarations.length; i < k; ++i) {\n            let declaration = declarations[i];\n            if (!declaration.initializer) {\n              if (declaration.flags & CommonFlags.CONST) {\n                this.error(\n                  DiagnosticCode._const_declarations_must_be_initialized,\n                  declaration.name.range\n                );\n              } else if (!declaration.type) {\n                this.error(\n                  DiagnosticCode.Type_expected,\n                  declaration.name.range.atEnd\n                );\n              }\n            }\n          }\n        }\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseForOfStatement(\n    tn: Tokenizer,\n    startPos: i32,\n    variable: Statement,\n  ): ForOfStatement | null {\n\n    // at 'of': Expression ')' Statement\n\n    var iterable = this.parseExpression(tn);\n    if (!iterable) return null;\n\n    if (!tn.skip(Token.CLOSEPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \")\"\n      );\n      return null;\n    }\n\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    return Node.createForOfStatement(\n      variable,\n      iterable,\n      statement,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let switchCases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let switchCase = this.parseSwitchCase(tn);\n            if (!switchCase) return null;\n            switchCases.push(switchCase);\n          }\n          let ret = Node.createSwitchStatement(condition, switchCases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    switch (token) {\n\n      // TODO: SpreadExpression, YieldExpression\n      case Token.DOT_DOT_DOT:\n      case Token.YIELD: // fallthrough to unsupported UnaryPrefixExpression\n\n      // UnaryPrefixExpression\n      case Token.EXCLAMATION:\n      case Token.TILDE:\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.DELETE: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER:\n          case NodeKind.ELEMENTACCESS:\n          case NodeKind.PROPERTYACCESS: break;\n          default: {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              operand.range\n            );\n          }\n        }\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n\n      // NewExpression\n      case Token.NEW: {\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        let typeName = this.parseTypeName(tn);\n        if (!typeName) return null;\n        let typeArguments: TypeNode[] | null = null;\n        let arguments_: Expression[] | null = null;\n        if (\n          tn.skip(Token.OPENPAREN)\n          ||\n          (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n        ) {\n          arguments_ = this.parseArguments(tn);\n          if (!arguments_) return null;\n        } else {\n          arguments_ = []; // new Type;\n        }\n        return Node.createNewExpression(\n          typeName,\n          typeArguments,\n          arguments_,\n          tn.range(startPos, tn.pos)\n        );\n      }\n\n      // Special IdentifierExpression\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n      case Token.THIS: return Node.createThisExpression(tn.range());\n      case Token.CONSTRUCTOR: return Node.createConstructorExpression(tn.range());\n\n      // ParenthesizedExpression or FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        let inner = this.parseExpression(tn);\n        if (!inner) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        inner = Node.createParenthesizedExpression(inner, tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, inner);\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          let expr: Expression | null;\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        let expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return this.maybeParseCallExpression(tn, identifier, true);\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        let expr = Node.createSuperExpression(tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        let expr = this.parseFunctionExpression(tn);\n        if (!expr) return null;\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var start = tn.tokenPos;\n    var typeArguments = new Array<TypeNode>();\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN)) {\n      let end = tn.pos;\n      if (tn.skip(Token.OPENPAREN)) {\n        if (!typeArguments.length) {\n          this.error(\n            DiagnosticCode.Type_argument_list_cannot_be_empty,\n            tn.range(start, end)\n          );\n        }\n        return typeArguments;\n      }\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // precedence climbing\n    // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(tn.peek())) >= precedence\n    ) {\n      let token = tn.next();\n      switch (token) {\n\n        // AssertionExpression\n        case Token.AS: {\n          if (tn.skip(Token.CONST)) {\n            expr = Node.createAssertionExpression(\n              AssertionKind.CONST,\n              expr,\n              null,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let toType = this.parseType(tn); // reports\n            if (!toType) return null;\n            expr = Node.createAssertionExpression(\n              AssertionKind.AS,\n              expr,\n              toType,\n              tn.range(startPos, tn.pos)\n            );\n          }\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          let next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        // PropertyAccessExpression\n        case Token.DOT: {\n          if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) { // expr '.' Identifier\n            let next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            expr = Node.createPropertyAccessExpression(\n              expr,\n              next,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let next = this.parseExpression(tn, nextPrecedence + 1);\n            if (!next) return null;\n            if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n          }\n          expr = this.maybeParseCallExpression(tn, expr, true);\n          break;\n        }\n        // BinaryExpression (right associative)\n        case Token.EQUALS:\n        case Token.PLUS_EQUALS:\n        case Token.MINUS_EQUALS:\n        case Token.ASTERISK_ASTERISK_EQUALS:\n        case Token.ASTERISK_EQUALS:\n        case Token.SLASH_EQUALS:\n        case Token.PERCENT_EQUALS:\n        case Token.LESSTHAN_LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.AMPERSAND_EQUALS:\n        case Token.CARET_EQUALS:\n        case Token.BAR_EQUALS:\n        case Token.ASTERISK_ASTERISK: {\n          let next = this.parseExpression(tn, nextPrecedence);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        // BinaryExpression\n        case Token.LESSTHAN:\n        case Token.GREATERTHAN:\n        case Token.LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_EQUALS:\n        case Token.EQUALS_EQUALS:\n        case Token.EQUALS_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS:\n        case Token.PLUS:\n        case Token.MINUS:\n        case Token.ASTERISK:\n        case Token.SLASH:\n        case Token.PERCENT:\n        case Token.LESSTHAN_LESSTHAN:\n        case Token.GREATERTHAN_GREATERTHAN:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n        case Token.AMPERSAND:\n        case Token.BAR:\n        case Token.CARET:\n        case Token.AMPERSAND_AMPERSAND:\n        case Token.BAR_BAR: {\n          let next = this.parseExpression(tn, nextPrecedence + 1);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: assert(false); // filtered by determinePrecedence\n      }\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression,\n    potentiallyGeneric: bool = false\n  ): Expression {\n    var typeArguments: TypeNode[] | null = null;\n    while (\n      tn.skip(Token.OPENPAREN)\n      ||\n      potentiallyGeneric && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n    ) {\n      let args = this.parseArguments(tn);\n      if (!args) break;\n      expr = Node.createCallExpression( // is again callable\n        expr,\n        typeArguments,\n        args,\n        tn.range(expr.range.start, tn.pos)\n      );\n      potentiallyGeneric = false;\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n","/**\n * @fileoverview Builders for various definitions describing a module.\n *\n * - TSDBuilder: Creates a TypeScript definition file (.d.ts)\n * - IDLBuilder: Creates a WebIDL interface definition (.webidl)\n *\n * @license Apache-2.0\n */\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  SourceKind\n } from \"./ast\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nexport abstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    // TODO: for (let file of this.program.filesByName.values()) {\n    for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let [memberName, member] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(exports.get(memberName));\n        this.visitElement(memberName, member);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = unchecked(exportsStar[i]);\n        this.visitFile(exportStar);\n      }\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (!element.is(CommonFlags.INSTANCE) && seen.has(element)) {\n      this.visitAlias(name, element, assert(seen.get(element)));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.ENUMVALUE: break; // handled by visitEnum\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>element;\n        if (fieldInstance.is(CommonFlags.COMPILED)) this.visitField(name, fieldInstance);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>element;\n        let getterInstance = propertyInstance.getterInstance;\n        if (getterInstance) this.visitFunction(name, getterInstance);\n        let setterInstance = propertyInstance.setterInstance;\n        if (setterInstance) this.visitFunction(name, setterInstance);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      // TODO: for (let instance of instances.values()) {\n      for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      // TODO: for (let instance of instances.values()) {\n      for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      // TODO: for (let [memberName, member] of members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(members.get(memberName));\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let enumValue = <EnumValue>member;\n          let isConst = enumValue.is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(memberName);\n          if (isConst) {\n            sb.push(\" = \");\n            assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low(enumValue.constantIntegerValue).toString());\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members !== null && members.size > 0) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export \");\n    if (element.is(CommonFlags.CONST)) sb.push(\"const \");\n    sb.push(\"enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    var remainingMembers = 0;\n    if (members) {\n      remainingMembers = members.size;\n      // TODO: for (let [memberName, member] of members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(members.get(memberName));\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let enumValue = <EnumValue>member;\n          indent(sb, this.indentLevel);\n          sb.push(memberName);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low(enumValue.constantIntegerValue).toString());\n          }\n          sb.push(\",\\n\");\n          --remainingMembers;\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n    if (remainingMembers) this.visitNamespace(name, element);\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      sb.push(\"export \");\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(name);\n    var base = element.base;\n    if (base !== null && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      let extendsNode = assert(element.prototype.extendsNode);\n      sb.push(extendsNode.name.identifier.text); // TODO: fqn?\n    }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      // TODO: for (let member of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      // TODO: for (let member of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.parent == element) { // own member\n          this.visitElement(member.name, member);\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members !== null && members.size > 0) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\": typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    var isWasm64 = this.program.options.isWasm64;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type i64 = BigInt;\\n\");\n    if (isWasm64) {\n      sb.push(\"  type isize = BigInt;\\n\");\n    } else {\n      sb.push(\"  type isize = number;\\n\");\n    }\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type u64 = BigInt;\\n\");\n    if (isWasm64) {\n      sb.push(\"  type usize = BigInt;\\n\");\n    } else {\n      sb.push(\"  type usize = number;\\n\");\n    }\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    // TODO: for (let member of members.values()) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = unchecked(_values[i]);\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n              let instance = unchecked(_values[j]);\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n              let instance = unchecked(_values[j]);\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * @fileoverview JavaScript glue code.\n * @license Apache-2.0\n */\n\nimport \"../../../std/portable/index\";\nimport \"../binaryen\";\nimport \"./float\";\nimport \"./i64\";\nimport \"./collections\";\n","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 2; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    }\n  });\n}\n\nfunction defaultComparator(a, b) {\n  if (a === b) {\n    if (a !== 0) return 0;\n    a = 1 / a, b = 1 / b;\n  } else {\n    var nanA = a != a, nanB = b != b;\n    if (nanA | nanB) return nanA - nanB;\n    if (a == null) a = String(a);\n    if (b == null) b = String(b);\n  }\n  return a > b ? 1 : -1;\n}\n\nconst arraySort = Array.prototype.sort;\nArray.prototype.sort = function sort(comparator) {\n  return arraySort.call(this, comparator || defaultComparator);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  },\n  exp2: {\n    value: function exp2(x) {\n      return Math.pow(2, x);\n    }\n  }\n});\n\nglobalScope[\"unmanaged\"] = function() {};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBALS = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Non-trapping float to integer operations. */\n  NONTRAPPING_F2I = 1 << 2, // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 3, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 4, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 5, // see: https://github.com/WebAssembly/threads\n  /** Exception handling operations. */\n  EXCEPTION_HANDLING = 1 << 6, // see: https://github.com/WebAssembly/exception-handling\n  /** Tail call operations. */\n  TAIL_CALLS = 1 << 7, // see: https://github.com/WebAssembly/tail-call\n  /** Reference types. */\n  REFERENCE_TYPES = 1 << 8, // see: https://github.com/WebAssembly/reference-types\n  /** Multi value types. */\n  MULTI_VALUE = 1 << 9 // see: https://github.com/WebAssembly/multi-value\n}\n\n/** Gets the name of the specified feature one would specify on the command line. */\nexport function featureToString(feature: Feature): string {\n  switch (feature) {\n    case Feature.SIGN_EXTENSION: return \"sign-extension\";\n    case Feature.MUTABLE_GLOBALS: return \"mutable-globals\";\n    case Feature.NONTRAPPING_F2I: return \"nontrapping-f2i\";\n    case Feature.BULK_MEMORY: return \"bulk-memory\";\n    case Feature.SIMD: return \"simd\";\n    case Feature.THREADS: return \"threads\";\n    case Feature.EXCEPTION_HANDLING: return \"exception-handling\";\n    case Feature.TAIL_CALLS: return \"tail-calls\";\n    case Feature.REFERENCE_TYPES: return \"reference-types\";\n    case Feature.MULTI_VALUE: return \"multi-value\";\n  }\n  assert(false);\n  return \"\";\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64,\n  /** Portable. */\n  JS\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `Set`. */\n  SET = 1 << 2,\n  /** Type is a `Map`. */\n  MAP = 1 << 3,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 4,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 5,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 6,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 7,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 8,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 9,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 10,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 11,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 12,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 13,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 14,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 15,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 16,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 17,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 18,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 19,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 20,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 21,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 22\n}\n","/**\n * @fileoverview Floating point glue code for JaavaScript.\n * @license Apache-2.0\n */\n\nconst F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","/**\n * @fileoverview 64-bit integer glue code for JavaScript.\n * @license Apache-2.0\n */\n\nconst Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString();\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * @fileoverview Collections glue code for JavaScript.\n * @license Apache-2.0\n */\n\nglobal.Map_keys = function(map) {\n  return Array.from(map.keys());\n};\n\nglobal.Map_values = function(map) {\n  return Array.from(map.values());\n};\n\nglobal.Set_values = function(set) {\n  return Array.from(set.values());\n};\n","/**\n * @license\n * Copyright 2020 Daniel Wirtz / The AssemblyScript Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview The C-like and re-exported public compiler interface.\n *\n * The intended way to consume the compiler sources is to import this\n * file, which again exports all relevant functions, classes and constants\n * as a flat namespace.\n *\n * Note though that the compiler sources are written in \"portable\n * AssemblyScript\" that can be compiled to both JavaScript with tsc and\n * to WebAssembly with asc, and as such require additional glue code\n * depending on the target.\n *\n * When compiling to JavaScript `glue/js/index.js` must be included.\n * When compiling to WebAssembly `glue/wasm/index.ts` must be included.\n */\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Program } from \"./program\";\n\n// Options\n\n/** Creates a new set of compiler options. */\nexport function newOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `exportTable` option. */\nexport function setExportTable(options: Options, exportTable: bool): void {\n  options.exportTable = exportTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets the `tableBase` option. */\nexport function setTableBase(options: Options, tableBase: u32): void {\n  options.tableBase = tableBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sets the `noUnsafe` option. */\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\n  options.noUnsafe = noUnsafe;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBALS = Feature.MUTABLE_GLOBALS;\n/** Non-trapping float to int conversion operations. */\nexport const FEATURE_NONTRAPPING_F2I = Feature.NONTRAPPING_F2I;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n/** Exception handling operations. */\nexport const FEATURE_EXCEPTION_HANDLING = Feature.EXCEPTION_HANDLING;\n/** Tail call operations. */\nexport const FEATURE_TAIL_CALLS = Feature.TAIL_CALLS;\n/** Reference types. */\nexport const FEATURE_REFERENCE_TYPES = Feature.REFERENCE_TYPES;\n/** Multi value types. */\nexport const FEATURE_MULTI_VALUE = Feature.MULTI_VALUE;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Disables a specific feature. */\nexport function disableFeature(options: Options, feature: Feature): void {\n  options.features &= ~feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Sets the `pedantic` option. */\nexport function setPedantic(options: Options, pedantic: bool): void {\n  options.pedantic = pedantic;\n}\n\n// Program\n\n/** Creates a new Program. */\nexport function newProgram(options: Options): Program {\n  return new Program(options);\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(program: Program): DiagnosticMessage | null {\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Obtains the source of the given file. */\nexport function getSource(program: Program, internalPath: string): string | null {\n  return program.getSource(internalPath);\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n// Parser\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parse(\n  /** Program reference. */\n  program: Program,\n  /** Source text of the file. */\n  text: string,\n  /** Normalized path of the file. */\n  path: string,\n  /** Whether this is an entry file. */\n  isEntry: bool = false\n): void {\n  program.parser.parseFile(text, path, isEntry);\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(program: Program): string | null {\n  return program.parser.nextFile();\n}\n\n/** Obtains the path of the dependee of a given imported file. */\nexport function getDependee(program: Program, file: string): string | null {\n  return program.parser.getDependee(file);\n}\n\n// Compiler\n\n/** Initializes the program pre-emptively for transform hooks. */\nexport function initializeProgram(program: Program, options: Options): void {\n  program.initialize(options);\n}\n\n/** Compiles the parsed sources to a module. */\nexport function compile(program: Program): Module {\n  program.parser.finish();\n  return new Compiler(program).compile();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Builds a JSON file of a program's runtime type information. */\nexport function buildRTTI(program: Program): string {\n  var sb = new Array<string>();\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\n  // TODO: for (let cls of program.managedClasses.values()) {\n  for (let _values = Map_values(program.managedClasses), i = 0, k = _values.length; i < k; ++i) {\n    let cls = unchecked(_values[i]);\n    sb.push(\"    \\\"\");\n    sb.push(cls.internalName);\n    sb.push(\"\\\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\n  // TODO: for (let cls of program.managedClasses.values()) {\n  for (let _values = Map_values(program.managedClasses), i = 0, k = _values.length; i < k; ++i) {\n    let cls = unchecked(_values[i]);\n    let base = cls.base;\n    sb.push(\"    \");\n    sb.push(base ? base.id.toString() : \"0\");\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\n  // TODO: for (let cls of program.managedClasses.values()) {\n  for (let _values = Map_values(program.managedClasses), i = 0, k = _values.length; i < k; ++i) {\n    let cls = unchecked(_values[i]);\n    sb.push(\"    \");\n    sb.push(cls.rttiFlags.toString());\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ]\\n}\\n\");\n  return sb.join(\"\");\n}\n\n// Full API\nexport * from \"./ast\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nimport * as util from \"./util/index\";\nexport { util };\n\n// TODO: compat with 0.9, remove with 0.10\nexport * from \"./util/index\";\n","/**\n * @fileoverview Various binary reading and writing utility.\n * @license Apache-2.0\n */\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): i64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: i64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/**\n * @fileoverview Various collections utility.\n * @license Apache-2.0\n */\n\nexport function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let len = original.length;\n    let cloned = new Array<V>(len);\n    for (let i = 0; i < len; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    // TODO: for (let v of original) {\n    for (let _values = Set_values(original), i = 0, k = _values.length; i < k; ++i) {\n      let v = unchecked(_values[i]);\n      cloned.add(v);\n    }\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    // TODO: for (let [k, v] of original) {\n    for (let _keys = Map_keys(original), i = 0, k = _keys.length; i < k; ++i) {\n      let k = unchecked(_keys[i]);\n      let v = assert(original.get(k));\n      cloned.set(k, v);\n    }\n  }\n  if (overrides) {\n    // TODO: for (let [k, v] of overrides) {\n    for (let _keys = Map_keys(overrides), i = 0, k = _keys.length; i < k; ++i) {\n      let k = unchecked(_keys[i]);\n      let v = assert(overrides.get(k));\n      cloned.set(k, v);\n    }\n  }\n  return cloned;\n}\n","/**\n * @fileoverview Various math utility.\n * @license Apache-2.0\n */\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * @fileoverview Various file path utility.\n * @license Apache-2.0\n */\n\nimport {\n  CharCode\n} from \"./text\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/**\n * @fileoverview Various character and text utility.\n * @license Apache-2.0\n */\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 170 || code > 65500 ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 170 || code > 65500 ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n"],"sourceRoot":""}